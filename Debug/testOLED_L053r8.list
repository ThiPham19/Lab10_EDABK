
testOLED_L053r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f38  08006f38  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f40  08006f40  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000078  08006fc0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08006fc0  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b503  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002269  00000000  00000000  0002b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015359  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2e3  00000000  00000000  00044099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a81e  00000000  00000000  0005237c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccb9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000ccbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006010 	.word	0x08006010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006010 	.word	0x08006010

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8d8 	bl	8000678 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8d3 	bl	8000678 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzsi2>:
 800063c:	211c      	movs	r1, #28
 800063e:	2301      	movs	r3, #1
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4298      	cmp	r0, r3
 8000644:	d301      	bcc.n	800064a <__clzsi2+0xe>
 8000646:	0c00      	lsrs	r0, r0, #16
 8000648:	3910      	subs	r1, #16
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	4298      	cmp	r0, r3
 800064e:	d301      	bcc.n	8000654 <__clzsi2+0x18>
 8000650:	0a00      	lsrs	r0, r0, #8
 8000652:	3908      	subs	r1, #8
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0x22>
 800065a:	0900      	lsrs	r0, r0, #4
 800065c:	3904      	subs	r1, #4
 800065e:	a202      	add	r2, pc, #8	; (adr r2, 8000668 <__clzsi2+0x2c>)
 8000660:	5c10      	ldrb	r0, [r2, r0]
 8000662:	1840      	adds	r0, r0, r1
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	02020304 	.word	0x02020304
 800066c:	01010101 	.word	0x01010101
	...

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f7ff ffdd 	bl	800063c <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	0008      	movs	r0, r1
 8000688:	f7ff ffd8 	bl	800063c <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <MAP>:
//	NVIC_SetPriority(SysTick_IRQn,(1<<__NVIC_PRIO_BITS)-1);
//	SysTick->CTRL = 0x07;
//	__enable_irq();
//}

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin)) / (au32_INmax - au32_INmin)) + au32_OUTmin);
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	69b9      	ldr	r1, [r7, #24]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	1a8a      	subs	r2, r1, r2
 80006aa:	435a      	muls	r2, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	0019      	movs	r1, r3
 80006b6:	f7ff fd31 	bl	800011c <__udivsi3>
 80006ba:	0003      	movs	r3, r0
 80006bc:	001a      	movs	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	18d3      	adds	r3, r2, r3
} //chuyển đổi giá trị ADC về giới hạn chiều ngang OLED
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b004      	add	sp, #16
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	//địch rải tên lửa theo chu kỳ ngắt của systick
    if (!(gCounter % 10))
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <HAL_SYSTICK_Callback+0x80>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	210a      	movs	r1, #10
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff fda6 	bl	8000228 <__aeabi_uidivmod>
 80006dc:	1e0b      	subs	r3, r1, #0
 80006de:	d101      	bne.n	80006e4 <HAL_SYSTICK_Callback+0x18>
    {
        Sprite_Enemy_Missle_Launch();
 80006e0:	f004 faa0 	bl	8004c24 <Sprite_Enemy_Missle_Launch>
    }
    if (Sprite_GetPlayerMissileLaunchFlag() == 1)
 80006e4:	f004 fbbe 	bl	8004e64 <Sprite_GetPlayerMissileLaunchFlag>
 80006e8:	0003      	movs	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d103      	bne.n	80006f6 <HAL_SYSTICK_Callback+0x2a>
    {
        Sprite_ClearPlayerMissileLaunchFlag();
 80006ee:	f004 fbc3 	bl	8004e78 <Sprite_ClearPlayerMissileLaunchFlag>
        Sprite_Player_Missle_Launch();
 80006f2:	f004 fa31 	bl	8004b58 <Sprite_Player_Missle_Launch>
    }
	//tùy chỉnh cho tốc độ di chuyển kẻ địch
	if (enemy_move_speed == ENEMY_SPEED_DIVIDE) {
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <HAL_SYSTICK_Callback+0x84>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d10b      	bne.n	8000718 <HAL_SYSTICK_Callback+0x4c>
		if (enemy_move == 0) {
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_SYSTICK_Callback+0x88>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d104      	bne.n	8000712 <HAL_SYSTICK_Callback+0x46>
			enemy_move = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_SYSTICK_Callback+0x88>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
			Sprite_Enemy_Move();
 800070e:	f003 fbcb 	bl	8003ea8 <Sprite_Enemy_Move>
		}
		enemy_move_speed = 0;//reset vòng đếm cho tốc độ di chuyển kẻ địch
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_SYSTICK_Callback+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	}
		enemy_move_speed++;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_SYSTICK_Callback+0x84>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <HAL_SYSTICK_Callback+0x84>)
 8000724:	701a      	strb	r2, [r3, #0]
		Sprite_Missle_Move();
 8000726:	f003 ff8f 	bl	8004648 <Sprite_Missle_Move>
		Sprite_Player_Move(adc_value);
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_SYSTICK_Callback+0x8c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	0018      	movs	r0, r3
 8000730:	f003 fafe 	bl	8003d30 <Sprite_Player_Move>
	  //turn on semaphore
	  semaphore = 1;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_SYSTICK_Callback+0x90>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
	  gCounter++;
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_SYSTICK_Callback+0x80>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <HAL_SYSTICK_Callback+0x80>)
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000150 	.word	0x20000150
 8000750:	20000149 	.word	0x20000149
 8000754:	20000148 	.word	0x20000148
 8000758:	2000014c 	.word	0x2000014c
 800075c:	20000144 	.word	0x20000144

08000760 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  Sprite_SetPlayerMissileLaunchFlag();
 800076c:	f004 fb70 	bl	8004e50 <Sprite_SetPlayerMissileLaunchFlag>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]
	adc_value = MAP(HAL_ADC_GetValue(hadc), 0, 4095, 0, 112);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	0018      	movs	r0, r3
 8000784:	f001 f9fe 	bl	8001b84 <HAL_ADC_GetValue>
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x2c>)
 800078a:	2370      	movs	r3, #112	; 0x70
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f7ff ff7d 	bl	8000690 <MAP>
 8000796:	0002      	movs	r2, r0
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x30>)
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	00000fff 	.word	0x00000fff
 80007a8:	2000014c 	.word	0x2000014c

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char winText[]="YOU WIN";
 80007b2:	003b      	movs	r3, r7
 80007b4:	4a29      	ldr	r2, [pc, #164]	; (800085c <main+0xb0>)
 80007b6:	ca03      	ldmia	r2!, {r0, r1}
 80007b8:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 ff69 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f859 	bl	8000874 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 80007c2:	f000 fb87 	bl	8000ed4 <SystemCoreClockUpdate>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 f96b 	bl	8000aa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ca:	f000 f925 	bl	8000a18 <MX_I2C1_Init>
  MX_ADC_Init();
 80007ce:	f000 f8bd 	bl	800094c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80007d2:	f000 fc93 	bl	80010fc <ssd1306_Init>
  Sprite_Init();
 80007d6:	f003 fa87 	bl	8003ce8 <Sprite_Init>
  //cấu hình lấy mẫu ADC bằng ngắt
  HAL_ADC_Start_IT(&hadc);
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <main+0xb4>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f95f 	bl	8001aa0 <HAL_ADC_Start_IT>
  HAL_SYSTICK_Config(SystemCoreClock/6);// cấu hình lại tần số cho systick
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <main+0xb8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2106      	movs	r1, #6
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fc97 	bl	800011c <__udivsi3>
 80007ee:	0003      	movs	r3, r0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fc86 	bl	8002102 <HAL_SYSTICK_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	if (semaphore == 1) {
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <main+0xbc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d111      	bne.n	8000822 <main+0x76>
		//vẽ kẻ địch
		if (enemy_move == 1) {
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0xc0>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d104      	bne.n	8000810 <main+0x64>
			Sprite_Enemy_Draw();
 8000806:	f003 fd5d 	bl	80042c4 <Sprite_Enemy_Draw>
			enemy_move = 0;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <main+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		}
		//vẽ tàu người chơi
		Sprite_Missle_Draw();
 8000810:	f003 fdc0 	bl	8004394 <Sprite_Missle_Draw>
		Sprite_Player_Draw();
 8000814:	f003 faa6 	bl	8003d64 <Sprite_Player_Draw>
		//cập nhật màn hình
		ssd1306_UpdateScreen();
 8000818:	f000 fd00 	bl	800121c <ssd1306_UpdateScreen>
		//reset semaphore
		semaphore = 0;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <main+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
	}
	if(check_WIN_GAME()==1) break;//hết game thì thoát vòng lặp
 8000822:	f004 fb33 	bl	8004e8c <check_WIN_GAME>
 8000826:	0003      	movs	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d000      	beq.n	800082e <main+0x82>
	if (semaphore == 1) {
 800082c:	e7e3      	b.n	80007f6 <main+0x4a>
	if(check_WIN_GAME()==1) break;//hết game thì thoát vòng lặp
 800082e:	46c0      	nop			; (mov r8, r8)
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  ssd1306_Fill(Black);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fccf 	bl	80011d4 <ssd1306_Fill>
  ssd1306_SetCursor(24, 24);
 8000836:	2118      	movs	r1, #24
 8000838:	2018      	movs	r0, #24
 800083a:	f000 fe43 	bl	80014c4 <ssd1306_SetCursor>
  ssd1306_WriteString(winText, Font_11x18, White);
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <main+0xc4>)
 8000840:	0038      	movs	r0, r7
 8000842:	2301      	movs	r3, #1
 8000844:	6811      	ldr	r1, [r2, #0]
 8000846:	6852      	ldr	r2, [r2, #4]
 8000848:	f000 fe12 	bl	8001470 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800084c:	f000 fce6 	bl	800121c <ssd1306_UpdateScreen>
 8000850:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08006028 	.word	0x08006028
 8000860:	20000094 	.word	0x20000094
 8000864:	20000000 	.word	0x20000000
 8000868:	20000144 	.word	0x20000144
 800086c:	20000148 	.word	0x20000148
 8000870:	20000004 	.word	0x20000004

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b09d      	sub	sp, #116	; 0x74
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	2438      	movs	r4, #56	; 0x38
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2338      	movs	r3, #56	; 0x38
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f004 fb35 	bl	8004ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088a:	2324      	movs	r3, #36	; 0x24
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	0018      	movs	r0, r3
 8000890:	2314      	movs	r3, #20
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f004 fb2d 	bl	8004ef4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2324      	movs	r3, #36	; 0x24
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f004 fb26 	bl	8004ef4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <SystemClock_Config+0xd4>)
 80008ae:	401a      	ands	r2, r3
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemClock_Config+0xd0>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	0109      	lsls	r1, r1, #4
 80008b6:	430a      	orrs	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2203      	movs	r2, #3
 80008be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	22a0      	movs	r2, #160	; 0xa0
 80008c4:	02d2      	lsls	r2, r2, #11
 80008c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2201      	movs	r2, #1
 80008cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2210      	movs	r2, #16
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 fac3 	bl	8002e68 <HAL_RCC_OscConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008e6:	f000 f95d 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	2124      	movs	r1, #36	; 0x24
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	220f      	movs	r2, #15
 80008f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2202      	movs	r2, #2
 80008f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2100      	movs	r1, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fe6e 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000918:	f000 f944 	bl	8000ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800091c:	003b      	movs	r3, r7
 800091e:	2208      	movs	r2, #8
 8000920:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000922:	003b      	movs	r3, r7
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0152      	lsls	r2, r2, #5
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	003b      	movs	r3, r7
 800092c:	0018      	movs	r0, r3
 800092e:	f003 f84d 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000936:	f000 f935 	bl	8000ba4 <Error_Handler>
  }
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b01d      	add	sp, #116	; 0x74
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40007000 	.word	0x40007000
 8000948:	ffffe7ff 	.word	0xffffe7ff

0800094c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	2308      	movs	r3, #8
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f004 faca 	bl	8004ef4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000962:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <MX_ADC_Init+0xc4>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_ADC_Init+0xc0>)
 800096e:	2290      	movs	r2, #144	; 0x90
 8000970:	0392      	lsls	r2, r2, #14
 8000972:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_ADC_Init+0xc0>)
 800097c:	2207      	movs	r2, #7
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_ADC_Init+0xc0>)
 800098e:	2220      	movs	r2, #32
 8000990:	2101      	movs	r1, #1
 8000992:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_ADC_Init+0xc0>)
 8000996:	2221      	movs	r2, #33	; 0x21
 8000998:	2100      	movs	r1, #0
 800099a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_ADC_Init+0xc0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009a4:	22c2      	movs	r2, #194	; 0xc2
 80009a6:	32ff      	adds	r2, #255	; 0xff
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009ac:	222c      	movs	r2, #44	; 0x2c
 80009ae:	2100      	movs	r1, #0
 80009b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fef0 	bl	80017b8 <HAL_ADC_Init>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80009dc:	f000 f8e2 	bl	8000ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009e0:	003b      	movs	r3, r7
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <MX_ADC_Init+0xc8>)
 80009e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009e6:	003b      	movs	r3, r7
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0152      	lsls	r2, r2, #5
 80009ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ee:	003a      	movs	r2, r7
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_ADC_Init+0xc0>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 f98b 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80009fe:	f000 f8d1 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	40012400 	.word	0x40012400
 8000a14:	38004000 	.word	0x38004000

08000a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <MX_I2C1_Init+0x84>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fcfb 	bl	8002450 <HAL_I2C_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 f8a1 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 f94e 	bl	8002d08 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 f898 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_I2C1_Init+0x80>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 f991 	bl	8002da0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 f88f 	bl	8000ba4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	015b      	lsls	r3, r3, #5
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 f9d4 	bl	8002e38 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200000f0 	.word	0x200000f0
 8000a9c:	40005400 	.word	0x40005400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	2414      	movs	r4, #20
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2314      	movs	r3, #20
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f004 fa1f 	bl	8004ef4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000abc:	2104      	movs	r1, #4
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b04:	2102      	movs	r1, #2
 8000b06:	430a      	orrs	r2, r1
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_GPIO_Init+0xfc>)
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	2202      	movs	r2, #2
 8000b10:	4013      	ands	r3, r2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	0192      	lsls	r2, r2, #6
 8000b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2284      	movs	r2, #132	; 0x84
 8000b22:	0392      	lsls	r2, r2, #14
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x100>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f001 fafa 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2202      	movs	r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2204      	movs	r2, #4
 8000b54:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000b56:	193a      	adds	r2, r7, r4
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fae4 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_frie_Pin */
  GPIO_InitStruct.Pin = button_frie_Pin;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2208      	movs	r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2201      	movs	r2, #1
 8000b74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_frie_GPIO_Port, &GPIO_InitStruct);
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fad4 	bl	800212c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f001 fa95 	bl	80020b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f001 faa7 	bl	80020e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	; 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	50000800 	.word	0x50000800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_MspInit+0x24>)
 8000bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x24>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_MspInit+0x24>)
 8000bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_MspInit+0x24>)
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	0549      	lsls	r1, r1, #21
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	240c      	movs	r4, #12
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f004 f982 	bl	8004ef4 <memset>
  if(hadc->Instance==ADC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d129      	bne.n	8000c4e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0089      	lsls	r1, r1, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000c0e:	2104      	movs	r1, #4
 8000c10:	430a      	orrs	r2, r1
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2210      	movs	r2, #16
 8000c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2203      	movs	r2, #3
 8000c2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_ADC_MspInit+0x88>)
 8000c36:	0019      	movs	r1, r3
 8000c38:	0010      	movs	r0, r2
 8000c3a:	f001 fa77 	bl	800212c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2101      	movs	r1, #1
 8000c42:	200c      	movs	r0, #12
 8000c44:	f001 fa38 	bl	80020b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f001 fa4a 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b009      	add	sp, #36	; 0x24
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40012400 	.word	0x40012400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	50000800 	.word	0x50000800

08000c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	240c      	movs	r4, #12
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 f93c 	bl	8004ef4 <memset>
  if(hi2c->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_I2C_MspInit+0x7c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d128      	bne.n	8000cd8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2202      	movs	r2, #2
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	22c0      	movs	r2, #192	; 0xc0
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2212      	movs	r2, #18
 8000caa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	0010      	movs	r0, r2
 8000cc6:	f001 fa31 	bl	800212c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	0389      	lsls	r1, r1, #14
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b009      	add	sp, #36	; 0x24
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	50000400 	.word	0x50000400

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 fd12 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000d14:	f001 fa02 	bl	800211c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fb76 	bl	8002418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <ADC1_COMP_IRQHandler+0x14>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 ff2e 	bl	8001b9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000094 	.word	0x20000094

08000d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_kill>:

int _kill(int pid, int sig)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d62:	f004 f89d 	bl	8004ea0 <__errno>
 8000d66:	0003      	movs	r3, r0
 8000d68:	2216      	movs	r2, #22
 8000d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_exit>:

void _exit (int status)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d80:	2301      	movs	r3, #1
 8000d82:	425a      	negs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffe5 	bl	8000d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d8e:	e7fe      	b.n	8000d8e <_exit+0x16>

08000d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da2:	e000      	b.n	8000da6 <_read+0x16>
 8000da4:	bf00      	nop
 8000da6:	0001      	movs	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
  }

  return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	0018      	movs	r0, r3
 8000de6:	e000      	b.n	8000dea <_write+0x20>
 8000de8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf1      	blt.n	8000ddc <_write+0x12>
  }
  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b006      	add	sp, #24
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:

int _close(int file)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	425b      	negs	r3, r3
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	0192      	lsls	r2, r2, #6
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_isatty>:

int _isatty(int file)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f004 f808 	bl	8004ea0 <__errno>
 8000e90:	0003      	movs	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	18d2      	adds	r2, r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20002000 	.word	0x20002000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000154 	.word	0x20000154
 8000ec4:	20000810 	.word	0x20000810

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]

  switch (tmp)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d024      	beq.n	8000f48 <SystemCoreClockUpdate+0x74>
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d825      	bhi.n	8000f50 <SystemCoreClockUpdate+0x7c>
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <SystemCoreClockUpdate+0x3e>
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d00e      	beq.n	8000f2e <SystemCoreClockUpdate+0x5a>
 8000f10:	e01e      	b.n	8000f50 <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0b5b      	lsrs	r3, r3, #13
 8000f18:	2207      	movs	r2, #7
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3301      	adds	r3, #1
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0212      	lsls	r2, r2, #8
 8000f26:	409a      	lsls	r2, r3
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000f2a:	601a      	str	r2, [r3, #0]
      break;
 8000f2c:	e063      	b.n	8000ff6 <SystemCoreClockUpdate+0x122>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2210      	movs	r2, #16
 8000f34:	4013      	ands	r3, r2
 8000f36:	d003      	beq.n	8000f40 <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8000f38:	4b39      	ldr	r3, [pc, #228]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <SystemCoreClockUpdate+0x150>)
 8000f3c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 8000f3e:	e05a      	b.n	8000ff6 <SystemCoreClockUpdate+0x122>
        SystemCoreClock = HSI_VALUE;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000f42:	4a39      	ldr	r2, [pc, #228]	; (8001028 <SystemCoreClockUpdate+0x154>)
 8000f44:	601a      	str	r2, [r3, #0]
      break;
 8000f46:	e056      	b.n	8000ff6 <SystemCoreClockUpdate+0x122>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000f4a:	4a38      	ldr	r2, [pc, #224]	; (800102c <SystemCoreClockUpdate+0x158>)
 8000f4c:	601a      	str	r2, [r3, #0]
      break;
 8000f4e:	e052      	b.n	8000ff6 <SystemCoreClockUpdate+0x122>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	23f0      	movs	r3, #240	; 0xf0
 8000f56:	039b      	lsls	r3, r3, #14
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	4a30      	ldr	r2, [pc, #192]	; (8001030 <SystemCoreClockUpdate+0x15c>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	0d9b      	lsrs	r3, r3, #22
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4013      	ands	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d128      	bne.n	8000fde <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2210      	movs	r2, #16
 8000f92:	4013      	ands	r3, r2
 8000f94:	d011      	beq.n	8000fba <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 8000f96:	6939      	ldr	r1, [r7, #16]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	0152      	lsls	r2, r2, #5
 8000f9c:	1a52      	subs	r2, r2, r1
 8000f9e:	0193      	lsls	r3, r2, #6
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	185b      	adds	r3, r3, r1
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	0018      	movs	r0, r3
 8000fac:	f7ff f8b6 	bl	800011c <__udivsi3>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000fb6:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000fb8:	e01c      	b.n	8000ff4 <SystemCoreClockUpdate+0x120>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	0152      	lsls	r2, r2, #5
 8000fc0:	1a52      	subs	r2, r2, r1
 8000fc2:	0193      	lsls	r3, r2, #6
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	185b      	adds	r3, r3, r1
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff f8a4 	bl	800011c <__udivsi3>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000fda:	601a      	str	r2, [r3, #0]
      break;
 8000fdc:	e00a      	b.n	8000ff4 <SystemCoreClockUpdate+0x120>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <SystemCoreClockUpdate+0x158>)
 8000fe2:	4353      	muls	r3, r2
 8000fe4:	68f9      	ldr	r1, [r7, #12]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff f898 	bl	800011c <__udivsi3>
 8000fec:	0003      	movs	r3, r0
 8000fee:	001a      	movs	r2, r3
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8000ff2:	601a      	str	r2, [r3, #0]
      break;
 8000ff4:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <SystemCoreClockUpdate+0x148>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	4013      	ands	r3, r2
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <SystemCoreClockUpdate+0x160>)
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	40da      	lsrs	r2, r3
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemCoreClockUpdate+0x14c>)
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b006      	add	sp, #24
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40021000 	.word	0x40021000
 8001020:	20000000 	.word	0x20000000
 8001024:	003d0900 	.word	0x003d0900
 8001028:	00f42400 	.word	0x00f42400
 800102c:	002dc6c0 	.word	0x002dc6c0
 8001030:	08006040 	.word	0x08006040
 8001034:	08006030 	.word	0x08006030

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff ff44 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 ff21 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fb9f 	bl	80007ac <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800107c:	08006f48 	.word	0x08006f48
  ldr r2, =_sbss
 8001080:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001084:	2000080c 	.word	0x2000080c

08001088 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <DMA1_Channel1_IRQHandler>

0800108a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
 800109a:	0002      	movs	r2, r0
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <ssd1306_WriteCommand+0x30>)
 80010a2:	2301      	movs	r3, #1
 80010a4:	425b      	negs	r3, r3
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	2178      	movs	r1, #120	; 0x78
 80010b6:	f001 fa61 	bl	800257c <HAL_I2C_Mem_Write>
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200000f0 	.word	0x200000f0

080010c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <ssd1306_WriteData+0x30>)
 80010d8:	2201      	movs	r2, #1
 80010da:	4252      	negs	r2, r2
 80010dc:	9202      	str	r2, [sp, #8]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	2178      	movs	r1, #120	; 0x78
 80010ea:	f001 fa47 	bl	800257c <HAL_I2C_Mem_Write>
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	200000f0 	.word	0x200000f0

080010fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001100:	f7ff ffc3 	bl	800108a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f000 fb33 	bl	8001770 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800110a:	2000      	movs	r0, #0
 800110c:	f000 fa9a 	bl	8001644 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001110:	2020      	movs	r0, #32
 8001112:	f7ff ffbf 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ffbc 	bl	8001094 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800111c:	20b0      	movs	r0, #176	; 0xb0
 800111e:	f7ff ffb9 	bl	8001094 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001122:	20c8      	movs	r0, #200	; 0xc8
 8001124:	f7ff ffb6 	bl	8001094 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff ffb3 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800112e:	2010      	movs	r0, #16
 8001130:	f7ff ffb0 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001134:	2040      	movs	r0, #64	; 0x40
 8001136:	f7ff ffad 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800113a:	20ff      	movs	r0, #255	; 0xff
 800113c:	f000 fa6a 	bl	8001614 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001140:	20a1      	movs	r0, #161	; 0xa1
 8001142:	f7ff ffa7 	bl	8001094 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001146:	20a6      	movs	r0, #166	; 0xa6
 8001148:	f7ff ffa4 	bl	8001094 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800114c:	20a8      	movs	r0, #168	; 0xa8
 800114e:	f7ff ffa1 	bl	8001094 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001152:	203f      	movs	r0, #63	; 0x3f
 8001154:	f7ff ff9e 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001158:	20a4      	movs	r0, #164	; 0xa4
 800115a:	f7ff ff9b 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800115e:	20d3      	movs	r0, #211	; 0xd3
 8001160:	f7ff ff98 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff95 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800116a:	20d5      	movs	r0, #213	; 0xd5
 800116c:	f7ff ff92 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001170:	20f0      	movs	r0, #240	; 0xf0
 8001172:	f7ff ff8f 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001176:	20d9      	movs	r0, #217	; 0xd9
 8001178:	f7ff ff8c 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800117c:	2022      	movs	r0, #34	; 0x22
 800117e:	f7ff ff89 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001182:	20da      	movs	r0, #218	; 0xda
 8001184:	f7ff ff86 	bl	8001094 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001188:	2012      	movs	r0, #18
 800118a:	f7ff ff83 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800118e:	20db      	movs	r0, #219	; 0xdb
 8001190:	f7ff ff80 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001194:	2020      	movs	r0, #32
 8001196:	f7ff ff7d 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800119a:	208d      	movs	r0, #141	; 0x8d
 800119c:	f7ff ff7a 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011a0:	2014      	movs	r0, #20
 80011a2:	f7ff ff77 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fa4c 	bl	8001644 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f811 	bl	80011d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011b2:	f000 f833 	bl	800121c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <ssd1306_Init+0xd4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <ssd1306_Init+0xd4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <ssd1306_Init+0xd4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	711a      	strb	r2, [r3, #4]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000558 	.word	0x20000558

080011d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	0002      	movs	r2, r0
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e00e      	b.n	8001204 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <ssd1306_Fill+0x1e>
 80011ee:	2100      	movs	r1, #0
 80011f0:	e000      	b.n	80011f4 <ssd1306_Fill+0x20>
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <ssd1306_Fill+0x44>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	18d3      	adds	r3, r2, r3
 80011fa:	1c0a      	adds	r2, r1, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	429a      	cmp	r2, r3
 800120c:	d3eb      	bcc.n	80011e6 <ssd1306_Fill+0x12>
    }
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000158 	.word	0x20000158

0800121c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e01a      	b.n	8001260 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3b50      	subs	r3, #80	; 0x50
 8001230:	b2db      	uxtb	r3, r3
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff ff2e 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff2b 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800123e:	2010      	movs	r0, #16
 8001240:	f7ff ff28 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	01da      	lsls	r2, r3, #7
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <ssd1306_UpdateScreen+0x58>)
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff39 	bl	80010c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	3201      	adds	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d9e0      	bls.n	800122a <ssd1306_UpdateScreen+0xe>
    }
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000158 	.word	0x20000158

08001278 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	0004      	movs	r4, r0
 8001280:	0008      	movs	r0, r1
 8001282:	0011      	movs	r1, r2
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	1c22      	adds	r2, r4, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	1c02      	adds	r2, r0, #0
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	1d7b      	adds	r3, r7, #5
 8001292:	1c0a      	adds	r2, r1, #0
 8001294:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	db47      	blt.n	8001330 <ssd1306_DrawPixel+0xb8>
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b3f      	cmp	r3, #63	; 0x3f
 80012a6:	d843      	bhi.n	8001330 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012a8:	1d7b      	adds	r3, r7, #5
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11e      	bne.n	80012ee <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	b2d8      	uxtb	r0, r3
 80012bc:	0003      	movs	r3, r0
 80012be:	01db      	lsls	r3, r3, #7
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <ssd1306_DrawPixel+0xc0>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	1dbb      	adds	r3, r7, #6
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2107      	movs	r1, #7
 80012ce:	400b      	ands	r3, r1
 80012d0:	2101      	movs	r1, #1
 80012d2:	4099      	lsls	r1, r3
 80012d4:	000b      	movs	r3, r1
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b259      	sxtb	r1, r3
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	0003      	movs	r3, r0
 80012e2:	01db      	lsls	r3, r3, #7
 80012e4:	18d3      	adds	r3, r2, r3
 80012e6:	b2c9      	uxtb	r1, r1
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <ssd1306_DrawPixel+0xc0>)
 80012ea:	54d1      	strb	r1, [r2, r3]
 80012ec:	e021      	b.n	8001332 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	1dbb      	adds	r3, r7, #6
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	b2d8      	uxtb	r0, r3
 80012fa:	0003      	movs	r3, r0
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	18d3      	adds	r3, r2, r3
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <ssd1306_DrawPixel+0xc0>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	1dba      	adds	r2, r7, #6
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	2107      	movs	r1, #7
 800130c:	400a      	ands	r2, r1
 800130e:	2101      	movs	r1, #1
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	b252      	sxtb	r2, r2
 8001316:	43d2      	mvns	r2, r2
 8001318:	b252      	sxtb	r2, r2
 800131a:	4013      	ands	r3, r2
 800131c:	b259      	sxtb	r1, r3
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	0003      	movs	r3, r0
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	4a03      	ldr	r2, [pc, #12]	; (8001338 <ssd1306_DrawPixel+0xc0>)
 800132c:	54d1      	strb	r1, [r2, r3]
 800132e:	e000      	b.n	8001332 <ssd1306_DrawPixel+0xba>
        return;
 8001330:	46c0      	nop			; (mov r8, r8)
    }
}
 8001332:	46bd      	mov	sp, r7
 8001334:	b003      	add	sp, #12
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	20000158 	.word	0x20000158

0800133c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	0004      	movs	r4, r0
 8001344:	1d38      	adds	r0, r7, #4
 8001346:	6001      	str	r1, [r0, #0]
 8001348:	6042      	str	r2, [r0, #4]
 800134a:	0019      	movs	r1, r3
 800134c:	200f      	movs	r0, #15
 800134e:	183b      	adds	r3, r7, r0
 8001350:	1c22      	adds	r2, r4, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	230e      	movs	r3, #14
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	1c0a      	adds	r2, r1, #0
 800135a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800135c:	183b      	adds	r3, r7, r0
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b1f      	cmp	r3, #31
 8001362:	d903      	bls.n	800136c <ssd1306_WriteChar+0x30>
 8001364:	183b      	adds	r3, r7, r0
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b7e      	cmp	r3, #126	; 0x7e
 800136a:	d901      	bls.n	8001370 <ssd1306_WriteChar+0x34>
        return 0;
 800136c:	2300      	movs	r3, #0
 800136e:	e078      	b.n	8001462 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001370:	4b3e      	ldr	r3, [pc, #248]	; (800146c <ssd1306_WriteChar+0x130>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	2b80      	cmp	r3, #128	; 0x80
 800137e:	dc07      	bgt.n	8001390 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <ssd1306_WriteChar+0x130>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	001a      	movs	r2, r3
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800138c:	2b40      	cmp	r3, #64	; 0x40
 800138e:	dd01      	ble.n	8001394 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e066      	b.n	8001462 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e051      	b.n	800143e <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3b20      	subs	r3, #32
 80013a6:	1d39      	adds	r1, r7, #4
 80013a8:	7849      	ldrb	r1, [r1, #1]
 80013aa:	434b      	muls	r3, r1
 80013ac:	0019      	movs	r1, r3
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	18cb      	adds	r3, r1, r3
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e035      	b.n	800142c <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	409a      	lsls	r2, r3
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	4013      	ands	r3, r2
 80013cc:	d014      	beq.n	80013f8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <ssd1306_WriteChar+0x130>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	b2d8      	uxtb	r0, r3
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <ssd1306_WriteChar+0x130>)
 80013de:	885b      	ldrh	r3, [r3, #2]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	b2d9      	uxtb	r1, r3
 80013ea:	230e      	movs	r3, #14
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	f7ff ff41 	bl	8001278 <ssd1306_DrawPixel>
 80013f6:	e016      	b.n	8001426 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <ssd1306_WriteChar+0x130>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	18d3      	adds	r3, r2, r3
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <ssd1306_WriteChar+0x130>)
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	230e      	movs	r3, #14
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	425a      	negs	r2, r3
 800141c:	4153      	adcs	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	001a      	movs	r2, r3
 8001422:	f7ff ff29 	bl	8001278 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	3301      	adds	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4293      	cmp	r3, r2
 8001436:	d3c3      	bcc.n	80013c0 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	001a      	movs	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3a7      	bcc.n	800139a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <ssd1306_WriteChar+0x130>)
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <ssd1306_WriteChar+0x130>)
 800145a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b009      	add	sp, #36	; 0x24
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20000558 	.word	0x20000558

08001470 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	1d38      	adds	r0, r7, #4
 800147a:	6001      	str	r1, [r0, #0]
 800147c:	6042      	str	r2, [r0, #4]
 800147e:	001a      	movs	r2, r3
 8001480:	1cfb      	adds	r3, r7, #3
 8001482:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001484:	e014      	b.n	80014b0 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	7818      	ldrb	r0, [r3, #0]
 800148a:	1cfb      	adds	r3, r7, #3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	1d3a      	adds	r2, r7, #4
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	6852      	ldr	r2, [r2, #4]
 8001494:	f7ff ff52 	bl	800133c <ssd1306_WriteChar>
 8001498:	0003      	movs	r3, r0
 800149a:	001a      	movs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d002      	beq.n	80014aa <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	e008      	b.n	80014bc <ssd1306_WriteString+0x4c>
        }
        str++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e6      	bne.n	8001486 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	1c0a      	adds	r2, r1, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <ssd1306_SetCursor+0x30>)
 80014de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014e0:	1dbb      	adds	r3, r7, #6
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <ssd1306_SetCursor+0x30>)
 80014e8:	805a      	strh	r2, [r3, #2]
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000558 	.word	0x20000558

080014f8 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	0004      	movs	r4, r0
 8001500:	0008      	movs	r0, r1
 8001502:	603a      	str	r2, [r7, #0]
 8001504:	0019      	movs	r1, r3
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	1c22      	adds	r2, r4, #0
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	1dbb      	adds	r3, r7, #6
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	1d7b      	adds	r3, r7, #5
 8001514:	1c0a      	adds	r2, r1, #0
 8001516:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001518:	1d7b      	adds	r3, r7, #5
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3307      	adds	r3, #7
 800151e:	2b00      	cmp	r3, #0
 8001520:	da00      	bge.n	8001524 <ssd1306_DrawBitmap+0x2c>
 8001522:	3307      	adds	r3, #7
 8001524:	10db      	asrs	r3, r3, #3
 8001526:	001a      	movs	r2, r3
 8001528:	230a      	movs	r3, #10
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	db65      	blt.n	800160c <ssd1306_DrawBitmap+0x114>
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b3f      	cmp	r3, #63	; 0x3f
 8001546:	d861      	bhi.n	800160c <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001548:	230e      	movs	r3, #14
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e053      	b.n	80015fa <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 8001552:	230d      	movs	r3, #13
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e03c      	b.n	80015d6 <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 800155c:	230d      	movs	r3, #13
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2207      	movs	r2, #7
 8001564:	4013      	ands	r3, r2
 8001566:	d006      	beq.n	8001576 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8001568:	230f      	movs	r3, #15
 800156a:	18fa      	adds	r2, r7, r3
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	18db      	adds	r3, r3, r3
 8001572:	7013      	strb	r3, [r2, #0]
 8001574:	e014      	b.n	80015a0 <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001576:	230e      	movs	r3, #14
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	220a      	movs	r2, #10
 800157e:	18ba      	adds	r2, r7, r2
 8001580:	2100      	movs	r1, #0
 8001582:	5e52      	ldrsh	r2, [r2, r1]
 8001584:	4353      	muls	r3, r2
 8001586:	220d      	movs	r2, #13
 8001588:	18ba      	adds	r2, r7, r2
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	08d2      	lsrs	r2, r2, #3
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	189b      	adds	r3, r3, r2
 8001592:	001a      	movs	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	189a      	adds	r2, r3, r2
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da0e      	bge.n	80015ca <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 80015ac:	1dfa      	adds	r2, r7, #7
 80015ae:	230d      	movs	r3, #13
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	18d3      	adds	r3, r2, r3
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	2324      	movs	r3, #36	; 0x24
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	0019      	movs	r1, r3
 80015c6:	f7ff fe57 	bl	8001278 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80015ca:	210d      	movs	r1, #13
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	3201      	adds	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	230d      	movs	r3, #13
 80015d8:	18fa      	adds	r2, r7, r3
 80015da:	1d7b      	adds	r3, r7, #5
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3bb      	bcc.n	800155c <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 80015e4:	210e      	movs	r1, #14
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	3201      	adds	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	3201      	adds	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	230e      	movs	r3, #14
 80015fc:	18fa      	adds	r2, r7, r3
 80015fe:	2320      	movs	r3, #32
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3a3      	bcc.n	8001552 <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 800160a:	e000      	b.n	800160e <ssd1306_DrawBitmap+0x116>
        return;
 800160c:	46c0      	nop			; (mov r8, r8)
}
 800160e:	46bd      	mov	sp, r7
 8001610:	b005      	add	sp, #20
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	0002      	movs	r2, r0
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001620:	210f      	movs	r1, #15
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2281      	movs	r2, #129	; 0x81
 8001626:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001628:	187b      	adds	r3, r7, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fd31 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff fd2c 	bl	8001094 <ssd1306_WriteCommand>
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}

08001644 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	0002      	movs	r2, r0
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001658:	230f      	movs	r3, #15
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	22af      	movs	r2, #175	; 0xaf
 800165e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <ssd1306_SetDisplayOn+0x48>)
 8001662:	2201      	movs	r2, #1
 8001664:	715a      	strb	r2, [r3, #5]
 8001666:	e006      	b.n	8001676 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001668:	230f      	movs	r3, #15
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	22ae      	movs	r2, #174	; 0xae
 800166e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <ssd1306_SetDisplayOn+0x48>)
 8001672:	2200      	movs	r2, #0
 8001674:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001676:	230f      	movs	r3, #15
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fd09 	bl	8001094 <ssd1306_WriteCommand>
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	20000558 	.word	0x20000558

08001690 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_Init+0x3c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Init+0x3c>)
 80016a2:	2140      	movs	r1, #64	; 0x40
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 f811 	bl	80016d0 <HAL_InitTick>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d003      	beq.n	80016ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e001      	b.n	80016be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ba:	f7ff fa79 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_InitTick+0x5c>)
 80016da:	681c      	ldr	r4, [r3, #0]
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	0019      	movs	r1, r3
 80016e2:	23fa      	movs	r3, #250	; 0xfa
 80016e4:	0098      	lsls	r0, r3, #2
 80016e6:	f7fe fd19 	bl	800011c <__udivsi3>
 80016ea:	0003      	movs	r3, r0
 80016ec:	0019      	movs	r1, r3
 80016ee:	0020      	movs	r0, r4
 80016f0:	f7fe fd14 	bl	800011c <__udivsi3>
 80016f4:	0003      	movs	r3, r0
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fd03 	bl	8002102 <HAL_SYSTICK_Config>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e00f      	b.n	8001724 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d80b      	bhi.n	8001722 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	2301      	movs	r3, #1
 800170e:	425b      	negs	r3, r3
 8001710:	2200      	movs	r2, #0
 8001712:	0018      	movs	r0, r3
 8001714:	f000 fcd0 	bl	80020b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_InitTick+0x64>)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b003      	add	sp, #12
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	20000010 	.word	0x20000010
 8001734:	2000000c 	.word	0x2000000c

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	18d2      	adds	r2, r2, r3
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	20000010 	.word	0x20000010
 8001758:	20000560 	.word	0x20000560

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	20000560 	.word	0x20000560

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001a      	movs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	189b      	adds	r3, r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b004      	add	sp, #16
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000010 	.word	0x20000010

080017b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e159      	b.n	8001a7e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2250      	movs	r2, #80	; 0x50
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff f9f8 	bl	8000bd8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	2210      	movs	r2, #16
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d005      	beq.n	8001800 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2204      	movs	r2, #4
 80017fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80017fe:	d00b      	beq.n	8001818 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	2210      	movs	r2, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2250      	movs	r2, #80	; 0x50
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e132      	b.n	8001a7e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	4a9a      	ldr	r2, [pc, #616]	; (8001a88 <HAL_ADC_Init+0x2d0>)
 800181e:	4013      	ands	r3, r2
 8001820:	2202      	movs	r2, #2
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2203      	movs	r2, #3
 8001830:	4013      	ands	r3, r2
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_ADC_Init+0x90>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Init+0x90>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_ADC_Init+0x92>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d149      	bne.n	80018e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	429a      	cmp	r2, r3
 8001858:	d00b      	beq.n	8001872 <HAL_ADC_Init+0xba>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	429a      	cmp	r2, r3
 8001864:	d005      	beq.n	8001872 <HAL_ADC_Init+0xba>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	429a      	cmp	r2, r3
 8001870:	d111      	bne.n	8001896 <HAL_ADC_Init+0xde>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	0892      	lsrs	r2, r2, #2
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6919      	ldr	r1, [r3, #16]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	e014      	b.n	80018c0 <HAL_ADC_Init+0x108>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	0892      	lsrs	r2, r2, #2
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018ac:	4978      	ldr	r1, [pc, #480]	; (8001a90 <HAL_ADC_Init+0x2d8>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2118      	movs	r1, #24
 80018cc:	438a      	bics	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80018e2:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018e8:	496a      	ldr	r1, [pc, #424]	; (8001a94 <HAL_ADC_Init+0x2dc>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	065a      	lsls	r2, r3, #25
 80018f8:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_ADC_Init+0x2d4>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	d108      	bne.n	800191e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0549      	lsls	r1, r1, #21
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	495b      	ldr	r1, [pc, #364]	; (8001a98 <HAL_ADC_Init+0x2e0>)
 800192a:	400a      	ands	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68d9      	ldr	r1, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d101      	bne.n	8001944 <HAL_ADC_Init+0x18c>
 8001940:	2304      	movs	r3, #4
 8001942:	e000      	b.n	8001946 <HAL_ADC_Init+0x18e>
 8001944:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001946:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2020      	movs	r0, #32
 800194c:	5c1b      	ldrb	r3, [r3, r0]
 800194e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001950:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	202c      	movs	r0, #44	; 0x2c
 8001956:	5c1b      	ldrb	r3, [r3, r0]
 8001958:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800195a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001960:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001968:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001970:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	23c2      	movs	r3, #194	; 0xc2
 8001980:	33ff      	adds	r3, #255	; 0xff
 8001982:	429a      	cmp	r2, r3
 8001984:	d00b      	beq.n	800199e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68d9      	ldr	r1, [r3, #12]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2221      	movs	r2, #33	; 0x21
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11a      	bne.n	80019de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2220      	movs	r2, #32
 80019ac:	5c9b      	ldrb	r3, [r3, r2]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0249      	lsls	r1, r1, #9
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	e00b      	b.n	80019de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	2220      	movs	r2, #32
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	2201      	movs	r2, #1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d11f      	bne.n	8001a26 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	492a      	ldr	r1, [pc, #168]	; (8001a9c <HAL_ADC_Init+0x2e4>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a04:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001a0a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	430a      	orrs	r2, r1
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	e00e      	b.n	8001a44 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2107      	movs	r1, #7
 8001a50:	438a      	bics	r2, r1
 8001a52:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	2203      	movs	r2, #3
 8001a72:	4393      	bics	r3, r2
 8001a74:	2201      	movs	r2, #1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	fffffefd 	.word	0xfffffefd
 8001a8c:	40012708 	.word	0x40012708
 8001a90:	ffc3ffff 	.word	0xffc3ffff
 8001a94:	fdffffff 	.word	0xfdffffff
 8001a98:	fffe0219 	.word	0xfffe0219
 8001a9c:	fffffc03 	.word	0xfffffc03

08001aa0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d156      	bne.n	8001b6a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2250      	movs	r2, #80	; 0x50
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Start_IT+0x2a>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e056      	b.n	8001b78 <HAL_ADC_Start_IT+0xd8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2250      	movs	r2, #80	; 0x50
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d007      	beq.n	8001aea <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ada:	230f      	movs	r3, #15
 8001adc:	18fc      	adds	r4, r7, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 f9b5 	bl	8001e50 <ADC_Enable>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d13e      	bne.n	8001b72 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_ADC_Start_IT+0xe0>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	0052      	lsls	r2, r2, #1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2250      	movs	r2, #80	; 0x50
 8001b10:	2100      	movs	r1, #0
 8001b12:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	221c      	movs	r2, #28
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d110      	bne.n	8001b46 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2104      	movs	r1, #4
 8001b30:	438a      	bics	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2118      	movs	r1, #24
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
          break;
 8001b44:	e008      	b.n	8001b58 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	211c      	movs	r1, #28
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
          break;
 8001b56:	46c0      	nop			; (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2104      	movs	r1, #4
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e003      	b.n	8001b72 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b005      	add	sp, #20
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	fffff0fe 	.word	0xfffff0fe

08001b84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x28>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d107      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001bca:	d04e      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d04a      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d126      	bne.n	8001c52 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2208      	movs	r2, #8
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2204      	movs	r2, #4
 8001c14:	4013      	ands	r3, r2
 8001c16:	d110      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	210c      	movs	r1, #12
 8001c24:	438a      	bics	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <HAL_ADC_IRQHandler+0x150>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2201      	movs	r2, #1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
 8001c38:	e00b      	b.n	8001c52 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	2220      	movs	r2, #32
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe fd8f 	bl	8000778 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d012      	beq.n	8001c98 <HAL_ADC_IRQHandler+0xfc>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	4013      	ands	r3, r2
 8001c78:	d00e      	beq.n	8001c98 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0252      	lsls	r2, r2, #9
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f830 	bl	8001cf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d020      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0x146>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d01c      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10d      	bne.n	8001cda <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f813 	bl	8001d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2210      	movs	r2, #16
 8001ce0:	601a      	str	r2, [r3, #0]
  }

}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	fffffefe 	.word	0xfffffefe

08001cf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2250      	movs	r2, #80	; 0x50
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x18>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e085      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x124>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2250      	movs	r2, #80	; 0x50
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d00b      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	2220      	movs	r2, #32
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2250      	movs	r2, #80	; 0x50
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e06f      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_ADC_ConfigChannel+0x12c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d035      	beq.n	8001dca <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	035b      	lsls	r3, r3, #13
 8001d6a:	0b5a      	lsrs	r2, r3, #13
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	02db      	lsls	r3, r3, #11
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	0409      	lsls	r1, r1, #16
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f000 f8c6 	bl	8001f20 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d006      	beq.n	8001dae <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	03c9      	lsls	r1, r1, #15
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	4013      	ands	r3, r2
 8001db8:	d037      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0449      	lsls	r1, r1, #17
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e02f      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	035b      	lsls	r3, r3, #13
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	43d9      	mvns	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	400a      	ands	r2, r1
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	4013      	ands	r3, r2
 8001dec:	d005      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001df4:	4913      	ldr	r1, [pc, #76]	; (8001e44 <HAL_ADC_ConfigChannel+0x134>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	d005      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_ADC_ConfigChannel+0x138>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	025b      	lsls	r3, r3, #9
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d005      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_ADC_ConfigChannel+0x130>)
 8001e24:	4909      	ldr	r1, [pc, #36]	; (8001e4c <HAL_ADC_ConfigChannel+0x13c>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2250      	movs	r2, #80	; 0x50
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	00001001 	.word	0x00001001
 8001e40:	40012708 	.word	0x40012708
 8001e44:	ff7fffff 	.word	0xff7fffff
 8001e48:	ffbfffff 	.word	0xffbfffff
 8001e4c:	feffffff 	.word	0xfeffffff

08001e50 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2203      	movs	r2, #3
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d108      	bne.n	8001e7c <ADC_Enable+0x2c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <ADC_Enable+0x2c>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <ADC_Enable+0x2e>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d146      	bne.n	8001f10 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <ADC_Enable+0xcc>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	2210      	movs	r2, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e033      	b.n	8001f12 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 f830 	bl	8001f20 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff fc4c 	bl	800175c <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ec8:	e01b      	b.n	8001f02 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eca:	f7ff fc47 	bl	800175c <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b0a      	cmp	r3, #10
 8001ed6:	d914      	bls.n	8001f02 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d00d      	beq.n	8001f02 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2210      	movs	r2, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1dc      	bne.n	8001eca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	80000017 	.word	0x80000017

08001f20 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <ADC_DelayMicroSecond+0x38>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	490b      	ldr	r1, [pc, #44]	; (8001f5c <ADC_DelayMicroSecond+0x3c>)
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe f8f4 	bl	800011c <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	001a      	movs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4353      	muls	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001f3e:	e002      	b.n	8001f46 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <ADC_DelayMicroSecond+0x20>
  }
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	000f4240 	.word	0x000f4240

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b7f      	cmp	r3, #127	; 0x7f
 8001f72:	d809      	bhi.n	8001f88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_EnableIRQ+0x30>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	4091      	lsls	r1, r2
 8001f84:	000a      	movs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
  }
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa8:	d828      	bhi.n	8001ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <__NVIC_SetPriority+0xd4>)
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	33c0      	adds	r3, #192	; 0xc0
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	589b      	ldr	r3, [r3, r2]
 8001fba:	1dfa      	adds	r2, r7, #7
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	21ff      	movs	r1, #255	; 0xff
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	43d2      	mvns	r2, r2
 8001fce:	401a      	ands	r2, r3
 8001fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	401a      	ands	r2, r3
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	481f      	ldr	r0, [pc, #124]	; (8002068 <__NVIC_SetPriority+0xd4>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	33c0      	adds	r3, #192	; 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ffa:	e031      	b.n	8002060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <__NVIC_SetPriority+0xd8>)
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0019      	movs	r1, r3
 8002004:	230f      	movs	r3, #15
 8002006:	400b      	ands	r3, r1
 8002008:	3b08      	subs	r3, #8
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3306      	adds	r3, #6
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	3304      	adds	r3, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1dfa      	adds	r2, r7, #7
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	0011      	movs	r1, r2
 800201c:	2203      	movs	r2, #3
 800201e:	400a      	ands	r2, r1
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	21ff      	movs	r1, #255	; 0xff
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	43d2      	mvns	r2, r2
 800202a:	401a      	ands	r2, r3
 800202c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	401a      	ands	r2, r3
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	2303      	movs	r3, #3
 800203e:	4003      	ands	r3, r0
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <__NVIC_SetPriority+0xd8>)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	001c      	movs	r4, r3
 800204c:	230f      	movs	r3, #15
 800204e:	4023      	ands	r3, r4
 8002050:	3b08      	subs	r3, #8
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	430a      	orrs	r2, r1
 8002056:	3306      	adds	r3, #6
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	18c3      	adds	r3, r0, r3
 800205c:	3304      	adds	r3, #4
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b003      	add	sp, #12
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	429a      	cmp	r2, r3
 8002082:	d301      	bcc.n	8002088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002084:	2301      	movs	r3, #1
 8002086:	e010      	b.n	80020aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <SysTick_Config+0x44>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	3a01      	subs	r2, #1
 800208e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002090:	2301      	movs	r3, #1
 8002092:	425b      	negs	r3, r3
 8002094:	2103      	movs	r1, #3
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff ff7c 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x44>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x44>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	210f      	movs	r1, #15
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	1c02      	adds	r2, r0, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	0002      	movs	r2, r0
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ff33 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff ffaf 	bl	8002070 <SysTick_Config>
 8002112:	0003      	movs	r3, r0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002120:	f7fe fad4 	bl	80006cc <HAL_SYSTICK_Callback>
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002142:	e14f      	b.n	80023e4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4091      	lsls	r1, r2
 800214e:	000a      	movs	r2, r1
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d100      	bne.n	800215c <HAL_GPIO_Init+0x30>
 800215a:	e140      	b.n	80023de <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	4013      	ands	r3, r2
 8002164:	2b01      	cmp	r3, #1
 8002166:	d005      	beq.n	8002174 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002170:	2b02      	cmp	r3, #2
 8002172:	d130      	bne.n	80021d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	409a      	lsls	r2, r3
 8002182:	0013      	movs	r3, r2
 8002184:	43da      	mvns	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	0013      	movs	r3, r2
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021aa:	2201      	movs	r2, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	43da      	mvns	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	2201      	movs	r2, #1
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d017      	beq.n	8002212 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	4013      	ands	r3, r2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	58d3      	ldr	r3, [r2, r3]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2207      	movs	r2, #7
 8002230:	4013      	ands	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	409a      	lsls	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2107      	movs	r1, #7
 800224a:	400b      	ands	r3, r1
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	6939      	ldr	r1, [r7, #16]
 8002264:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2203      	movs	r2, #3
 8002284:	401a      	ands	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_GPIO_Init+0x17c>
 80022a6:	e09a      	b.n	80023de <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x2d4>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	589b      	ldr	r3, [r3, r2]
 80022c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4013      	ands	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	43da      	mvns	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	429a      	cmp	r2, r3
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x1ea>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a47      	ldr	r2, [pc, #284]	; (8002404 <HAL_GPIO_Init+0x2d8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1e6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_GPIO_Init+0x2dc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1e2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a45      	ldr	r2, [pc, #276]	; (800240c <HAL_GPIO_Init+0x2e0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1de>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_GPIO_Init+0x2e4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1da>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x1ec>
 8002306:	2306      	movs	r3, #6
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x1ec>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x1ec>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x1ec>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x1ec>
 8002316:	2300      	movs	r3, #0
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	2103      	movs	r1, #3
 800231c:	400a      	ands	r2, r1
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x2d4>)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43da      	mvns	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	035b      	lsls	r3, r3, #13
 800234e:	4013      	ands	r3, r2
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43da      	mvns	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	039b      	lsls	r3, r3, #14
 8002378:	4013      	ands	r3, r2
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	029b      	lsls	r3, r3, #10
 80023a2:	4013      	ands	r3, r2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	4013      	ands	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	40da      	lsrs	r2, r3
 80023ec:	1e13      	subs	r3, r2, #0
 80023ee:	d000      	beq.n	80023f2 <HAL_GPIO_Init+0x2c6>
 80023f0:	e6a8      	b.n	8002144 <HAL_GPIO_Init+0x18>
  }
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b006      	add	sp, #24
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	50000400 	.word	0x50000400
 8002408:	50000800 	.word	0x50000800
 800240c:	50000c00 	.word	0x50000c00
 8002410:	50001c00 	.word	0x50001c00
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	0002      	movs	r2, r0
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	1dba      	adds	r2, r7, #6
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	4013      	ands	r3, r2
 800242e:	d008      	beq.n	8002442 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002432:	1dba      	adds	r2, r7, #6
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe f98f 	bl	8000760 <HAL_GPIO_EXTI_Callback>
  }
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e082      	b.n	8002568 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe fbf3 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2241      	movs	r2, #65	; 0x41
 8002482:	2124      	movs	r1, #36	; 0x24
 8002484:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	438a      	bics	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_I2C_Init+0x120>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4931      	ldr	r1, [pc, #196]	; (8002574 <HAL_I2C_Init+0x124>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d108      	bne.n	80024ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0209      	lsls	r1, r1, #8
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e007      	b.n	80024de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2184      	movs	r1, #132	; 0x84
 80024d8:	0209      	lsls	r1, r1, #8
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d104      	bne.n	80024f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	491f      	ldr	r1, [pc, #124]	; (8002578 <HAL_I2C_Init+0x128>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	491a      	ldr	r1, [pc, #104]	; (8002574 <HAL_I2C_Init+0x124>)
 800250c:	400a      	ands	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	431a      	orrs	r2, r3
 800251a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69d9      	ldr	r1, [r3, #28]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2241      	movs	r2, #65	; 0x41
 8002554:	2120      	movs	r1, #32
 8002556:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2242      	movs	r2, #66	; 0x42
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	f0ffffff 	.word	0xf0ffffff
 8002574:	ffff7fff 	.word	0xffff7fff
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	000c      	movs	r4, r1
 8002586:	0010      	movs	r0, r2
 8002588:	0019      	movs	r1, r3
 800258a:	230a      	movs	r3, #10
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	1c22      	adds	r2, r4, #0
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	2308      	movs	r3, #8
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	1c02      	adds	r2, r0, #0
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	1c0a      	adds	r2, r1, #0
 800259e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2241      	movs	r2, #65	; 0x41
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d000      	beq.n	80025ae <HAL_I2C_Mem_Write+0x32>
 80025ac:	e10c      	b.n	80027c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_I2C_Mem_Write+0x42>
 80025b4:	232c      	movs	r3, #44	; 0x2c
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0ff      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2C_Mem_Write+0x5c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0f8      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	2101      	movs	r1, #1
 80025de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e0:	f7ff f8bc 	bl	800175c <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	0219      	lsls	r1, r3, #8
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	f000 f975 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e3      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2241      	movs	r2, #65	; 0x41
 8002606:	2121      	movs	r1, #33	; 0x21
 8002608:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2242      	movs	r2, #66	; 0x42
 800260e:	2140      	movs	r1, #64	; 0x40
 8002610:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	222c      	movs	r2, #44	; 0x2c
 8002622:	18ba      	adds	r2, r7, r2
 8002624:	8812      	ldrh	r2, [r2, #0]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800262e:	1dbb      	adds	r3, r7, #6
 8002630:	881c      	ldrh	r4, [r3, #0]
 8002632:	2308      	movs	r3, #8
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	230a      	movs	r3, #10
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	8819      	ldrh	r1, [r3, #0]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	0023      	movs	r3, r4
 800264a:	f000 f8c5 	bl	80027d8 <I2C_RequestMemoryWrite>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d005      	beq.n	800265e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0b5      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2bff      	cmp	r3, #255	; 0xff
 8002666:	d911      	bls.n	800268c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	045c      	lsls	r4, r3, #17
 8002678:	230a      	movs	r3, #10
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	8819      	ldrh	r1, [r3, #0]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	0023      	movs	r3, r4
 8002686:	f000 fb05 	bl	8002c94 <I2C_TransferConfig>
 800268a:	e012      	b.n	80026b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	b2da      	uxtb	r2, r3
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	049c      	lsls	r4, r3, #18
 80026a0:	230a      	movs	r3, #10
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	8819      	ldrh	r1, [r3, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	0023      	movs	r3, r4
 80026ae:	f000 faf1 	bl	8002c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f961 	bl	8002980 <I2C_WaitOnTXISFlagUntilTimeout>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e081      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d03a      	beq.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d136      	bne.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0013      	movs	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	f000 f8e5 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e053      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2bff      	cmp	r3, #255	; 0xff
 800272a:	d911      	bls.n	8002750 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	045c      	lsls	r4, r3, #17
 800273c:	230a      	movs	r3, #10
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	8819      	ldrh	r1, [r3, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0023      	movs	r3, r4
 800274a:	f000 faa3 	bl	8002c94 <I2C_TransferConfig>
 800274e:	e012      	b.n	8002776 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	b2da      	uxtb	r2, r3
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	049c      	lsls	r4, r3, #18
 8002764:	230a      	movs	r3, #10
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	0023      	movs	r3, r4
 8002772:	f000 fa8f 	bl	8002c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d198      	bne.n	80026b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f940 	bl	8002a0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e01a      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	490b      	ldr	r1, [pc, #44]	; (80027d4 <HAL_I2C_Mem_Write+0x258>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2241      	movs	r2, #65	; 0x41
 80027b0:	2120      	movs	r1, #32
 80027b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2242      	movs	r2, #66	; 0x42
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b007      	add	sp, #28
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	fe00e800 	.word	0xfe00e800

080027d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	000c      	movs	r4, r1
 80027e2:	0010      	movs	r0, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	250a      	movs	r5, #10
 80027e8:	197b      	adds	r3, r7, r5
 80027ea:	1c22      	adds	r2, r4, #0
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	2308      	movs	r3, #8
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	1c02      	adds	r2, r0, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	1dbb      	adds	r3, r7, #6
 80027f8:	1c0a      	adds	r2, r1, #0
 80027fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	045c      	lsls	r4, r3, #17
 8002806:	197b      	adds	r3, r7, r5
 8002808:	8819      	ldrh	r1, [r3, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <I2C_RequestMemoryWrite+0xc4>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	0023      	movs	r3, r4
 8002812:	f000 fa3f 	bl	8002c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f8af 	bl	8002980 <I2C_WaitOnTXISFlagUntilTimeout>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e033      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	2308      	movs	r3, #8
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
 8002840:	e019      	b.n	8002876 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002842:	2308      	movs	r3, #8
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	b29b      	uxth	r3, r3
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f890 	bl	8002980 <I2C_WaitOnTXISFlagUntilTimeout>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e014      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002868:	2308      	movs	r3, #8
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	0013      	movs	r3, r2
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	f000 f82e 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bdb0      	pop	{r4, r5, r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	80002000 	.word	0x80002000

080028a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d103      	bne.n	80028be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d007      	beq.n	80028dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	619a      	str	r2, [r3, #24]
  }
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e030      	b.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d02d      	beq.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe ff2e 	bl	800175c <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d122      	bne.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	425a      	negs	r2, r3
 8002922:	4153      	adcs	r3, r2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	001a      	movs	r2, r3
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d113      	bne.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	2220      	movs	r2, #32
 8002936:	431a      	orrs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2241      	movs	r2, #65	; 0x41
 8002940:	2120      	movs	r1, #32
 8002942:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2242      	movs	r2, #66	; 0x42
 8002948:	2100      	movs	r1, #0
 800294a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e00f      	b.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	425a      	negs	r2, r3
 8002968:	4153      	adcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	001a      	movs	r2, r3
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d0bf      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800298c:	e032      	b.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 f87d 	bl	8002a94 <I2C_IsErrorOccurred>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d001      	beq.n	80029a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e030      	b.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	d025      	beq.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a8:	f7fe fed8 	bl	800175c <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11a      	bne.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2202      	movs	r2, #2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d013      	beq.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	2220      	movs	r2, #32
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2241      	movs	r2, #65	; 0x41
 80029dc:	2120      	movs	r1, #32
 80029de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2242      	movs	r2, #66	; 0x42
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2202      	movs	r2, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d1c5      	bne.n	800298e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b004      	add	sp, #16
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a18:	e02f      	b.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f837 	bl	8002a94 <I2C_IsErrorOccurred>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02d      	b.n	8002a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7fe fe95 	bl	800175c <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11a      	bne.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d013      	beq.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	2220      	movs	r2, #32
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2241      	movs	r2, #65	; 0x41
 8002a62:	2120      	movs	r1, #32
 8002a64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2242      	movs	r2, #66	; 0x42
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e007      	b.n	8002a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2220      	movs	r2, #32
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d1c8      	bne.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2327      	movs	r3, #39	; 0x27
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2210      	movs	r2, #16
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <I2C_IsErrorOccurred+0x2e>
 8002ac0:	e082      	b.n	8002bc8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aca:	e060      	b.n	8002b8e <I2C_IsErrorOccurred+0xfa>
 8002acc:	2427      	movs	r4, #39	; 0x27
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	193a      	adds	r2, r7, r4
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	d058      	beq.n	8002b8e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7fe fe3e 	bl	800175c <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d306      	bcc.n	8002afa <I2C_IsErrorOccurred+0x66>
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	193a      	adds	r2, r7, r4
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d149      	bne.n	8002b8e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b08:	2013      	movs	r0, #19
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	2142      	movs	r1, #66	; 0x42
 8002b10:	5c52      	ldrb	r2, [r2, r1]
 8002b12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	401a      	ands	r2, r3
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d126      	bne.n	8002b76 <I2C_IsErrorOccurred+0xe2>
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	01db      	lsls	r3, r3, #7
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d021      	beq.n	8002b76 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b32:	183b      	adds	r3, r7, r0
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d01d      	beq.n	8002b76 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	01c9      	lsls	r1, r1, #7
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b4c:	f7fe fe06 	bl	800175c <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e00f      	b.n	8002b76 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b56:	f7fe fe01 	bl	800175c <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b19      	cmp	r3, #25
 8002b62:	d908      	bls.n	8002b76 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	2220      	movs	r2, #32
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b6c:	2327      	movs	r3, #39	; 0x27
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]

              break;
 8002b74:	e00b      	b.n	8002b8e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2127      	movs	r1, #39	; 0x27
 8002b82:	187a      	adds	r2, r7, r1
 8002b84:	1879      	adds	r1, r7, r1
 8002b86:	7809      	ldrb	r1, [r1, #0]
 8002b88:	7011      	strb	r1, [r2, #0]
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d1e3      	bne.n	8002b56 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2220      	movs	r2, #32
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d004      	beq.n	8002ba6 <I2C_IsErrorOccurred+0x112>
 8002b9c:	2327      	movs	r3, #39	; 0x27
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d092      	beq.n	8002acc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ba6:	2327      	movs	r3, #39	; 0x27
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bc0:	2327      	movs	r3, #39	; 0x27
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d00c      	beq.n	8002bf4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4313      	orrs	r3, r2
 8002be0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0052      	lsls	r2, r2, #1
 8002bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bec:	2327      	movs	r3, #39	; 0x27
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00c      	beq.n	8002c18 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	2208      	movs	r2, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c10:	2327      	movs	r3, #39	; 0x27
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d00c      	beq.n	8002c3c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2202      	movs	r2, #2
 8002c26:	4313      	orrs	r3, r2
 8002c28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c34:	2327      	movs	r3, #39	; 0x27
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c3c:	2327      	movs	r3, #39	; 0x27
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fe29 	bl	80028a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	490d      	ldr	r1, [pc, #52]	; (8002c90 <I2C_IsErrorOccurred+0x1fc>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2241      	movs	r2, #65	; 0x41
 8002c6e:	2120      	movs	r1, #32
 8002c70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2242      	movs	r2, #66	; 0x42
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2240      	movs	r2, #64	; 0x40
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c82:	2327      	movs	r3, #39	; 0x27
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b00b      	add	sp, #44	; 0x2c
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	fe00e800 	.word	0xfe00e800

08002c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	0008      	movs	r0, r1
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	240a      	movs	r4, #10
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	1c02      	adds	r2, r0, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	2009      	movs	r0, #9
 8002cac:	183b      	adds	r3, r7, r0
 8002cae:	1c0a      	adds	r2, r1, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	059b      	lsls	r3, r3, #22
 8002cb8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cba:	183b      	adds	r3, r7, r0
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	0419      	lsls	r1, r3, #16
 8002cc0:	23ff      	movs	r3, #255	; 0xff
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cde:	0d51      	lsrs	r1, r2, #21
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	00d2      	lsls	r2, r2, #3
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	4907      	ldr	r1, [pc, #28]	; (8002d04 <I2C_TransferConfig+0x70>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	43d2      	mvns	r2, r2
 8002cec:	401a      	ands	r2, r3
 8002cee:	0011      	movs	r1, r2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b007      	add	sp, #28
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	03ff63ff 	.word	0x03ff63ff

08002d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2241      	movs	r2, #65	; 0x41
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d138      	bne.n	8002d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	5c9b      	ldrb	r3, [r3, r2]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e032      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	2101      	movs	r1, #1
 8002d32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2241      	movs	r2, #65	; 0x41
 8002d38:	2124      	movs	r1, #36	; 0x24
 8002d3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4911      	ldr	r1, [pc, #68]	; (8002d9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2241      	movs	r2, #65	; 0x41
 8002d80:	2120      	movs	r1, #32
 8002d82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	ffffefff 	.word	0xffffefff

08002da0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2241      	movs	r2, #65	; 0x41
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d139      	bne.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e033      	b.n	8002e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2241      	movs	r2, #65	; 0x41
 8002dd0:	2124      	movs	r1, #36	; 0x24
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	438a      	bics	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	; 0x41
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	fffff0ff 	.word	0xfffff0ff

08002e38 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000

08002e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f000 fbaf 	bl	80035da <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7c:	4bcf      	ldr	r3, [pc, #828]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	220c      	movs	r2, #12
 8002e82:	4013      	ands	r3, r2
 8002e84:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e86:	4bcd      	ldr	r3, [pc, #820]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <HAL_RCC_OscConfig+0x36>
 8002e9c:	e07e      	b.n	8002f9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d007      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d112      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x68>
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4bc1      	ldr	r3, [pc, #772]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5a>
 8002ec0:	e06b      	b.n	8002f9a <HAL_RCC_OscConfig+0x132>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d167      	bne.n	8002f9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f000 fb85 	bl	80035da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x84>
 8002edc:	4bb7      	ldr	r3, [pc, #732]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4bb6      	ldr	r3, [pc, #728]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0249      	lsls	r1, r1, #9
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e027      	b.n	8002f3c <HAL_RCC_OscConfig+0xd4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	02db      	lsls	r3, r3, #11
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0xae>
 8002ef8:	4bb0      	ldr	r3, [pc, #704]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4baf      	ldr	r3, [pc, #700]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	02c9      	lsls	r1, r1, #11
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4bad      	ldr	r3, [pc, #692]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4bac      	ldr	r3, [pc, #688]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0249      	lsls	r1, r1, #9
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e012      	b.n	8002f3c <HAL_RCC_OscConfig+0xd4>
 8002f16:	4ba9      	ldr	r3, [pc, #676]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4ba8      	ldr	r3, [pc, #672]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f1c:	49a8      	ldr	r1, [pc, #672]	; (80031c0 <HAL_RCC_OscConfig+0x358>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4ba6      	ldr	r3, [pc, #664]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4ba2      	ldr	r3, [pc, #648]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4ba1      	ldr	r3, [pc, #644]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f36:	49a3      	ldr	r1, [pc, #652]	; (80031c4 <HAL_RCC_OscConfig+0x35c>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe fc0a 	bl	800175c <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f4c:	e009      	b.n	8002f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4e:	f7fe fc05 	bl	800175c <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d902      	bls.n	8002f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	f000 fb3c 	bl	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f62:	4b96      	ldr	r3, [pc, #600]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d0ef      	beq.n	8002f4e <HAL_RCC_OscConfig+0xe6>
 8002f6e:	e015      	b.n	8002f9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fbf4 	bl	800175c <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fbef 	bl	800175c <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e326      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f8c:	4b8b      	ldr	r3, [pc, #556]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	029b      	lsls	r3, r3, #10
 8002f94:	4013      	ands	r3, r2
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x112>
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d100      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x140>
 8002fa6:	e08b      	b.n	80030c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d13e      	bne.n	8003038 <HAL_RCC_OscConfig+0x1d0>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d13b      	bne.n	8003038 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002fc0:	4b7e      	ldr	r3, [pc, #504]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x16c>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e302      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x360>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fea:	4b74      	ldr	r3, [pc, #464]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2209      	movs	r2, #9
 8002ff0:	4393      	bics	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	4b71      	ldr	r3, [pc, #452]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffc:	f000 fc40 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8003000:	0001      	movs	r1, r0
 8003002:	4b6e      	ldr	r3, [pc, #440]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	220f      	movs	r2, #15
 800300a:	4013      	ands	r3, r2
 800300c:	4a6f      	ldr	r2, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x364>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	000a      	movs	r2, r1
 8003012:	40da      	lsrs	r2, r3
 8003014:	4b6e      	ldr	r3, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x368>)
 8003016:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003018:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x36c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2513      	movs	r5, #19
 800301e:	197c      	adds	r4, r7, r5
 8003020:	0018      	movs	r0, r3
 8003022:	f7fe fb55 	bl	80016d0 <HAL_InitTick>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800302a:	197b      	adds	r3, r7, r5
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d046      	beq.n	80030c0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003032:	197b      	adds	r3, r7, r5
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	e2d0      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d027      	beq.n	800308e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2209      	movs	r2, #9
 8003044:	4393      	bics	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fb84 	bl	800175c <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe fb7f 	bl	800175c <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e2b6      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	4013      	ands	r3, r2
 8003074:	d0f1      	beq.n	800305a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a53      	ldr	r2, [pc, #332]	; (80031c8 <HAL_RCC_OscConfig+0x360>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e018      	b.n	80030c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b4b      	ldr	r3, [pc, #300]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003094:	2101      	movs	r1, #1
 8003096:	438a      	bics	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fb5f 	bl	800175c <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fb5a 	bl	800175c <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e291      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d1f1      	bne.n	80030a4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	4013      	ands	r3, r2
 80030c8:	d100      	bne.n	80030cc <HAL_RCC_OscConfig+0x264>
 80030ca:	e0a1      	b.n	8003210 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d140      	bne.n	8003154 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d2:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d005      	beq.n	80030ea <HAL_RCC_OscConfig+0x282>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e277      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <HAL_RCC_OscConfig+0x370>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	0a19      	lsrs	r1, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	061a      	lsls	r2, r3, #24
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	3301      	adds	r3, #1
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	0212      	lsls	r2, r2, #8
 800311e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	210f      	movs	r1, #15
 8003128:	400b      	ands	r3, r1
 800312a:	4928      	ldr	r1, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x364>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x368>)
 8003132:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x36c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2513      	movs	r5, #19
 800313a:	197c      	adds	r4, r7, r5
 800313c:	0018      	movs	r0, r3
 800313e:	f7fe fac7 	bl	80016d0 <HAL_InitTick>
 8003142:	0003      	movs	r3, r0
 8003144:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003146:	197b      	adds	r3, r7, r5
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d060      	beq.n	8003210 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	e242      	b.n	80035da <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03f      	beq.n	80031dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe faf7 	bl	800175c <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003174:	f7fe faf2 	bl	800175c <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e229      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4013      	ands	r3, r2
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_RCC_OscConfig+0x370>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	0a19      	lsrs	r1, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	061a      	lsls	r2, r3, #24
 80031b4:	4b01      	ldr	r3, [pc, #4]	; (80031bc <HAL_RCC_OscConfig+0x354>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x3a8>
 80031bc:	40021000 	.word	0x40021000
 80031c0:	fffeffff 	.word	0xfffeffff
 80031c4:	fffbffff 	.word	0xfffbffff
 80031c8:	ffffe0ff 	.word	0xffffe0ff
 80031cc:	08006030 	.word	0x08006030
 80031d0:	20000000 	.word	0x20000000
 80031d4:	2000000c 	.word	0x2000000c
 80031d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031dc:	4bbd      	ldr	r3, [pc, #756]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4bbc      	ldr	r3, [pc, #752]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80031e2:	49bd      	ldr	r1, [pc, #756]	; (80034d8 <HAL_RCC_OscConfig+0x670>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fab8 	bl	800175c <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f2:	f7fe fab3 	bl	800175c <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e1ea      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003204:	4bb3      	ldr	r3, [pc, #716]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2208      	movs	r2, #8
 8003216:	4013      	ands	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4bac      	ldr	r3, [pc, #688]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003226:	4bab      	ldr	r3, [pc, #684]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003228:	2101      	movs	r1, #1
 800322a:	430a      	orrs	r2, r1
 800322c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe fa95 	bl	800175c <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fa90 	bl	800175c <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1c7      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800324a:	4ba2      	ldr	r3, [pc, #648]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d0f1      	beq.n	8003238 <HAL_RCC_OscConfig+0x3d0>
 8003254:	e018      	b.n	8003288 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b9f      	ldr	r3, [pc, #636]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325a:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800325c:	2101      	movs	r1, #1
 800325e:	438a      	bics	r2, r1
 8003260:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe fa7b 	bl	800175c <HAL_GetTick>
 8003266:	0003      	movs	r3, r0
 8003268:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe fa76 	bl	800175c <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1ad      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800327e:	4b95      	ldr	r3, [pc, #596]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	d1f1      	bne.n	800326c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2204      	movs	r2, #4
 800328e:	4013      	ands	r3, r2
 8003290:	d100      	bne.n	8003294 <HAL_RCC_OscConfig+0x42c>
 8003292:	e0ae      	b.n	80033f2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003294:	2027      	movs	r0, #39	; 0x27
 8003296:	183b      	adds	r3, r7, r0
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329c:	4b8d      	ldr	r3, [pc, #564]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800329e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	055b      	lsls	r3, r3, #21
 80032a4:	4013      	ands	r3, r2
 80032a6:	d109      	bne.n	80032bc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80032aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ac:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0549      	lsls	r1, r1, #21
 80032b2:	430a      	orrs	r2, r1
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b87      	ldr	r3, [pc, #540]	; (80034dc <HAL_RCC_OscConfig+0x674>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4013      	ands	r3, r2
 80032c6:	d11a      	bne.n	80032fe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c8:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x674>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_RCC_OscConfig+0x674>)
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	0049      	lsls	r1, r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fa41 	bl	800175c <HAL_GetTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe fa3c 	bl	800175c <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e173      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x674>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	429a      	cmp	r2, r3
 8003308:	d107      	bne.n	800331a <HAL_RCC_OscConfig+0x4b2>
 800330a:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800330c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800330e:	4b71      	ldr	r3, [pc, #452]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0049      	lsls	r1, r1, #1
 8003314:	430a      	orrs	r2, r1
 8003316:	651a      	str	r2, [r3, #80]	; 0x50
 8003318:	e031      	b.n	800337e <HAL_RCC_OscConfig+0x516>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x4d4>
 8003322:	4b6c      	ldr	r3, [pc, #432]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003326:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003328:	496b      	ldr	r1, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x670>)
 800332a:	400a      	ands	r2, r1
 800332c:	651a      	str	r2, [r3, #80]	; 0x50
 800332e:	4b69      	ldr	r3, [pc, #420]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003332:	4b68      	ldr	r3, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003334:	496a      	ldr	r1, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x678>)
 8003336:	400a      	ands	r2, r1
 8003338:	651a      	str	r2, [r3, #80]	; 0x50
 800333a:	e020      	b.n	800337e <HAL_RCC_OscConfig+0x516>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	23a0      	movs	r3, #160	; 0xa0
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	429a      	cmp	r2, r3
 8003346:	d10e      	bne.n	8003366 <HAL_RCC_OscConfig+0x4fe>
 8003348:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800334a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334c:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	00c9      	lsls	r1, r1, #3
 8003352:	430a      	orrs	r2, r1
 8003354:	651a      	str	r2, [r3, #80]	; 0x50
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800335a:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0049      	lsls	r1, r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	651a      	str	r2, [r3, #80]	; 0x50
 8003364:	e00b      	b.n	800337e <HAL_RCC_OscConfig+0x516>
 8003366:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800336a:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800336c:	495a      	ldr	r1, [pc, #360]	; (80034d8 <HAL_RCC_OscConfig+0x670>)
 800336e:	400a      	ands	r2, r1
 8003370:	651a      	str	r2, [r3, #80]	; 0x50
 8003372:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003376:	4b57      	ldr	r3, [pc, #348]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003378:	4959      	ldr	r1, [pc, #356]	; (80034e0 <HAL_RCC_OscConfig+0x678>)
 800337a:	400a      	ands	r2, r1
 800337c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d015      	beq.n	80033b2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe f9e9 	bl	800175c <HAL_GetTick>
 800338a:	0003      	movs	r3, r0
 800338c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	e009      	b.n	80033a4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe f9e4 	bl	800175c <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_OscConfig+0x67c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e11a      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80033a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	d0ef      	beq.n	8003390 <HAL_RCC_OscConfig+0x528>
 80033b0:	e014      	b.n	80033dc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fe f9d3 	bl	800175c <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ba:	e009      	b.n	80033d0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe f9ce 	bl	800175c <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_RCC_OscConfig+0x67c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e104      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d0:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80033d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	d1ef      	bne.n	80033bc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033dc:	2327      	movs	r3, #39	; 0x27
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80033e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80033ec:	493e      	ldr	r1, [pc, #248]	; (80034e8 <HAL_RCC_OscConfig+0x680>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2220      	movs	r2, #32
 80033f8:	4013      	ands	r3, r2
 80033fa:	d049      	beq.n	8003490 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d026      	beq.n	8003452 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003416:	2101      	movs	r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
 800341c:	4b33      	ldr	r3, [pc, #204]	; (80034ec <HAL_RCC_OscConfig+0x684>)
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCC_OscConfig+0x684>)
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	0189      	lsls	r1, r1, #6
 8003426:	430a      	orrs	r2, r1
 8003428:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe f997 	bl	800175c <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003434:	f7fe f992 	bl	800175c <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0c9      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	d0f1      	beq.n	8003434 <HAL_RCC_OscConfig+0x5cc>
 8003450:	e01e      	b.n	8003490 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003458:	2101      	movs	r1, #1
 800345a:	438a      	bics	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCC_OscConfig+0x684>)
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_OscConfig+0x684>)
 8003464:	4922      	ldr	r1, [pc, #136]	; (80034f0 <HAL_RCC_OscConfig+0x688>)
 8003466:	400a      	ands	r2, r1
 8003468:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe f977 	bl	800175c <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003474:	f7fe f972 	bl	800175c <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0a9      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2202      	movs	r2, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d1f1      	bne.n	8003474 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d100      	bne.n	800349a <HAL_RCC_OscConfig+0x632>
 8003498:	e09e      	b.n	80035d8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d100      	bne.n	80034a2 <HAL_RCC_OscConfig+0x63a>
 80034a0:	e077      	b.n	8003592 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d158      	bne.n	800355c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_OscConfig+0x66c>)
 80034b0:	4910      	ldr	r1, [pc, #64]	; (80034f4 <HAL_RCC_OscConfig+0x68c>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe f951 	bl	800175c <HAL_GetTick>
 80034ba:	0003      	movs	r3, r0
 80034bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe f94c 	bl	800175c <HAL_GetTick>
 80034c4:	0002      	movs	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d914      	bls.n	80034f8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e083      	b.n	80035da <HAL_RCC_OscConfig+0x772>
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	40021000 	.word	0x40021000
 80034d8:	fffffeff 	.word	0xfffffeff
 80034dc:	40007000 	.word	0x40007000
 80034e0:	fffffbff 	.word	0xfffffbff
 80034e4:	00001388 	.word	0x00001388
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	40010000 	.word	0x40010000
 80034f0:	ffffdfff 	.word	0xffffdfff
 80034f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034f8:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	049b      	lsls	r3, r3, #18
 8003500:	4013      	ands	r3, r2
 8003502:	d1dd      	bne.n	80034c0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003504:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a37      	ldr	r2, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x780>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	431a      	orrs	r2, r3
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	0449      	lsls	r1, r1, #17
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fe f913 	bl	800175c <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe f90e 	bl	800175c <HAL_GetTick>
 8003540:	0002      	movs	r2, r0
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e045      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	049b      	lsls	r3, r3, #18
 8003556:	4013      	ands	r3, r2
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x6d4>
 800355a:	e03d      	b.n	80035d8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003562:	4922      	ldr	r1, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x784>)
 8003564:	400a      	ands	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe f8f8 	bl	800175c <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe f8f3 	bl	800175c <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e02a      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	049b      	lsls	r3, r3, #18
 800358c:	4013      	ands	r3, r2
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x70a>
 8003590:	e022      	b.n	80035d8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e01d      	b.n	80035da <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_RCC_OscConfig+0x77c>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	401a      	ands	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10f      	bne.n	80035d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	23f0      	movs	r3, #240	; 0xf0
 80035b8:	039b      	lsls	r3, r3, #14
 80035ba:	401a      	ands	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b00a      	add	sp, #40	; 0x28
 80035e0:	bdb0      	pop	{r4, r5, r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40021000 	.word	0x40021000
 80035e8:	ff02ffff 	.word	0xff02ffff
 80035ec:	feffffff 	.word	0xfeffffff

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e128      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b96      	ldr	r3, [pc, #600]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d91e      	bls.n	8003650 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b93      	ldr	r3, [pc, #588]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	4393      	bics	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003624:	f7fe f89a 	bl	800175c <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362c:	e009      	b.n	8003642 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fe f895 	bl	800175c <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	4a8a      	ldr	r2, [pc, #552]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e109      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b87      	ldr	r3, [pc, #540]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	4013      	ands	r3, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365a:	4b83      	ldr	r3, [pc, #524]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	22f0      	movs	r2, #240	; 0xf0
 8003660:	4393      	bics	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b7f      	ldr	r3, [pc, #508]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 800366a:	430a      	orrs	r2, r1
 800366c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d100      	bne.n	800367a <HAL_RCC_ClockConfig+0x8a>
 8003678:	e089      	b.n	800378e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003682:	4b79      	ldr	r3, [pc, #484]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	4013      	ands	r3, r2
 800368c:	d120      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0e1      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800369a:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	049b      	lsls	r3, r3, #18
 80036a2:	4013      	ands	r3, r2
 80036a4:	d114      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0d5      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2204      	movs	r2, #4
 80036b8:	4013      	ands	r3, r2
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0ca      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036c0:	4b69      	ldr	r3, [pc, #420]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0c2      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4393      	bics	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4b62      	ldr	r3, [pc, #392]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fe f83a 	bl	800175c <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d111      	bne.n	8003718 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	e009      	b.n	800370a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f6:	f7fe f831 	bl	800175c <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0a5      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800370a:	4b57      	ldr	r3, [pc, #348]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	220c      	movs	r2, #12
 8003710:	4013      	ands	r3, r2
 8003712:	2b08      	cmp	r3, #8
 8003714:	d1ef      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x106>
 8003716:	e03a      	b.n	800378e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d111      	bne.n	8003744 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	e009      	b.n	8003736 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003722:	f7fe f81b 	bl	800175c <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	4a4d      	ldr	r2, [pc, #308]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e08f      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003736:	4b4c      	ldr	r3, [pc, #304]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	220c      	movs	r2, #12
 800373c:	4013      	ands	r3, r2
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_ClockConfig+0x132>
 8003742:	e024      	b.n	800378e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11b      	bne.n	8003784 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800374c:	e009      	b.n	8003762 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fe f805 	bl	800175c <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a42      	ldr	r2, [pc, #264]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e079      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	220c      	movs	r2, #12
 8003768:	4013      	ands	r3, r2
 800376a:	2b04      	cmp	r3, #4
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_ClockConfig+0x15e>
 800376e:	e00e      	b.n	800378e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fff4 	bl	800175c <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e068      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003784:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	220c      	movs	r2, #12
 800378a:	4013      	ands	r3, r2
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	4013      	ands	r3, r2
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d21e      	bcs.n	80037da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379c:	4b30      	ldr	r3, [pc, #192]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	4393      	bics	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037ae:	f7fd ffd5 	bl	800175c <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	e009      	b.n	80037cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd ffd0 	bl	800175c <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	4a28      	ldr	r2, [pc, #160]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e044      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2204      	movs	r2, #4
 80037e0:	4013      	ands	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a20      	ldr	r2, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x27c>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	d00a      	beq.n	8003818 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_RCC_ClockConfig+0x280>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	00da      	lsls	r2, r3, #3
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003818:	f000 f832 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800381c:	0001      	movs	r1, r0
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x278>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	220f      	movs	r2, #15
 8003826:	4013      	ands	r3, r2
 8003828:	4a12      	ldr	r2, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x284>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	000a      	movs	r2, r1
 800382e:	40da      	lsrs	r2, r3
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_ClockConfig+0x288>)
 8003832:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_RCC_ClockConfig+0x28c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	250b      	movs	r5, #11
 800383a:	197c      	adds	r4, r7, r5
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd ff47 	bl	80016d0 <HAL_InitTick>
 8003842:	0003      	movs	r3, r0
 8003844:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003846:	197b      	adds	r3, r7, r5
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800384e:	197b      	adds	r3, r7, r5
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	e000      	b.n	8003856 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bdb0      	pop	{r4, r5, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	40022000 	.word	0x40022000
 8003864:	00001388 	.word	0x00001388
 8003868:	40021000 	.word	0x40021000
 800386c:	fffff8ff 	.word	0xfffff8ff
 8003870:	ffffc7ff 	.word	0xffffc7ff
 8003874:	08006030 	.word	0x08006030
 8003878:	20000000 	.word	0x20000000
 800387c:	2000000c 	.word	0x2000000c

08003880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	b5b0      	push	{r4, r5, r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003886:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	230c      	movs	r3, #12
 8003890:	4013      	ands	r3, r2
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d014      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x40>
 8003896:	d900      	bls.n	800389a <HAL_RCC_GetSysClockFreq+0x1a>
 8003898:	e07b      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x112>
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x24>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e076      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038a4:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	4013      	ands	r3, r2
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80038b2:	e07c      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80038b4:	4b42      	ldr	r3, [pc, #264]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038b8:	e079      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ba:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038be:	e076      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	0c9a      	lsrs	r2, r3, #18
 80038c4:	230f      	movs	r3, #15
 80038c6:	401a      	ands	r2, r3
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	0d9a      	lsrs	r2, r3, #22
 80038d2:	2303      	movs	r3, #3
 80038d4:	4013      	ands	r3, r2
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	025b      	lsls	r3, r3, #9
 80038e2:	4013      	ands	r3, r2
 80038e4:	d01a      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	69b8      	ldr	r0, [r7, #24]
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	f7fc fda7 	bl	8000448 <__aeabi_lmul>
 80038fa:	0002      	movs	r2, r0
 80038fc:	000b      	movs	r3, r1
 80038fe:	0010      	movs	r0, r2
 8003900:	0019      	movs	r1, r3
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f7fc fd7b 	bl	8000408 <__aeabi_uldivmod>
 8003912:	0002      	movs	r2, r0
 8003914:	000b      	movs	r3, r1
 8003916:	0013      	movs	r3, r2
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
 800391a:	e037      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800391c:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d01a      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003930:	2300      	movs	r3, #0
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	f7fc fd87 	bl	8000448 <__aeabi_lmul>
 800393a:	0002      	movs	r2, r0
 800393c:	000b      	movs	r3, r1
 800393e:	0010      	movs	r0, r2
 8003940:	0019      	movs	r1, r3
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f7fc fd5b 	bl	8000408 <__aeabi_uldivmod>
 8003952:	0002      	movs	r2, r0
 8003954:	000b      	movs	r3, r1
 8003956:	0013      	movs	r3, r2
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
 800395a:	e017      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	0018      	movs	r0, r3
 8003960:	2300      	movs	r3, #0
 8003962:	0019      	movs	r1, r3
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003966:	2300      	movs	r3, #0
 8003968:	f7fc fd6e 	bl	8000448 <__aeabi_lmul>
 800396c:	0002      	movs	r2, r0
 800396e:	000b      	movs	r3, r1
 8003970:	0010      	movs	r0, r2
 8003972:	0019      	movs	r1, r3
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	001c      	movs	r4, r3
 8003978:	2300      	movs	r3, #0
 800397a:	001d      	movs	r5, r3
 800397c:	0022      	movs	r2, r4
 800397e:	002b      	movs	r3, r5
 8003980:	f7fc fd42 	bl	8000408 <__aeabi_uldivmod>
 8003984:	0002      	movs	r2, r0
 8003986:	000b      	movs	r3, r1
 8003988:	0013      	movs	r3, r2
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003990:	e00d      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	2207      	movs	r2, #7
 800399a:	4013      	ands	r3, r2
 800399c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	3301      	adds	r3, #1
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	0212      	lsls	r2, r2, #8
 80039a6:	409a      	lsls	r2, r3
 80039a8:	0013      	movs	r3, r2
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b00e      	add	sp, #56	; 0x38
 80039b6:	bdb0      	pop	{r4, r5, r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	002dc6c0 	.word	0x002dc6c0
 80039c8:	08006040 	.word	0x08006040

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80039d4:	2317      	movs	r3, #23
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2220      	movs	r2, #32
 80039e2:	4013      	ands	r3, r2
 80039e4:	d106      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4013      	ands	r3, r2
 80039f0:	d100      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80039f2:	e104      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f4:	4bb1      	ldr	r3, [pc, #708]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	055b      	lsls	r3, r3, #21
 80039fc:	4013      	ands	r3, r2
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4bae      	ldr	r3, [pc, #696]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a04:	4bad      	ldr	r3, [pc, #692]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0549      	lsls	r1, r1, #21
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a0e:	2317      	movs	r3, #23
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4baa      	ldr	r3, [pc, #680]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d11a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4ba7      	ldr	r3, [pc, #668]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4ba6      	ldr	r3, [pc, #664]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a30:	f7fd fe94 	bl	800175c <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	e008      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fd fe8f 	bl	800175c <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e133      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	4b9c      	ldr	r3, [pc, #624]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4013      	ands	r3, r2
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a58:	4b98      	ldr	r3, [pc, #608]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	23c0      	movs	r3, #192	; 0xc0
 8003a5e:	039b      	lsls	r3, r3, #14
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	23c0      	movs	r3, #192	; 0xc0
 8003a6a:	039b      	lsls	r3, r3, #14
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	039b      	lsls	r3, r3, #14
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d013      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	23c0      	movs	r3, #192	; 0xc0
 8003a8a:	029b      	lsls	r3, r3, #10
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	23c0      	movs	r3, #192	; 0xc0
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d10a      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a96:	4b89      	ldr	r3, [pc, #548]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	029b      	lsls	r3, r3, #10
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	029b      	lsls	r3, r3, #10
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d101      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e103      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003aac:	4b83      	ldr	r3, [pc, #524]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ab0:	23c0      	movs	r3, #192	; 0xc0
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d049      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	23c0      	movs	r3, #192	; 0xc0
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d004      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	23c0      	movs	r3, #192	; 0xc0
 8003ade:	029b      	lsls	r3, r3, #10
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d034      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d02e      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003af4:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	4a72      	ldr	r2, [pc, #456]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	0309      	lsls	r1, r1, #12
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b12:	496d      	ldr	r1, [pc, #436]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d014      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fd fe18 	bl	800175c <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b30:	e009      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd fe13 	bl	800175c <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	4a63      	ldr	r2, [pc, #396]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0b6      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b46:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d0ef      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	23c0      	movs	r3, #192	; 0xc0
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	401a      	ands	r2, r3
 8003b68:	23c0      	movs	r3, #192	; 0xc0
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b70:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a56      	ldr	r2, [pc, #344]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	23c0      	movs	r3, #192	; 0xc0
 8003b80:	039b      	lsls	r3, r3, #14
 8003b82:	401a      	ands	r2, r3
 8003b84:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	23c0      	movs	r3, #192	; 0xc0
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	401a      	ands	r2, r3
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d01f      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	23c0      	movs	r3, #192	; 0xc0
 8003bae:	029b      	lsls	r3, r3, #10
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	23c0      	movs	r3, #192	; 0xc0
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	23c0      	movs	r3, #192	; 0xc0
 8003bca:	039b      	lsls	r3, r3, #14
 8003bcc:	401a      	ands	r2, r3
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bd6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	23c0      	movs	r3, #192	; 0xc0
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	401a      	ands	r2, r3
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003be8:	2317      	movs	r3, #23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bf8:	4936      	ldr	r1, [pc, #216]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c08:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4393      	bics	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c26:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	4013      	ands	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c72:	430a      	orrs	r2, r1
 8003c74:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b006      	add	sp, #24
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	fffcffff 	.word	0xfffcffff
 8003cc8:	fff7ffff 	.word	0xfff7ffff
 8003ccc:	00001388 	.word	0x00001388
 8003cd0:	ffcfffff 	.word	0xffcfffff
 8003cd4:	efffffff 	.word	0xefffffff
 8003cd8:	fffff3ff 	.word	0xfffff3ff
 8003cdc:	ffffcfff 	.word	0xffffcfff
 8003ce0:	fbffffff 	.word	0xfbffffff
 8003ce4:	fff3ffff 	.word	0xfff3ffff

08003ce8 <Sprite_Init>:
static const uint8_t _acmissile1Bmp[] = //bmp tên lửa
{
0x18, 0x18, 0x18, 0x0C, 0x0C, 0x0F, 0x18, 0x18};

void Sprite_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
    mPlayerMissileLaunchFlag = 0x00;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <Sprite_Init+0x1c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
//    mGameScore = 0x00;
//    mGameLevel = 1;
    Sprite_Player_Init();
 8003cf2:	f000 f809 	bl	8003d08 <Sprite_Player_Init>
    Sprite_Enemy_Init();
 8003cf6:	f000 f85b 	bl	8003db0 <Sprite_Enemy_Init>
    Sprite_Missile_Init();
 8003cfa:	f000 fc3f 	bl	800457c <Sprite_Missile_Init>
//    Sprite_Drone_Init();
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200007fa 	.word	0x200007fa

08003d08 <Sprite_Player_Init>:

void Sprite_Player_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0

    mPlayer.x = 0;
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <Sprite_Player_Init+0x24>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    mPlayer.y = PLAYER_DEFAULT_Y;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <Sprite_Player_Init+0x24>)
 8003d14:	2237      	movs	r2, #55	; 0x37
 8003d16:	609a      	str	r2, [r3, #8]
    mPlayer.sizeX = 24;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <Sprite_Player_Init+0x24>)
 8003d1a:	2218      	movs	r2, #24
 8003d1c:	60da      	str	r2, [r3, #12]
    mPlayer.sizeY = 10;
 8003d1e:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <Sprite_Player_Init+0x24>)
 8003d20:	220a      	movs	r2, #10
 8003d22:	611a      	str	r2, [r3, #16]
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	20000564 	.word	0x20000564

08003d30 <Sprite_Player_Move>:

void Sprite_Player_Move(uint32_t adc_value)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    if (mPlayer.last_x != mPlayer.x){
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d003      	beq.n	8003d4c <Sprite_Player_Move+0x1c>
    	mPlayer.last_x = mPlayer.x;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d4a:	605a      	str	r2, [r3, #4]
    }
	mPlayer.y = PLAYER_DEFAULT_Y;
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d4e:	2237      	movs	r2, #55	; 0x37
 8003d50:	609a      	str	r2, [r3, #8]
	mPlayer.x = adc_value;
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <Sprite_Player_Move+0x30>)
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000564 	.word	0x20000564

08003d64 <Sprite_Player_Draw>:

void Sprite_Player_Draw(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af02      	add	r7, sp, #8
	  ssd1306_DrawBitmap(mPlayer.last_x, mPlayer.y, _acplayer1Bmp, 24, 10, Black);
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <Sprite_Player_Draw+0x44>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2d8      	uxtb	r0, r3
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <Sprite_Player_Draw+0x44>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	b2d9      	uxtb	r1, r3
 8003d76:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <Sprite_Player_Draw+0x48>)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	230a      	movs	r3, #10
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2318      	movs	r3, #24
 8003d82:	f7fd fbb9 	bl	80014f8 <ssd1306_DrawBitmap>
	  ssd1306_DrawBitmap(mPlayer.x, mPlayer.y, _acplayer1Bmp, 24, 10, White);
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <Sprite_Player_Draw+0x44>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	b2d8      	uxtb	r0, r3
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <Sprite_Player_Draw+0x44>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	b2d9      	uxtb	r1, r3
 8003d92:	4a06      	ldr	r2, [pc, #24]	; (8003dac <Sprite_Player_Draw+0x48>)
 8003d94:	2301      	movs	r3, #1
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	230a      	movs	r3, #10
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2318      	movs	r3, #24
 8003d9e:	f7fd fbab 	bl	80014f8 <ssd1306_DrawBitmap>

}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000564 	.word	0x20000564
 8003dac:	08006da8 	.word	0x08006da8

08003db0 <Sprite_Enemy_Init>:


void Sprite_Enemy_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
    uint8_t count = 0;
 8003db6:	230f      	movs	r3, #15
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
    for (int i = 0 ; i < NUM_ENEMY_ROWS ; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	e064      	b.n	8003e8e <Sprite_Enemy_Init+0xde>
    {
        for (int j = 0 ; j < NUM_ENEMY_COLS ; j++)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e05b      	b.n	8003e82 <Sprite_Enemy_Init+0xd2>
        {
            mEnemy[count].life = 1;
 8003dca:	200f      	movs	r0, #15
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003dd2:	0152      	lsls	r2, r2, #5
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	54d1      	strb	r1, [r2, r3]
            mEnemy[count].points = 30;                              //points
 8003dd8:	183b      	adds	r3, r7, r0
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	331c      	adds	r3, #28
 8003de4:	221e      	movs	r2, #30
 8003de6:	801a      	strh	r2, [r3, #0]
            mEnemy[count].x = j * Enemy_size_x;//imageEnemy1.xSize;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	011a      	lsls	r2, r3, #4
 8003dec:	183b      	adds	r3, r7, r0
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	0011      	movs	r1, r2
 8003df2:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	3304      	adds	r3, #4
 8003dfa:	6019      	str	r1, [r3, #0]
            mEnemy[count].y = i * Enemy_size_y;//imageEnemy1.ySize;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	011a      	lsls	r2, r3, #4
 8003e00:	183b      	adds	r3, r7, r0
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	0011      	movs	r1, r2
 8003e06:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e08:	015b      	lsls	r3, r3, #5
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	6019      	str	r1, [r3, #0]
        	mEnemy[count].last_x = 999;
 8003e10:	0001      	movs	r1, r0
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <Sprite_Enemy_Init+0xf4>)
 8003e20:	601a      	str	r2, [r3, #0]
        	mEnemy[count].last_y = 999;
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e28:	015b      	lsls	r3, r3, #5
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <Sprite_Enemy_Init+0xf4>)
 8003e30:	601a      	str	r2, [r3, #0]
            mEnemy[count].sizeX = Enemy_size_x;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	18d3      	adds	r3, r2, r3
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	2210      	movs	r2, #16
 8003e40:	601a      	str	r2, [r3, #0]
            mEnemy[count].sizeY = Enemy_size_y;
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	18d3      	adds	r3, r2, r3
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	2210      	movs	r2, #16
 8003e50:	601a      	str	r2, [r3, #0]
            mEnemy[count].horizDirection = SPRITE_DIRECTION_LEFT;   //khởi tạo hướng trái
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e58:	015b      	lsls	r3, r3, #5
 8003e5a:	18d3      	adds	r3, r2, r3
 8003e5c:	331e      	adds	r3, #30
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
            mEnemy[count].vertDirection = SPRITE_VERTICAL_DOWN;     //khởi tạo hướng đi xuống dưới
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <Sprite_Enemy_Init+0xf0>)
 8003e68:	015b      	lsls	r3, r3, #5
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	331f      	adds	r3, #31
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]

            count++;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	3201      	adds	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
        for (int j = 0 ; j < NUM_ENEMY_COLS ; j++)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	dda0      	ble.n	8003dca <Sprite_Enemy_Init+0x1a>
    for (int i = 0 ; i < NUM_ENEMY_ROWS ; i++)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dd97      	ble.n	8003dc4 <Sprite_Enemy_Init+0x14>
        }
    }
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000578 	.word	0x20000578
 8003ea4:	000003e7 	.word	0x000003e7

08003ea8 <Sprite_Enemy_Move>:

void Sprite_Enemy_Move(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0

    int i, j;
    unsigned char flag = 0;
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e036      	b.n	8003f28 <Sprite_Enemy_Move+0x80>
    {
        if (mEnemy[i].last_x != mEnemy[i].x)
 8003eba:	4acc      	ldr	r2, [pc, #816]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	015b      	lsls	r3, r3, #5
 8003ec0:	18d3      	adds	r3, r2, r3
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	49c9      	ldr	r1, [pc, #804]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	015b      	lsls	r3, r3, #5
 8003ecc:	18cb      	adds	r3, r1, r3
 8003ece:	3304      	adds	r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00b      	beq.n	8003eee <Sprite_Enemy_Move+0x46>
        	mEnemy[i].last_x = mEnemy[i].x;
 8003ed6:	4ac5      	ldr	r2, [pc, #788]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	015b      	lsls	r3, r3, #5
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	3304      	adds	r3, #4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	49c2      	ldr	r1, [pc, #776]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	015b      	lsls	r3, r3, #5
 8003ee8:	18cb      	adds	r3, r1, r3
 8003eea:	3308      	adds	r3, #8
 8003eec:	601a      	str	r2, [r3, #0]
        if (mEnemy[i].last_y != mEnemy[i].y)
 8003eee:	4abf      	ldr	r2, [pc, #764]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	015b      	lsls	r3, r3, #5
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	3310      	adds	r3, #16
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	49bc      	ldr	r1, [pc, #752]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015b      	lsls	r3, r3, #5
 8003f00:	18cb      	adds	r3, r1, r3
 8003f02:	330c      	adds	r3, #12
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d00b      	beq.n	8003f22 <Sprite_Enemy_Move+0x7a>
        	mEnemy[i].last_y = mEnemy[i].y;
 8003f0a:	4ab8      	ldr	r2, [pc, #736]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015b      	lsls	r3, r3, #5
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	330c      	adds	r3, #12
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	49b5      	ldr	r1, [pc, #724]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	18cb      	adds	r3, r1, r3
 8003f1e:	3310      	adds	r3, #16
 8003f20:	601a      	str	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3301      	adds	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	ddc5      	ble.n	8003eba <Sprite_Enemy_Move+0x12>
    }

    for(i = 0 ; i < NUM_ENEMY ; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e048      	b.n	8003fc6 <Sprite_Enemy_Move+0x11e>
    {
        //sang phải
        if (mEnemy[i].horizDirection == SPRITE_DIRECTION_RIGHT)
 8003f34:	4aad      	ldr	r2, [pc, #692]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	015b      	lsls	r3, r3, #5
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	331e      	adds	r3, #30
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d122      	bne.n	8003f8a <Sprite_Enemy_Move+0xe2>
        {
            if(((mEnemy[i].x + mEnemy[i].sizeX) < SPRITE_MAX_X) && (mEnemy[i].life == 1))     //right edge
 8003f44:	4aa9      	ldr	r2, [pc, #676]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	015b      	lsls	r3, r3, #5
 8003f4a:	18d3      	adds	r3, r2, r3
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	49a6      	ldr	r1, [pc, #664]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	015b      	lsls	r3, r3, #5
 8003f56:	18cb      	adds	r3, r1, r3
 8003f58:	3314      	adds	r3, #20
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	18d3      	adds	r3, r2, r3
 8003f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f60:	d82e      	bhi.n	8003fc0 <Sprite_Enemy_Move+0x118>
 8003f62:	4ba2      	ldr	r3, [pc, #648]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	0152      	lsls	r2, r2, #5
 8003f68:	5cd3      	ldrb	r3, [r2, r3]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d128      	bne.n	8003fc0 <Sprite_Enemy_Move+0x118>
                mEnemy[i].x += speed_horizDirection;
 8003f6e:	4a9f      	ldr	r2, [pc, #636]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	3304      	adds	r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	499b      	ldr	r1, [pc, #620]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015b      	lsls	r3, r3, #5
 8003f82:	18cb      	adds	r3, r1, r3
 8003f84:	3304      	adds	r3, #4
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e01a      	b.n	8003fc0 <Sprite_Enemy_Move+0x118>
        }

        //sang trái
        else
        {
            if((mEnemy[i].x > SPRITE_MIN_X) && (mEnemy[i].life == 1))     //left edge
 8003f8a:	4a98      	ldr	r2, [pc, #608]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	015b      	lsls	r3, r3, #5
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	3304      	adds	r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <Sprite_Enemy_Move+0x118>
 8003f9a:	4b94      	ldr	r3, [pc, #592]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	0152      	lsls	r2, r2, #5
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10c      	bne.n	8003fc0 <Sprite_Enemy_Move+0x118>
                mEnemy[i].x -= speed_horizDirection;
 8003fa6:	4a91      	ldr	r2, [pc, #580]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	3304      	adds	r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1e9a      	subs	r2, r3, #2
 8003fb4:	498d      	ldr	r1, [pc, #564]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	015b      	lsls	r3, r3, #5
 8003fba:	18cb      	adds	r3, r1, r3
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	601a      	str	r2, [r3, #0]
    for(i = 0 ; i < NUM_ENEMY ; i++)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	ddb3      	ble.n	8003f34 <Sprite_Enemy_Move+0x8c>
        }
    }

    //kiểm tra đổi hướng - trái
    flag = 0;
 8003fcc:	1dfb      	adds	r3, r7, #7
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e01a      	b.n	800400e <Sprite_Enemy_Move+0x166>
    {
        if (((mEnemy[i].x + mEnemy[i].sizeX) >= SPRITE_MAX_X) && (mEnemy[i].life == 1))
 8003fd8:	4a84      	ldr	r2, [pc, #528]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4981      	ldr	r1, [pc, #516]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015b      	lsls	r3, r3, #5
 8003fea:	18cb      	adds	r3, r1, r3
 8003fec:	3314      	adds	r3, #20
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff4:	d908      	bls.n	8004008 <Sprite_Enemy_Move+0x160>
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	0152      	lsls	r2, r2, #5
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <Sprite_Enemy_Move+0x160>
            flag = 1;
 8004002:	1dfb      	adds	r3, r7, #7
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b05      	cmp	r3, #5
 8004012:	dde1      	ble.n	8003fd8 <Sprite_Enemy_Move+0x130>
    }

    if (flag == 1)
 8004014:	1dfb      	adds	r3, r7, #7
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d155      	bne.n	80040c8 <Sprite_Enemy_Move+0x220>
    {
        for (j = 0 ; j < NUM_ENEMY ; j++)
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	e04f      	b.n	80040c2 <Sprite_Enemy_Move+0x21a>
        {
            mEnemy[j].horizDirection = SPRITE_DIRECTION_RIGHT;
 8004022:	4a72      	ldr	r2, [pc, #456]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	331e      	adds	r3, #30
 800402c:	2201      	movs	r2, #1
 800402e:	701a      	strb	r2, [r3, #0]

            //move down on a direction change, if current
            //is moving down... continue moving down
            if (mEnemy[j].vertDirection == SPRITE_VERTICAL_DOWN)
 8004030:	4a6e      	ldr	r2, [pc, #440]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	015b      	lsls	r3, r3, #5
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	331f      	adds	r3, #31
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d122      	bne.n	8004086 <Sprite_Enemy_Move+0x1de>
            {
                if(((mEnemy[j].y + mEnemy[j].sizeY) < SPRITE_MAX_Y) && (mEnemy[j].life == 1))
 8004040:	4a6a      	ldr	r2, [pc, #424]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	015b      	lsls	r3, r3, #5
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	330c      	adds	r3, #12
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4967      	ldr	r1, [pc, #412]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	015b      	lsls	r3, r3, #5
 8004052:	18cb      	adds	r3, r1, r3
 8004054:	3318      	adds	r3, #24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	2b31      	cmp	r3, #49	; 0x31
 800405c:	d82e      	bhi.n	80040bc <Sprite_Enemy_Move+0x214>
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	0152      	lsls	r2, r2, #5
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d128      	bne.n	80040bc <Sprite_Enemy_Move+0x214>
                    mEnemy[j].y+= speed_vertDirection;
 800406a:	4a60      	ldr	r2, [pc, #384]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015b      	lsls	r3, r3, #5
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	330c      	adds	r3, #12
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1cda      	adds	r2, r3, #3
 8004078:	495c      	ldr	r1, [pc, #368]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	015b      	lsls	r3, r3, #5
 800407e:	18cb      	adds	r3, r1, r3
 8004080:	330c      	adds	r3, #12
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e01a      	b.n	80040bc <Sprite_Enemy_Move+0x214>

            //move up on a direction change, if current
            //is moving up, continue moving up
            else
            {
                if((mEnemy[j].y > SPRITE_MIN_Y) && (mEnemy[j].life == 1))
 8004086:	4a59      	ldr	r2, [pc, #356]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	330c      	adds	r3, #12
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <Sprite_Enemy_Move+0x214>
 8004096:	4b55      	ldr	r3, [pc, #340]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0152      	lsls	r2, r2, #5
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10c      	bne.n	80040bc <Sprite_Enemy_Move+0x214>
                    mEnemy[j].y-= speed_vertDirection;
 80040a2:	4a52      	ldr	r2, [pc, #328]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015b      	lsls	r3, r3, #5
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	330c      	adds	r3, #12
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1eda      	subs	r2, r3, #3
 80040b0:	494e      	ldr	r1, [pc, #312]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015b      	lsls	r3, r3, #5
 80040b6:	18cb      	adds	r3, r1, r3
 80040b8:	330c      	adds	r3, #12
 80040ba:	601a      	str	r2, [r3, #0]
        for (j = 0 ; j < NUM_ENEMY ; j++)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3301      	adds	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	ddac      	ble.n	8004022 <Sprite_Enemy_Move+0x17a>
            }
        }
    }
    if (flag == 1)
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10f      	bne.n	80040f0 <Sprite_Enemy_Move+0x248>
    {
        for (j = 0 ; j < NUM_ENEMY ; j++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	e009      	b.n	80040ea <Sprite_Enemy_Move+0x242>
            mEnemy[j].horizDirection = SPRITE_DIRECTION_LEFT;
 80040d6:	4a45      	ldr	r2, [pc, #276]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	015b      	lsls	r3, r3, #5
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	331e      	adds	r3, #30
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
        for (j = 0 ; j < NUM_ENEMY ; j++)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	ddf2      	ble.n	80040d6 <Sprite_Enemy_Move+0x22e>
    }

    //kiểm tra đổi hướng - phải
    flag = 0;
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e013      	b.n	8004124 <Sprite_Enemy_Move+0x27c>
    {
        if ((mEnemy[i].x <= SPRITE_MIN_X) && (mEnemy[i].life == 1))
 80040fc:	4a3b      	ldr	r2, [pc, #236]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	015b      	lsls	r3, r3, #5
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	3304      	adds	r3, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <Sprite_Enemy_Move+0x276>
 800410c:	4b37      	ldr	r3, [pc, #220]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	0152      	lsls	r2, r2, #5
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d102      	bne.n	800411e <Sprite_Enemy_Move+0x276>
            flag = 1;
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b05      	cmp	r3, #5
 8004128:	dde8      	ble.n	80040fc <Sprite_Enemy_Move+0x254>
    }

    if (flag == 1)
 800412a:	1dfb      	adds	r3, r7, #7
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d155      	bne.n	80041de <Sprite_Enemy_Move+0x336>
    {
        for (j = 0 ; j < NUM_ENEMY ; j++)
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	e04f      	b.n	80041d8 <Sprite_Enemy_Move+0x330>
        {
            mEnemy[j].horizDirection = SPRITE_DIRECTION_RIGHT;
 8004138:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	18d3      	adds	r3, r2, r3
 8004140:	331e      	adds	r3, #30
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]

            //move down on a direction change, if current
            //is moving down... continue moving down
            if (mEnemy[j].vertDirection == SPRITE_VERTICAL_DOWN)
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	331f      	adds	r3, #31
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d122      	bne.n	800419c <Sprite_Enemy_Move+0x2f4>
            {
                if(((mEnemy[j].y + mEnemy[j].sizeY) < SPRITE_MAX_Y) && (mEnemy[j].life == 1))
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	330c      	adds	r3, #12
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4922      	ldr	r1, [pc, #136]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015b      	lsls	r3, r3, #5
 8004168:	18cb      	adds	r3, r1, r3
 800416a:	3318      	adds	r3, #24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	2b31      	cmp	r3, #49	; 0x31
 8004172:	d82e      	bhi.n	80041d2 <Sprite_Enemy_Move+0x32a>
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0152      	lsls	r2, r2, #5
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d128      	bne.n	80041d2 <Sprite_Enemy_Move+0x32a>
                    mEnemy[j].y+= speed_vertDirection;
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	015b      	lsls	r3, r3, #5
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	330c      	adds	r3, #12
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1cda      	adds	r2, r3, #3
 800418e:	4917      	ldr	r1, [pc, #92]	; (80041ec <Sprite_Enemy_Move+0x344>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015b      	lsls	r3, r3, #5
 8004194:	18cb      	adds	r3, r1, r3
 8004196:	330c      	adds	r3, #12
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e01a      	b.n	80041d2 <Sprite_Enemy_Move+0x32a>

            //move up on a direction change, if current
            //is moving up, continue moving up
            else
            {
                if((mEnemy[j].y > SPRITE_MIN_Y) && (mEnemy[j].life == 1))
 800419c:	4a13      	ldr	r2, [pc, #76]	; (80041ec <Sprite_Enemy_Move+0x344>)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	015b      	lsls	r3, r3, #5
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	330c      	adds	r3, #12
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <Sprite_Enemy_Move+0x32a>
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	0152      	lsls	r2, r2, #5
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <Sprite_Enemy_Move+0x32a>
                    mEnemy[j].y-= speed_vertDirection;
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	015b      	lsls	r3, r3, #5
 80041be:	18d3      	adds	r3, r2, r3
 80041c0:	330c      	adds	r3, #12
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1eda      	subs	r2, r3, #3
 80041c6:	4909      	ldr	r1, [pc, #36]	; (80041ec <Sprite_Enemy_Move+0x344>)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	015b      	lsls	r3, r3, #5
 80041cc:	18cb      	adds	r3, r1, r3
 80041ce:	330c      	adds	r3, #12
 80041d0:	601a      	str	r2, [r3, #0]
        for (j = 0 ; j < NUM_ENEMY ; j++)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b05      	cmp	r3, #5
 80041dc:	ddac      	ble.n	8004138 <Sprite_Enemy_Move+0x290>
            }
        }
    }

    //kiểm tra đổi hướng - lên
    flag = 0;
 80041de:	1dfb      	adds	r3, r7, #7
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e01d      	b.n	8004226 <Sprite_Enemy_Move+0x37e>
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000578 	.word	0x20000578
    {
        if (((mEnemy[i].y + mEnemy[i].sizeY) >= SPRITE_MAX_Y) && (mEnemy[i].life == 1))
 80041f0:	4a33      	ldr	r2, [pc, #204]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	015b      	lsls	r3, r3, #5
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	330c      	adds	r3, #12
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4930      	ldr	r1, [pc, #192]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	18cb      	adds	r3, r1, r3
 8004204:	3318      	adds	r3, #24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	18d3      	adds	r3, r2, r3
 800420a:	2b31      	cmp	r3, #49	; 0x31
 800420c:	d908      	bls.n	8004220 <Sprite_Enemy_Move+0x378>
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	0152      	lsls	r2, r2, #5
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <Sprite_Enemy_Move+0x378>
            flag = 1;
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b05      	cmp	r3, #5
 800422a:	dde1      	ble.n	80041f0 <Sprite_Enemy_Move+0x348>
    }
    if (flag == 1)
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10f      	bne.n	8004254 <Sprite_Enemy_Move+0x3ac>
    {
        for (j = 0 ; j < NUM_ENEMY ; j++)
 8004234:	2300      	movs	r3, #0
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	e009      	b.n	800424e <Sprite_Enemy_Move+0x3a6>
            mEnemy[j].vertDirection = SPRITE_VERTICAL_UP;
 800423a:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015b      	lsls	r3, r3, #5
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	331f      	adds	r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
        for (j = 0 ; j < NUM_ENEMY ; j++)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3301      	adds	r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b05      	cmp	r3, #5
 8004252:	ddf2      	ble.n	800423a <Sprite_Enemy_Move+0x392>
    }

    //kiểm tra đổi hướng - xuống
    flag = 0;
 8004254:	1dfb      	adds	r3, r7, #7
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e013      	b.n	8004288 <Sprite_Enemy_Move+0x3e0>
    {
        if ((mEnemy[i].y <= SPRITE_MIN_Y) && (mEnemy[i].life == 1))
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	330c      	adds	r3, #12
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d108      	bne.n	8004282 <Sprite_Enemy_Move+0x3da>
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	0152      	lsls	r2, r2, #5
 8004276:	5cd3      	ldrb	r3, [r2, r3]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d102      	bne.n	8004282 <Sprite_Enemy_Move+0x3da>
            flag = 1;
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < NUM_ENEMY ; i++)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b05      	cmp	r3, #5
 800428c:	dde8      	ble.n	8004260 <Sprite_Enemy_Move+0x3b8>
    }
    if (flag == 1)
 800428e:	1dfb      	adds	r3, r7, #7
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10f      	bne.n	80042b6 <Sprite_Enemy_Move+0x40e>
    {
        for (j = 0 ; j < NUM_ENEMY ; j++)
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	e009      	b.n	80042b0 <Sprite_Enemy_Move+0x408>
            mEnemy[j].vertDirection = SPRITE_VERTICAL_DOWN;
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <Sprite_Enemy_Move+0x418>)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015b      	lsls	r3, r3, #5
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	331f      	adds	r3, #31
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
        for (j = 0 ; j < NUM_ENEMY ; j++)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	ddf2      	ble.n	800429c <Sprite_Enemy_Move+0x3f4>
    }


}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b004      	add	sp, #16
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	20000578 	.word	0x20000578

080042c4 <Sprite_Enemy_Draw>:

void Sprite_Enemy_Draw(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af02      	add	r7, sp, #8
    for (int i = 0 ; i < NUM_ENEMY ; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e055      	b.n	800437c <Sprite_Enemy_Draw+0xb8>
    {
        if (mEnemy[i].life == 2)
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	0152      	lsls	r2, r2, #5
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11a      	bne.n	8004312 <Sprite_Enemy_Draw+0x4e>
        {
			ssd1306_DrawBitmap(mEnemy[i].last_x, mEnemy[i].last_y, _acenemy1Bmp, 16, 16, Black);
 80042dc:	4a2b      	ldr	r2, [pc, #172]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	015b      	lsls	r3, r3, #5
 80042e2:	18d3      	adds	r3, r2, r3
 80042e4:	3308      	adds	r3, #8
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	b2d8      	uxtb	r0, r3
 80042ea:	4a28      	ldr	r2, [pc, #160]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	3310      	adds	r3, #16
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	4a25      	ldr	r2, [pc, #148]	; (8004390 <Sprite_Enemy_Draw+0xcc>)
 80042fa:	2300      	movs	r3, #0
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	2310      	movs	r3, #16
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2310      	movs	r3, #16
 8004304:	f7fd f8f8 	bl	80014f8 <ssd1306_DrawBitmap>
			mEnemy[i].life = 0;
 8004308:	4b20      	ldr	r3, [pc, #128]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	0152      	lsls	r2, r2, #5
 800430e:	2100      	movs	r1, #0
 8004310:	54d1      	strb	r1, [r2, r3]
        }
        if (mEnemy[i].life == 1)
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	0152      	lsls	r2, r2, #5
 8004318:	5cd3      	ldrb	r3, [r2, r3]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d12b      	bne.n	8004376 <Sprite_Enemy_Draw+0xb2>
        {
			ssd1306_DrawBitmap(mEnemy[i].last_x, mEnemy[i].last_y, _acenemy1Bmp, 16, 16, Black);
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	015b      	lsls	r3, r3, #5
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	3308      	adds	r3, #8
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b2d8      	uxtb	r0, r3
 800432c:	4a17      	ldr	r2, [pc, #92]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	015b      	lsls	r3, r3, #5
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	3310      	adds	r3, #16
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b2d9      	uxtb	r1, r3
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <Sprite_Enemy_Draw+0xcc>)
 800433c:	2300      	movs	r3, #0
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	2310      	movs	r3, #16
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2310      	movs	r3, #16
 8004346:	f7fd f8d7 	bl	80014f8 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(mEnemy[i].x, mEnemy[i].y, _acenemy1Bmp, 16, 16, White);
 800434a:	4a10      	ldr	r2, [pc, #64]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	18d3      	adds	r3, r2, r3
 8004352:	3304      	adds	r3, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b2d8      	uxtb	r0, r3
 8004358:	4a0c      	ldr	r2, [pc, #48]	; (800438c <Sprite_Enemy_Draw+0xc8>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	015b      	lsls	r3, r3, #5
 800435e:	18d3      	adds	r3, r2, r3
 8004360:	330c      	adds	r3, #12
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b2d9      	uxtb	r1, r3
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <Sprite_Enemy_Draw+0xcc>)
 8004368:	2301      	movs	r3, #1
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2310      	movs	r3, #16
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2310      	movs	r3, #16
 8004372:	f7fd f8c1 	bl	80014f8 <ssd1306_DrawBitmap>
    for (int i = 0 ; i < NUM_ENEMY ; i++)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3301      	adds	r3, #1
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b05      	cmp	r3, #5
 8004380:	dda6      	ble.n	80042d0 <Sprite_Enemy_Draw+0xc>
        }
    }
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000578 	.word	0x20000578
 8004390:	08006dc8 	.word	0x08006dc8

08004394 <Sprite_Missle_Draw>:

void Sprite_Missle_Draw(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af02      	add	r7, sp, #8
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e0de      	b.n	800455e <Sprite_Missle_Draw+0x1ca>
    {
        //kiểm tra tên lửa địch
        if (mEnemyMissile[i].life == 2){//trường hợp tên lửa ra ngoài màn
 80043a0:	4973      	ldr	r1, [pc, #460]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	0013      	movs	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	5c5b      	ldrb	r3, [r3, r1]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d123      	bne.n	80043fa <Sprite_Missle_Draw+0x66>
        	ssd1306_DrawBitmap(mEnemyMissile[i].last_x, mEnemyMissile[i].last_y, _acmissile1Bmp, 8, 8, Black);
 80043b2:	496f      	ldr	r1, [pc, #444]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	0013      	movs	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	18cb      	adds	r3, r1, r3
 80043c0:	3308      	adds	r3, #8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2d8      	uxtb	r0, r3
 80043c6:	496a      	ldr	r1, [pc, #424]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	0013      	movs	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	18cb      	adds	r3, r1, r3
 80043d4:	3310      	adds	r3, #16
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b2d9      	uxtb	r1, r3
 80043da:	4a66      	ldr	r2, [pc, #408]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 80043dc:	2300      	movs	r3, #0
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	2308      	movs	r3, #8
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2308      	movs	r3, #8
 80043e6:	f7fd f887 	bl	80014f8 <ssd1306_DrawBitmap>
        	mEnemyMissile[i].life = 0;
 80043ea:	4961      	ldr	r1, [pc, #388]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	0013      	movs	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	2200      	movs	r2, #0
 80043f8:	545a      	strb	r2, [r3, r1]
        }
        if (mEnemyMissile[i].life == 1){
 80043fa:	495d      	ldr	r1, [pc, #372]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	0013      	movs	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	5c5b      	ldrb	r3, [r3, r1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d137      	bne.n	800447c <Sprite_Missle_Draw+0xe8>
        	ssd1306_DrawBitmap(mEnemyMissile[i].last_x, mEnemyMissile[i].last_y, _acmissile1Bmp, 8, 8, Black);
 800440c:	4958      	ldr	r1, [pc, #352]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	0013      	movs	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	18cb      	adds	r3, r1, r3
 800441a:	3308      	adds	r3, #8
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	b2d8      	uxtb	r0, r3
 8004420:	4953      	ldr	r1, [pc, #332]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	0013      	movs	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	18cb      	adds	r3, r1, r3
 800442e:	3310      	adds	r3, #16
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	b2d9      	uxtb	r1, r3
 8004434:	4a4f      	ldr	r2, [pc, #316]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 8004436:	2300      	movs	r3, #0
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2308      	movs	r3, #8
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2308      	movs	r3, #8
 8004440:	f7fd f85a 	bl	80014f8 <ssd1306_DrawBitmap>
        	ssd1306_DrawBitmap(mEnemyMissile[i].x, mEnemyMissile[i].y, _acmissile1Bmp, 8, 8, White);
 8004444:	494a      	ldr	r1, [pc, #296]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	0013      	movs	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	18cb      	adds	r3, r1, r3
 8004452:	3304      	adds	r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2d8      	uxtb	r0, r3
 8004458:	4945      	ldr	r1, [pc, #276]	; (8004570 <Sprite_Missle_Draw+0x1dc>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	0013      	movs	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	18cb      	adds	r3, r1, r3
 8004466:	330c      	adds	r3, #12
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b2d9      	uxtb	r1, r3
 800446c:	4a41      	ldr	r2, [pc, #260]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 800446e:	2301      	movs	r3, #1
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	2308      	movs	r3, #8
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	2308      	movs	r3, #8
 8004478:	f7fd f83e 	bl	80014f8 <ssd1306_DrawBitmap>
        }


        //kiểm tra tên lửa người chơi
        if (mPlayerMissile[i].life == 2){//trường hợp tên lửa ra ngoài màn
 800447c:	493e      	ldr	r1, [pc, #248]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	0013      	movs	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	5c5b      	ldrb	r3, [r3, r1]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d123      	bne.n	80044d6 <Sprite_Missle_Draw+0x142>
        	ssd1306_DrawBitmap(mPlayerMissile[i].last_x, mPlayerMissile[i].last_y, _acmissile1Bmp, 8, 8, Black);        	mPlayerMissile[i].life = 0;
 800448e:	493a      	ldr	r1, [pc, #232]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	0013      	movs	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	18cb      	adds	r3, r1, r3
 800449c:	3308      	adds	r3, #8
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	b2d8      	uxtb	r0, r3
 80044a2:	4935      	ldr	r1, [pc, #212]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	0013      	movs	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	18cb      	adds	r3, r1, r3
 80044b0:	3310      	adds	r3, #16
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	b2d9      	uxtb	r1, r3
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2308      	movs	r3, #8
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2308      	movs	r3, #8
 80044c2:	f7fd f819 	bl	80014f8 <ssd1306_DrawBitmap>
 80044c6:	492c      	ldr	r1, [pc, #176]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	0013      	movs	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	2200      	movs	r2, #0
 80044d4:	545a      	strb	r2, [r3, r1]
        }
        if (mPlayerMissile[i].life == 1){
 80044d6:	4928      	ldr	r1, [pc, #160]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	0013      	movs	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	5c5b      	ldrb	r3, [r3, r1]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d137      	bne.n	8004558 <Sprite_Missle_Draw+0x1c4>
        	ssd1306_DrawBitmap(mPlayerMissile[i].last_x, mPlayerMissile[i].last_y, _acmissile1Bmp, 8, 8, Black);
 80044e8:	4923      	ldr	r1, [pc, #140]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	0013      	movs	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18cb      	adds	r3, r1, r3
 80044f6:	3308      	adds	r3, #8
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	b2d8      	uxtb	r0, r3
 80044fc:	491e      	ldr	r1, [pc, #120]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	0013      	movs	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	18cb      	adds	r3, r1, r3
 800450a:	3310      	adds	r3, #16
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b2d9      	uxtb	r1, r3
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 8004512:	2300      	movs	r3, #0
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	2308      	movs	r3, #8
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2308      	movs	r3, #8
 800451c:	f7fc ffec 	bl	80014f8 <ssd1306_DrawBitmap>
        	ssd1306_DrawBitmap(mPlayerMissile[i].x, mPlayerMissile[i].y, _acmissile1Bmp, 8, 8, White);
 8004520:	4915      	ldr	r1, [pc, #84]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	0013      	movs	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	18cb      	adds	r3, r1, r3
 800452e:	3304      	adds	r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b2d8      	uxtb	r0, r3
 8004534:	4910      	ldr	r1, [pc, #64]	; (8004578 <Sprite_Missle_Draw+0x1e4>)
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	0013      	movs	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	18cb      	adds	r3, r1, r3
 8004542:	330c      	adds	r3, #12
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b2d9      	uxtb	r1, r3
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <Sprite_Missle_Draw+0x1e0>)
 800454a:	2301      	movs	r3, #1
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	2308      	movs	r3, #8
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2308      	movs	r3, #8
 8004554:	f7fc ffd0 	bl	80014f8 <ssd1306_DrawBitmap>
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b07      	cmp	r3, #7
 8004562:	dc00      	bgt.n	8004566 <Sprite_Missle_Draw+0x1d2>
 8004564:	e71c      	b.n	80043a0 <Sprite_Missle_Draw+0xc>
        }
    }
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000638 	.word	0x20000638
 8004574:	08006de8 	.word	0x08006de8
 8004578:	20000718 	.word	0x20000718

0800457c <Sprite_Missile_Init>:
void Sprite_Missile_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	e052      	b.n	800462e <Sprite_Missile_Init+0xb2>
    {
    	//khởi tạo tên lửa địch
        mEnemyMissile[i].x = 0;
 8004588:	492d      	ldr	r1, [pc, #180]	; (8004640 <Sprite_Missile_Init+0xc4>)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	0013      	movs	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	18cb      	adds	r3, r1, r3
 8004596:	3304      	adds	r3, #4
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
        mEnemyMissile[i].last_x = 99;
 800459c:	4928      	ldr	r1, [pc, #160]	; (8004640 <Sprite_Missile_Init+0xc4>)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	0013      	movs	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	18cb      	adds	r3, r1, r3
 80045aa:	3308      	adds	r3, #8
 80045ac:	2263      	movs	r2, #99	; 0x63
 80045ae:	601a      	str	r2, [r3, #0]
        mEnemyMissile[i].y = 0;
 80045b0:	4923      	ldr	r1, [pc, #140]	; (8004640 <Sprite_Missile_Init+0xc4>)
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	0013      	movs	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	18cb      	adds	r3, r1, r3
 80045be:	330c      	adds	r3, #12
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
        mEnemyMissile[i].last_y = 99;
 80045c4:	491e      	ldr	r1, [pc, #120]	; (8004640 <Sprite_Missile_Init+0xc4>)
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	0013      	movs	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	18cb      	adds	r3, r1, r3
 80045d2:	3310      	adds	r3, #16
 80045d4:	2263      	movs	r2, #99	; 0x63
 80045d6:	601a      	str	r2, [r3, #0]

        //khởi tạo tên người chơi
        mPlayerMissile[i].x = 0;
 80045d8:	491a      	ldr	r1, [pc, #104]	; (8004644 <Sprite_Missile_Init+0xc8>)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0013      	movs	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18cb      	adds	r3, r1, r3
 80045e6:	3304      	adds	r3, #4
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
        mPlayerMissile[i].last_x = 99;
 80045ec:	4915      	ldr	r1, [pc, #84]	; (8004644 <Sprite_Missile_Init+0xc8>)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	0013      	movs	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	18cb      	adds	r3, r1, r3
 80045fa:	3308      	adds	r3, #8
 80045fc:	2263      	movs	r2, #99	; 0x63
 80045fe:	601a      	str	r2, [r3, #0]
        mPlayerMissile[i].y = 0;
 8004600:	4910      	ldr	r1, [pc, #64]	; (8004644 <Sprite_Missile_Init+0xc8>)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	0013      	movs	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	18cb      	adds	r3, r1, r3
 800460e:	330c      	adds	r3, #12
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
        mPlayerMissile[i].last_y = 99;
 8004614:	490b      	ldr	r1, [pc, #44]	; (8004644 <Sprite_Missile_Init+0xc8>)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	0013      	movs	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	18cb      	adds	r3, r1, r3
 8004622:	3310      	adds	r3, #16
 8004624:	2263      	movs	r2, #99	; 0x63
 8004626:	601a      	str	r2, [r3, #0]
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b07      	cmp	r3, #7
 8004632:	dda9      	ble.n	8004588 <Sprite_Missile_Init+0xc>
    }
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	20000638 	.word	0x20000638
 8004644:	20000718 	.word	0x20000718

08004648 <Sprite_Missle_Move>:

void Sprite_Missle_Move(void)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
    uint16_t mX, mY, bot, top, left, right = 0x00;
 800464e:	230e      	movs	r3, #14
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2200      	movs	r2, #0
 8004654:	801a      	strh	r2, [r3, #0]

    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e267      	b.n	8004b2c <Sprite_Missle_Move+0x4e4>
    {
    	/****************Lưu tọa độ cũ của tên lửa*************/
    	if (mPlayerMissile[i].life == 1) {
 800465c:	497c      	ldr	r1, [pc, #496]	; (8004850 <Sprite_Missle_Move+0x208>)
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	0013      	movs	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	5c5b      	ldrb	r3, [r3, r1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d14b      	bne.n	8004706 <Sprite_Missle_Move+0xbe>
			if (mPlayerMissile[i].last_x != mPlayerMissile[i].x){
 800466e:	4978      	ldr	r1, [pc, #480]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	0013      	movs	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	18cb      	adds	r3, r1, r3
 800467c:	3308      	adds	r3, #8
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	4873      	ldr	r0, [pc, #460]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	0013      	movs	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	18c3      	adds	r3, r0, r3
 800468e:	3304      	adds	r3, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4299      	cmp	r1, r3
 8004694:	d011      	beq.n	80046ba <Sprite_Missle_Move+0x72>
				mPlayerMissile[i].last_x = mPlayerMissile[i].x;}
 8004696:	496e      	ldr	r1, [pc, #440]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	0013      	movs	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	18cb      	adds	r3, r1, r3
 80046a4:	3304      	adds	r3, #4
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	4869      	ldr	r0, [pc, #420]	; (8004850 <Sprite_Missle_Move+0x208>)
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	0013      	movs	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	18c3      	adds	r3, r0, r3
 80046b6:	3308      	adds	r3, #8
 80046b8:	6019      	str	r1, [r3, #0]
			if (mPlayerMissile[i].last_y != mPlayerMissile[i].y){
 80046ba:	4965      	ldr	r1, [pc, #404]	; (8004850 <Sprite_Missle_Move+0x208>)
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	0013      	movs	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18cb      	adds	r3, r1, r3
 80046c8:	3310      	adds	r3, #16
 80046ca:	6819      	ldr	r1, [r3, #0]
 80046cc:	4860      	ldr	r0, [pc, #384]	; (8004850 <Sprite_Missle_Move+0x208>)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	0013      	movs	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	18c3      	adds	r3, r0, r3
 80046da:	330c      	adds	r3, #12
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4299      	cmp	r1, r3
 80046e0:	d011      	beq.n	8004706 <Sprite_Missle_Move+0xbe>
				mPlayerMissile[i].last_y = mPlayerMissile[i].y;}
 80046e2:	495b      	ldr	r1, [pc, #364]	; (8004850 <Sprite_Missle_Move+0x208>)
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	0013      	movs	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	18cb      	adds	r3, r1, r3
 80046f0:	330c      	adds	r3, #12
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	4856      	ldr	r0, [pc, #344]	; (8004850 <Sprite_Missle_Move+0x208>)
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	0013      	movs	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	18c3      	adds	r3, r0, r3
 8004702:	3310      	adds	r3, #16
 8004704:	6019      	str	r1, [r3, #0]
		}
    	if (mEnemyMissile[i].life == 1) {
 8004706:	4953      	ldr	r1, [pc, #332]	; (8004854 <Sprite_Missle_Move+0x20c>)
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	0013      	movs	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	5c5b      	ldrb	r3, [r3, r1]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d14b      	bne.n	80047b0 <Sprite_Missle_Move+0x168>
			if (mEnemyMissile[i].last_x != mEnemyMissile[i].x){
 8004718:	494e      	ldr	r1, [pc, #312]	; (8004854 <Sprite_Missle_Move+0x20c>)
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	0013      	movs	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	18cb      	adds	r3, r1, r3
 8004726:	3308      	adds	r3, #8
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	484a      	ldr	r0, [pc, #296]	; (8004854 <Sprite_Missle_Move+0x20c>)
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	0013      	movs	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	18c3      	adds	r3, r0, r3
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4299      	cmp	r1, r3
 800473e:	d011      	beq.n	8004764 <Sprite_Missle_Move+0x11c>
				mEnemyMissile[i].last_x = mEnemyMissile[i].x;}
 8004740:	4944      	ldr	r1, [pc, #272]	; (8004854 <Sprite_Missle_Move+0x20c>)
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	0013      	movs	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	18cb      	adds	r3, r1, r3
 800474e:	3304      	adds	r3, #4
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	4840      	ldr	r0, [pc, #256]	; (8004854 <Sprite_Missle_Move+0x20c>)
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	0013      	movs	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	18c3      	adds	r3, r0, r3
 8004760:	3308      	adds	r3, #8
 8004762:	6019      	str	r1, [r3, #0]
			if (mEnemyMissile[i].last_y != mEnemyMissile[i].y){
 8004764:	493b      	ldr	r1, [pc, #236]	; (8004854 <Sprite_Missle_Move+0x20c>)
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	0013      	movs	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	18cb      	adds	r3, r1, r3
 8004772:	3310      	adds	r3, #16
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	4837      	ldr	r0, [pc, #220]	; (8004854 <Sprite_Missle_Move+0x20c>)
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	0013      	movs	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	18c3      	adds	r3, r0, r3
 8004784:	330c      	adds	r3, #12
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4299      	cmp	r1, r3
 800478a:	d011      	beq.n	80047b0 <Sprite_Missle_Move+0x168>
				mEnemyMissile[i].last_y = mEnemyMissile[i].y;}
 800478c:	4931      	ldr	r1, [pc, #196]	; (8004854 <Sprite_Missle_Move+0x20c>)
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	0013      	movs	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	18cb      	adds	r3, r1, r3
 800479a:	330c      	adds	r3, #12
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	482d      	ldr	r0, [pc, #180]	; (8004854 <Sprite_Missle_Move+0x20c>)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	0013      	movs	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	18c3      	adds	r3, r0, r3
 80047ac:	3310      	adds	r3, #16
 80047ae:	6019      	str	r1, [r3, #0]
		}
        /******************************************************/

    	/*****************TÊN LỬA CỦA NGƯỜI CHƠI**************/
    	//tên lửa người chơi còn "sống" và ở trong màn hình -> đi lên
        if ((mPlayerMissile[i].life == 1) && (mPlayerMissile[i].y > SPRITE_MIN_Y))
 80047b0:	4927      	ldr	r1, [pc, #156]	; (8004850 <Sprite_Missle_Move+0x208>)
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	0013      	movs	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	5c5b      	ldrb	r3, [r3, r1]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d11d      	bne.n	80047fe <Sprite_Missle_Move+0x1b6>
 80047c2:	4923      	ldr	r1, [pc, #140]	; (8004850 <Sprite_Missle_Move+0x208>)
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	0013      	movs	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	18cb      	adds	r3, r1, r3
 80047d0:	330c      	adds	r3, #12
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <Sprite_Missle_Move+0x1b6>
            mPlayerMissile[i].y-=2;
 80047d8:	491d      	ldr	r1, [pc, #116]	; (8004850 <Sprite_Missle_Move+0x208>)
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	0013      	movs	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18cb      	adds	r3, r1, r3
 80047e6:	330c      	adds	r3, #12
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1e99      	subs	r1, r3, #2
 80047ec:	4818      	ldr	r0, [pc, #96]	; (8004850 <Sprite_Missle_Move+0x208>)
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	0013      	movs	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	18c3      	adds	r3, r0, r3
 80047fa:	330c      	adds	r3, #12
 80047fc:	6019      	str	r1, [r3, #0]

        //tên lửa người chơi còn "sống" ra ngoài màn hình
        if ((mPlayerMissile[i].life == 1) && (mPlayerMissile[i].y <= SPRITE_MIN_Y))
 80047fe:	4914      	ldr	r1, [pc, #80]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	0013      	movs	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	5c5b      	ldrb	r3, [r3, r1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d112      	bne.n	8004836 <Sprite_Missle_Move+0x1ee>
 8004810:	490f      	ldr	r1, [pc, #60]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	0013      	movs	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	18cb      	adds	r3, r1, r3
 800481e:	330c      	adds	r3, #12
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <Sprite_Missle_Move+0x1ee>
            mPlayerMissile[i].life = 0;
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	0013      	movs	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	2200      	movs	r2, #0
 8004834:	545a      	strb	r2, [r3, r1]
        //for each live enemy, check the x and y position of the missle, top
        //center of the missile within the enemy box
        //
        //Add player missile hit the drone
        //
        if (mPlayerMissile[i].life == 1)
 8004836:	4906      	ldr	r1, [pc, #24]	; (8004850 <Sprite_Missle_Move+0x208>)
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	0013      	movs	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	5c5b      	ldrb	r3, [r3, r1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d000      	beq.n	800484a <Sprite_Missle_Move+0x202>
 8004848:	e09d      	b.n	8004986 <Sprite_Missle_Move+0x33e>
        {
        	//tên lửa người chơi bắn trúng kẻ địch
            for (int j = 0 ; j < NUM_ENEMY ; j++)
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e096      	b.n	800497e <Sprite_Missle_Move+0x336>
 8004850:	20000718 	.word	0x20000718
 8004854:	20000638 	.word	0x20000638
            {
                //kẻ địch còn sống
                if (mEnemy[j].life == 1)
 8004858:	4bb9      	ldr	r3, [pc, #740]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	0152      	lsls	r2, r2, #5
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d000      	beq.n	8004866 <Sprite_Missle_Move+0x21e>
 8004864:	e088      	b.n	8004978 <Sprite_Missle_Move+0x330>
                {
                    mX = mPlayerMissile[i].x + (mPlayerMissile[i].sizeX / 2);
 8004866:	49b7      	ldr	r1, [pc, #732]	; (8004b44 <Sprite_Missle_Move+0x4fc>)
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	0013      	movs	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18cb      	adds	r3, r1, r3
 8004874:	3304      	adds	r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b299      	uxth	r1, r3
 800487a:	48b2      	ldr	r0, [pc, #712]	; (8004b44 <Sprite_Missle_Move+0x4fc>)
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	0013      	movs	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	18c3      	adds	r3, r0, r3
 8004888:	3314      	adds	r3, #20
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	200c      	movs	r0, #12
 8004892:	183b      	adds	r3, r7, r0
 8004894:	188a      	adds	r2, r1, r2
 8004896:	801a      	strh	r2, [r3, #0]
                    mY = mPlayerMissile[i].y;
 8004898:	49aa      	ldr	r1, [pc, #680]	; (8004b44 <Sprite_Missle_Move+0x4fc>)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	0013      	movs	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	18cb      	adds	r3, r1, r3
 80048a6:	330c      	adds	r3, #12
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	240a      	movs	r4, #10
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	801a      	strh	r2, [r3, #0]
                    bot = mEnemy[j].y + mEnemy[j].sizeY - ENEMY_IMAGE_PADDING;
 80048b0:	4aa3      	ldr	r2, [pc, #652]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015b      	lsls	r3, r3, #5
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	330c      	adds	r3, #12
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	49a0      	ldr	r1, [pc, #640]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	18cb      	adds	r3, r1, r3
 80048c6:	3318      	adds	r3, #24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	18d3      	adds	r3, r2, r3
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	2508      	movs	r5, #8
 80048d2:	197b      	adds	r3, r7, r5
 80048d4:	3a02      	subs	r2, #2
 80048d6:	801a      	strh	r2, [r3, #0]
                    top = mEnemy[j].y + ENEMY_IMAGE_PADDING;
 80048d8:	4a99      	ldr	r2, [pc, #612]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	18d3      	adds	r3, r2, r3
 80048e0:	330c      	adds	r3, #12
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	1dbb      	adds	r3, r7, #6
 80048e8:	3202      	adds	r2, #2
 80048ea:	801a      	strh	r2, [r3, #0]
                    left = mEnemy[j].x + ENEMY_IMAGE_PADDING;
 80048ec:	4a94      	ldr	r2, [pc, #592]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015b      	lsls	r3, r3, #5
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	3304      	adds	r3, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	3202      	adds	r2, #2
 80048fe:	801a      	strh	r2, [r3, #0]
                    right = mEnemy[j].x + mEnemy[j].sizeX - ENEMY_IMAGE_PADDING;
 8004900:	4a8f      	ldr	r2, [pc, #572]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	015b      	lsls	r3, r3, #5
 8004906:	18d3      	adds	r3, r2, r3
 8004908:	3304      	adds	r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	498c      	ldr	r1, [pc, #560]	; (8004b40 <Sprite_Missle_Move+0x4f8>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015b      	lsls	r3, r3, #5
 8004914:	18cb      	adds	r3, r1, r3
 8004916:	3314      	adds	r3, #20
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	18d3      	adds	r3, r2, r3
 800491e:	b29a      	uxth	r2, r3
 8004920:	210e      	movs	r1, #14
 8004922:	187b      	adds	r3, r7, r1
 8004924:	3a02      	subs	r2, #2
 8004926:	801a      	strh	r2, [r3, #0]

                    //tính điểm cho bắn trúng - chưa làmc cập nhật điểm!!!
                    if ((mX >= left) && (mX <= right) && (mY <= bot) && (mY >= top))
 8004928:	183a      	adds	r2, r7, r0
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d321      	bcc.n	8004978 <Sprite_Missle_Move+0x330>
 8004934:	183a      	adds	r2, r7, r0
 8004936:	187b      	adds	r3, r7, r1
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d81b      	bhi.n	8004978 <Sprite_Missle_Move+0x330>
 8004940:	193a      	adds	r2, r7, r4
 8004942:	197b      	adds	r3, r7, r5
 8004944:	8812      	ldrh	r2, [r2, #0]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d815      	bhi.n	8004978 <Sprite_Missle_Move+0x330>
 800494c:	193a      	adds	r2, r7, r4
 800494e:	1dbb      	adds	r3, r7, #6
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d30f      	bcc.n	8004978 <Sprite_Missle_Move+0x330>
                    {
                    	//bắn trúng cập nhật trạng thái tên lửa người chơi &&
                    	//kẻ địch bị bắn trúng
                        int rem = Sprite_Score_EnemyHit(j, i);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f000 fa0a 	bl	8004d7c <Sprite_Score_EnemyHit>
 8004968:	0003      	movs	r3, r0
 800496a:	603b      	str	r3, [r7, #0]

                        //nếu !rem, tất cả kẻ địch đã chết -> WIN
                        if (!rem)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <Sprite_Missle_Move+0x330>
                        {
                            //có thể tạo hàm bật flag_win_game
                        	mGameWinFlag = 1;
 8004972:	4b75      	ldr	r3, [pc, #468]	; (8004b48 <Sprite_Missle_Move+0x500>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
            for (int j = 0 ; j < NUM_ENEMY ; j++)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3301      	adds	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b05      	cmp	r3, #5
 8004982:	dc00      	bgt.n	8004986 <Sprite_Missle_Move+0x33e>
 8004984:	e768      	b.n	8004858 <Sprite_Missle_Move+0x210>
        }


        ///////////////////////////////////////////////////
        //tên lửa của địch tiếp tục đi xuống màn hình
        if ((mEnemyMissile[i].life == 1) && ((mEnemyMissile[i].y + mEnemyMissile[i].sizeY) < SPRITE_MAX_Y))
 8004986:	4971      	ldr	r1, [pc, #452]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	0013      	movs	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	5c5b      	ldrb	r3, [r3, r1]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d127      	bne.n	80049e8 <Sprite_Missle_Move+0x3a0>
 8004998:	496c      	ldr	r1, [pc, #432]	; (8004b4c <Sprite_Missle_Move+0x504>)
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	0013      	movs	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	18cb      	adds	r3, r1, r3
 80049a6:	330c      	adds	r3, #12
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	4868      	ldr	r0, [pc, #416]	; (8004b4c <Sprite_Missle_Move+0x504>)
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	0013      	movs	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	18c3      	adds	r3, r0, r3
 80049b8:	3318      	adds	r3, #24
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	18cb      	adds	r3, r1, r3
 80049be:	2b31      	cmp	r3, #49	; 0x31
 80049c0:	d812      	bhi.n	80049e8 <Sprite_Missle_Move+0x3a0>
            mEnemyMissile[i].y+=2;
 80049c2:	4962      	ldr	r1, [pc, #392]	; (8004b4c <Sprite_Missle_Move+0x504>)
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	0013      	movs	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	18cb      	adds	r3, r1, r3
 80049d0:	330c      	adds	r3, #12
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	1c99      	adds	r1, r3, #2
 80049d6:	485d      	ldr	r0, [pc, #372]	; (8004b4c <Sprite_Missle_Move+0x504>)
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	0013      	movs	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	18c3      	adds	r3, r0, r3
 80049e4:	330c      	adds	r3, #12
 80049e6:	6019      	str	r1, [r3, #0]

        //tên lửa của địch đi quá giới hạn màn hình
        if ((mEnemyMissile[i].life == 1) && ((mEnemyMissile[i].y + mEnemyMissile[i].sizeY) >= SPRITE_MAX_Y))
 80049e8:	4958      	ldr	r1, [pc, #352]	; (8004b4c <Sprite_Missle_Move+0x504>)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	0013      	movs	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	5c5b      	ldrb	r3, [r3, r1]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d11c      	bne.n	8004a34 <Sprite_Missle_Move+0x3ec>
 80049fa:	4954      	ldr	r1, [pc, #336]	; (8004b4c <Sprite_Missle_Move+0x504>)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	0013      	movs	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	18cb      	adds	r3, r1, r3
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	484f      	ldr	r0, [pc, #316]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	0013      	movs	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	18c3      	adds	r3, r0, r3
 8004a1a:	3318      	adds	r3, #24
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	18cb      	adds	r3, r1, r3
 8004a20:	2b31      	cmp	r3, #49	; 0x31
 8004a22:	d907      	bls.n	8004a34 <Sprite_Missle_Move+0x3ec>
            mEnemyMissile[i].life = 2;//lưu = 2 để còn xóa vị trí cũ
 8004a24:	4949      	ldr	r1, [pc, #292]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	0013      	movs	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	2202      	movs	r2, #2
 8004a32:	545a      	strb	r2, [r3, r1]

        //tên lửa kẻ địch bắn trúng người chơi
        if (mEnemyMissile[i].life == 1)
 8004a34:	4945      	ldr	r1, [pc, #276]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	0013      	movs	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	5c5b      	ldrb	r3, [r3, r1]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d16f      	bne.n	8004b26 <Sprite_Missle_Move+0x4de>
        {
            mX = mEnemyMissile[i].x + (mEnemyMissile[i].sizeX / 2);
 8004a46:	4941      	ldr	r1, [pc, #260]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	18cb      	adds	r3, r1, r3
 8004a54:	3304      	adds	r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b299      	uxth	r1, r3
 8004a5a:	483c      	ldr	r0, [pc, #240]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	0013      	movs	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	18c3      	adds	r3, r0, r3
 8004a68:	3314      	adds	r3, #20
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	240c      	movs	r4, #12
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	188a      	adds	r2, r1, r2
 8004a76:	801a      	strh	r2, [r3, #0]
            mY = mEnemyMissile[i].y + mEnemyMissile[i].sizeY;
 8004a78:	4934      	ldr	r1, [pc, #208]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	18cb      	adds	r3, r1, r3
 8004a86:	330c      	adds	r3, #12
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	482f      	ldr	r0, [pc, #188]	; (8004b4c <Sprite_Missle_Move+0x504>)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	0013      	movs	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	18c3      	adds	r3, r0, r3
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	200a      	movs	r0, #10
 8004aa2:	183b      	adds	r3, r7, r0
 8004aa4:	188a      	adds	r2, r1, r2
 8004aa6:	801a      	strh	r2, [r3, #0]

            bot = mPlayer.y + mPlayer.sizeY - PLAYER_IMAGE_PADDING;
 8004aa8:	4b29      	ldr	r3, [pc, #164]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	18d3      	adds	r3, r2, r3
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	2108      	movs	r1, #8
 8004aba:	187b      	adds	r3, r7, r1
 8004abc:	3a02      	subs	r2, #2
 8004abe:	801a      	strh	r2, [r3, #0]
            top = mPlayer.y + PLAYER_IMAGE_PADDING;
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	1dbb      	adds	r3, r7, #6
 8004ac8:	3202      	adds	r2, #2
 8004aca:	801a      	strh	r2, [r3, #0]
            left = mPlayer.x + PLAYER_IMAGE_PADDING;
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	3202      	adds	r2, #2
 8004ad6:	801a      	strh	r2, [r3, #0]
            right = mPlayer.x + mPlayer.sizeX - PLAYER_IMAGE_PADDING;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <Sprite_Missle_Move+0x508>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	18d3      	adds	r3, r2, r3
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	250e      	movs	r5, #14
 8004aea:	197b      	adds	r3, r7, r5
 8004aec:	3a02      	subs	r2, #2
 8004aee:	801a      	strh	r2, [r3, #0]

            if ((mX >= left) && (mX <= right) && (mY <= bot) && (mY >= top))
 8004af0:	193a      	adds	r2, r7, r4
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d314      	bcc.n	8004b26 <Sprite_Missle_Move+0x4de>
 8004afc:	193a      	adds	r2, r7, r4
 8004afe:	197b      	adds	r3, r7, r5
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d80e      	bhi.n	8004b26 <Sprite_Missle_Move+0x4de>
 8004b08:	183a      	adds	r2, r7, r0
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d808      	bhi.n	8004b26 <Sprite_Missle_Move+0x4de>
 8004b14:	183a      	adds	r2, r7, r0
 8004b16:	1dbb      	adds	r3, r7, #6
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <Sprite_Missle_Move+0x4de>
            {
            	mGameOverFlag = 1;
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <Sprite_Missle_Move+0x50c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b07      	cmp	r3, #7
 8004b30:	dc00      	bgt.n	8004b34 <Sprite_Missle_Move+0x4ec>
 8004b32:	e593      	b.n	800465c <Sprite_Missle_Move+0x14>
            	//cần làm hàm trạng thái chết: tương tự trạng thái win
            	//nên test trước trạng thái win
            }
        }
    }
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b006      	add	sp, #24
 8004b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	20000578 	.word	0x20000578
 8004b44:	20000718 	.word	0x20000718
 8004b48:	200007f9 	.word	0x200007f9
 8004b4c:	20000638 	.word	0x20000638
 8004b50:	20000564 	.word	0x20000564
 8004b54:	200007f8 	.word	0x200007f8

08004b58 <Sprite_Player_Missle_Launch>:

void Sprite_Player_Missle_Launch(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
    int nextMissile = Sprite_Player_GetNextMissile();
 8004b5e:	f000 f841 	bl	8004be4 <Sprite_Player_GetNextMissile>
 8004b62:	0003      	movs	r3, r0
 8004b64:	607b      	str	r3, [r7, #4]

    //tạo mới tên lửa người chơi trong mảng
    mPlayerMissile[nextMissile].life = 1;
 8004b66:	491d      	ldr	r1, [pc, #116]	; (8004bdc <Sprite_Player_Missle_Launch+0x84>)
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	2201      	movs	r2, #1
 8004b74:	545a      	strb	r2, [r3, r1]
    mPlayerMissile[nextMissile].x = mPlayer.x + (mPlayer.sizeX / 2) - (mPlayerMissile[nextMissile].sizeX / 2);
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <Sprite_Player_Missle_Launch+0x88>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <Sprite_Player_Missle_Launch+0x88>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	18d1      	adds	r1, r2, r3
 8004b82:	4816      	ldr	r0, [pc, #88]	; (8004bdc <Sprite_Player_Missle_Launch+0x84>)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	0013      	movs	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18c3      	adds	r3, r0, r3
 8004b90:	3314      	adds	r3, #20
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	1ac9      	subs	r1, r1, r3
 8004b98:	4810      	ldr	r0, [pc, #64]	; (8004bdc <Sprite_Player_Missle_Launch+0x84>)
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	18c3      	adds	r3, r0, r3
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	6019      	str	r1, [r3, #0]
    mPlayerMissile[nextMissile].y = mPlayer.y - mPlayerMissile[nextMissile].sizeY;
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <Sprite_Player_Missle_Launch+0x88>)
 8004bac:	6899      	ldr	r1, [r3, #8]
 8004bae:	480b      	ldr	r0, [pc, #44]	; (8004bdc <Sprite_Player_Missle_Launch+0x84>)
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	0013      	movs	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	18c3      	adds	r3, r0, r3
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1ac9      	subs	r1, r1, r3
 8004bc2:	4806      	ldr	r0, [pc, #24]	; (8004bdc <Sprite_Player_Missle_Launch+0x84>)
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	0013      	movs	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	18c3      	adds	r3, r0, r3
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6019      	str	r1, [r3, #0]

    //bật âm thanh bắn (chưa lm đc)
    //Sound_Play_PlayerFire();
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000718 	.word	0x20000718
 8004be0:	20000564 	.word	0x20000564

08004be4 <Sprite_Player_GetNextMissile>:

int Sprite_Player_GetNextMissile(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e00d      	b.n	8004c0c <Sprite_Player_GetNextMissile+0x28>
    {
        if (!(mPlayerMissile[i].life))
 8004bf0:	490b      	ldr	r1, [pc, #44]	; (8004c20 <Sprite_Player_GetNextMissile+0x3c>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	5c5b      	ldrb	r3, [r3, r1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <Sprite_Player_GetNextMissile+0x22>
            return i;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	e007      	b.n	8004c16 <Sprite_Player_GetNextMissile+0x32>
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b07      	cmp	r3, #7
 8004c10:	ddee      	ble.n	8004bf0 <Sprite_Player_GetNextMissile+0xc>
    }
    return - 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	425b      	negs	r3, r3
}
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	20000718 	.word	0x20000718

08004c24 <Sprite_Enemy_Missle_Launch>:

void Sprite_Enemy_Missle_Launch(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
    int nextMissile = Sprite_Enemy_GetNextMissile();    //next missile
 8004c2a:	f000 f851 	bl	8004cd0 <Sprite_Enemy_GetNextMissile>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	607b      	str	r3, [r7, #4]
    int index = Sprite_GetRandomEnemy();                //index of random enemy
 8004c32:	f000 f86d 	bl	8004d10 <Sprite_GetRandomEnemy>
 8004c36:	0003      	movs	r3, r0
 8004c38:	603b      	str	r3, [r7, #0]

    if (index >= 0)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db3f      	blt.n	8004cc0 <Sprite_Enemy_Missle_Launch+0x9c>
    {
    	//tạo mới tên lửa kẻ địch trong mảng
        mEnemyMissile[nextMissile].life = 1;
 8004c40:	4921      	ldr	r1, [pc, #132]	; (8004cc8 <Sprite_Enemy_Missle_Launch+0xa4>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	0013      	movs	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	545a      	strb	r2, [r3, r1]
        mEnemyMissile[nextMissile].x = mEnemy[index].x + (mEnemy[index].sizeX / 2) - (mEnemyMissile[nextMissile].sizeX / 2);
 8004c50:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <Sprite_Enemy_Missle_Launch+0xa8>)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	015b      	lsls	r3, r3, #5
 8004c56:	18d3      	adds	r3, r2, r3
 8004c58:	3304      	adds	r3, #4
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	491b      	ldr	r1, [pc, #108]	; (8004ccc <Sprite_Enemy_Missle_Launch+0xa8>)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	015b      	lsls	r3, r3, #5
 8004c62:	18cb      	adds	r3, r1, r3
 8004c64:	3314      	adds	r3, #20
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	18d1      	adds	r1, r2, r3
 8004c6c:	4816      	ldr	r0, [pc, #88]	; (8004cc8 <Sprite_Enemy_Missle_Launch+0xa4>)
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	0013      	movs	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18c3      	adds	r3, r0, r3
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	1ac9      	subs	r1, r1, r3
 8004c82:	4811      	ldr	r0, [pc, #68]	; (8004cc8 <Sprite_Enemy_Missle_Launch+0xa4>)
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	0013      	movs	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	18c3      	adds	r3, r0, r3
 8004c90:	3304      	adds	r3, #4
 8004c92:	6019      	str	r1, [r3, #0]
        mEnemyMissile[nextMissile].y = mEnemy[index].y + mEnemy[index].sizeY;
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <Sprite_Enemy_Missle_Launch+0xa8>)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	015b      	lsls	r3, r3, #5
 8004c9a:	18d3      	adds	r3, r2, r3
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	490a      	ldr	r1, [pc, #40]	; (8004ccc <Sprite_Enemy_Missle_Launch+0xa8>)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	015b      	lsls	r3, r3, #5
 8004ca6:	18cb      	adds	r3, r1, r3
 8004ca8:	3318      	adds	r3, #24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	18d1      	adds	r1, r2, r3
 8004cae:	4806      	ldr	r0, [pc, #24]	; (8004cc8 <Sprite_Enemy_Missle_Launch+0xa4>)
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	0013      	movs	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	18c3      	adds	r3, r0, r3
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	6019      	str	r1, [r3, #0]
        //bật âm thanh bắn (chưa lm đc)
        //Sound_Play_EnemyFire();
    }

}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000638 	.word	0x20000638
 8004ccc:	20000578 	.word	0x20000578

08004cd0 <Sprite_Enemy_GetNextMissile>:

int Sprite_Enemy_GetNextMissile(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e00d      	b.n	8004cf8 <Sprite_Enemy_GetNextMissile+0x28>
    {
        if (!(mEnemyMissile[i].life))
 8004cdc:	490b      	ldr	r1, [pc, #44]	; (8004d0c <Sprite_Enemy_GetNextMissile+0x3c>)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	5c5b      	ldrb	r3, [r3, r1]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <Sprite_Enemy_GetNextMissile+0x22>
            return i;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	e007      	b.n	8004d02 <Sprite_Enemy_GetNextMissile+0x32>
    for (int i = 0 ; i < NUM_MISSILE ; i++)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	ddee      	ble.n	8004cdc <Sprite_Enemy_GetNextMissile+0xc>
    }
    return - 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	425b      	negs	r3, r3
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	20000638 	.word	0x20000638

08004d10 <Sprite_GetRandomEnemy>:

int Sprite_GetRandomEnemy(void)	//hàm random cần fix lại bằng việc sử dụng ADC
								//vì bản chất MCU không có hàm rand()
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
    int numEnemy = Sprite_GetNumEnemy();    //number of enemy
 8004d16:	f000 f87d 	bl	8004e14 <Sprite_GetNumEnemy>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	607b      	str	r3, [r7, #4]

    if (numEnemy > 0)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dd22      	ble.n	8004d6a <Sprite_GetRandomEnemy+0x5a>
    {
        int index = rand() % (numEnemy);
 8004d24:	f000 f8ee 	bl	8004f04 <rand>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fb fb65 	bl	80003fc <__aeabi_idivmod>
 8004d32:	000b      	movs	r3, r1
 8004d34:	603b      	str	r3, [r7, #0]
        int counter = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

        for (int i = 0 ; i < NUM_ENEMY ; i++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	e011      	b.n	8004d64 <Sprite_GetRandomEnemy+0x54>
        {
            if (mEnemy[i].life == 1)
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <Sprite_GetRandomEnemy+0x68>)
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	0152      	lsls	r2, r2, #5
 8004d46:	5cd3      	ldrb	r3, [r2, r3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d108      	bne.n	8004d5e <Sprite_GetRandomEnemy+0x4e>
            {
                if (index == counter)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d101      	bne.n	8004d58 <Sprite_GetRandomEnemy+0x48>
                    return counter;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	e00a      	b.n	8004d6e <Sprite_GetRandomEnemy+0x5e>
                counter++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
        for (int i = 0 ; i < NUM_ENEMY ; i++)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	ddea      	ble.n	8004d40 <Sprite_GetRandomEnemy+0x30>
            }
        }
    }
    return -1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	425b      	negs	r3, r3
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	20000578 	.word	0x20000578

08004d7c <Sprite_Score_EnemyHit>:

int Sprite_Score_EnemyHit(uint8_t enemyIndex, uint8_t missileIndex)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	0002      	movs	r2, r0
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	1c0a      	adds	r2, r1, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
    //Sound_Play_EnemyExplode();                                      //play sound
    mEnemy[enemyIndex].life = 2; //lưu = 2 để còn xóa ảnh cũ                                   //remove enemy
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <Sprite_Score_EnemyHit+0x90>)
 8004d94:	0152      	lsls	r2, r2, #5
 8004d96:	2102      	movs	r1, #2
 8004d98:	54d1      	strb	r1, [r2, r3]
    mEnemy[enemyIndex].horizDirection = SPRITE_DIRECTION_RIGHT;
 8004d9a:	1dfb      	adds	r3, r7, #7
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <Sprite_Score_EnemyHit+0x90>)
 8004da0:	015b      	lsls	r3, r3, #5
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	331e      	adds	r3, #30
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
    mEnemy[enemyIndex].vertDirection = SPRITE_VERTICAL_DOWN;
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <Sprite_Score_EnemyHit+0x90>)
 8004db0:	015b      	lsls	r3, r3, #5
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	331f      	adds	r3, #31
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]

    mPlayerMissile[missileIndex].life = 2;//lưu = 2 để còn xóa ảnh cũ
 8004dba:	1dbb      	adds	r3, r7, #6
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	4914      	ldr	r1, [pc, #80]	; (8004e10 <Sprite_Score_EnemyHit+0x94>)
 8004dc0:	0013      	movs	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	2202      	movs	r2, #2
 8004dca:	545a      	strb	r2, [r3, r1]
    mPlayerMissile[missileIndex].x = 0;
 8004dcc:	1dbb      	adds	r3, r7, #6
 8004dce:	781a      	ldrb	r2, [r3, #0]
 8004dd0:	490f      	ldr	r1, [pc, #60]	; (8004e10 <Sprite_Score_EnemyHit+0x94>)
 8004dd2:	0013      	movs	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	18cb      	adds	r3, r1, r3
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    mPlayerMissile[missileIndex].y = 0;
 8004de2:	1dbb      	adds	r3, r7, #6
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	490a      	ldr	r1, [pc, #40]	; (8004e10 <Sprite_Score_EnemyHit+0x94>)
 8004de8:	0013      	movs	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	18cb      	adds	r3, r1, r3
 8004df2:	330c      	adds	r3, #12
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

    int remaining = Sprite_GetNumEnemy();
 8004df8:	f000 f80c 	bl	8004e14 <Sprite_GetNumEnemy>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	60fb      	str	r3, [r7, #12]

    return remaining;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000578 	.word	0x20000578
 8004e10:	20000718 	.word	0x20000718

08004e14 <Sprite_GetNumEnemy>:

int Sprite_GetNumEnemy(void)//lấy số lượng địch còn sống
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
    int num = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
    for (int i = 0 ; i < NUM_ENEMY ; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	e00b      	b.n	8004e3c <Sprite_GetNumEnemy+0x28>
    {
        if (mEnemy[i].life == 1)
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <Sprite_GetNumEnemy+0x38>)
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	0152      	lsls	r2, r2, #5
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <Sprite_GetNumEnemy+0x22>
            num++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3301      	adds	r3, #1
 8004e34:	607b      	str	r3, [r7, #4]
    for (int i = 0 ; i < NUM_ENEMY ; i++)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	ddf0      	ble.n	8004e24 <Sprite_GetNumEnemy+0x10>
    }
    return num;
 8004e42:	687b      	ldr	r3, [r7, #4]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000578 	.word	0x20000578

08004e50 <Sprite_SetPlayerMissileLaunchFlag>:

void Sprite_SetPlayerMissileLaunchFlag(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
    mPlayerMissileLaunchFlag = 1;
 8004e54:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <Sprite_SetPlayerMissileLaunchFlag+0x10>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200007fa 	.word	0x200007fa

08004e64 <Sprite_GetPlayerMissileLaunchFlag>:

uint8_t Sprite_GetPlayerMissileLaunchFlag(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
    return mPlayerMissileLaunchFlag;
 8004e68:	4b02      	ldr	r3, [pc, #8]	; (8004e74 <Sprite_GetPlayerMissileLaunchFlag+0x10>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	200007fa 	.word	0x200007fa

08004e78 <Sprite_ClearPlayerMissileLaunchFlag>:

void Sprite_ClearPlayerMissileLaunchFlag(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
    mPlayerMissileLaunchFlag = 0;
 8004e7c:	4b02      	ldr	r3, [pc, #8]	; (8004e88 <Sprite_ClearPlayerMissileLaunchFlag+0x10>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200007fa 	.word	0x200007fa

08004e8c <check_WIN_GAME>:

uint8_t check_WIN_GAME(void){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	return mGameWinFlag;
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <check_WIN_GAME+0x10>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	200007f9 	.word	0x200007f9

08004ea0 <__errno>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <__errno+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	4770      	bx	lr
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	20000014 	.word	0x20000014

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	2600      	movs	r6, #0
 8004eb0:	4d0c      	ldr	r5, [pc, #48]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb2:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	f001 f8a7 	bl	8006010 <_init>
 8004ec2:	4d0a      	ldr	r5, [pc, #40]	; (8004eec <__libc_init_array+0x40>)
 8004ec4:	4c0a      	ldr	r4, [pc, #40]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec6:	1b64      	subs	r4, r4, r5
 8004ec8:	10a4      	asrs	r4, r4, #2
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	00b3      	lsls	r3, r6, #2
 8004ed2:	58eb      	ldr	r3, [r5, r3]
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	00b3      	lsls	r3, r6, #2
 8004edc:	58eb      	ldr	r3, [r5, r3]
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08006f40 	.word	0x08006f40
 8004ee8:	08006f40 	.word	0x08006f40
 8004eec:	08006f40 	.word	0x08006f40
 8004ef0:	08006f44 	.word	0x08006f44

08004ef4 <memset>:
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	1882      	adds	r2, r0, r2
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d100      	bne.n	8004efe <memset+0xa>
 8004efc:	4770      	bx	lr
 8004efe:	7019      	strb	r1, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	e7f9      	b.n	8004ef8 <memset+0x4>

08004f04 <rand>:
 8004f04:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <rand+0x5c>)
 8004f06:	b510      	push	{r4, lr}
 8004f08:	681c      	ldr	r4, [r3, #0]
 8004f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d116      	bne.n	8004f3e <rand+0x3a>
 8004f10:	2018      	movs	r0, #24
 8004f12:	f000 f863 	bl	8004fdc <malloc>
 8004f16:	1e02      	subs	r2, r0, #0
 8004f18:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f1a:	d104      	bne.n	8004f26 <rand+0x22>
 8004f1c:	214e      	movs	r1, #78	; 0x4e
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <rand+0x60>)
 8004f20:	4811      	ldr	r0, [pc, #68]	; (8004f68 <rand+0x64>)
 8004f22:	f000 f82d 	bl	8004f80 <__assert_func>
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <rand+0x68>)
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6003      	str	r3, [r0, #0]
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <rand+0x6c>)
 8004f2e:	6043      	str	r3, [r0, #4]
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <rand+0x70>)
 8004f32:	6083      	str	r3, [r0, #8]
 8004f34:	230b      	movs	r3, #11
 8004f36:	8183      	strh	r3, [r0, #12]
 8004f38:	2001      	movs	r0, #1
 8004f3a:	6110      	str	r0, [r2, #16]
 8004f3c:	6151      	str	r1, [r2, #20]
 8004f3e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <rand+0x74>)
 8004f42:	6920      	ldr	r0, [r4, #16]
 8004f44:	6961      	ldr	r1, [r4, #20]
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <rand+0x78>)
 8004f48:	f7fb fa7e 	bl	8000448 <__aeabi_lmul>
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2300      	movs	r3, #0
 8004f50:	1880      	adds	r0, r0, r2
 8004f52:	4159      	adcs	r1, r3
 8004f54:	6120      	str	r0, [r4, #16]
 8004f56:	6161      	str	r1, [r4, #20]
 8004f58:	0048      	lsls	r0, r1, #1
 8004f5a:	0840      	lsrs	r0, r0, #1
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	20000014 	.word	0x20000014
 8004f64:	08006df4 	.word	0x08006df4
 8004f68:	08006e0b 	.word	0x08006e0b
 8004f6c:	abcd330e 	.word	0xabcd330e
 8004f70:	e66d1234 	.word	0xe66d1234
 8004f74:	0005deec 	.word	0x0005deec
 8004f78:	4c957f2d 	.word	0x4c957f2d
 8004f7c:	5851f42d 	.word	0x5851f42d

08004f80 <__assert_func>:
 8004f80:	b530      	push	{r4, r5, lr}
 8004f82:	0014      	movs	r4, r2
 8004f84:	001a      	movs	r2, r3
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <__assert_func+0x2c>)
 8004f88:	0005      	movs	r5, r0
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	68d8      	ldr	r0, [r3, #12]
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <__assert_func+0x30>)
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d101      	bne.n	8004f9a <__assert_func+0x1a>
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <__assert_func+0x34>)
 8004f98:	001c      	movs	r4, r3
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	9100      	str	r1, [sp, #0]
 8004f9e:	002b      	movs	r3, r5
 8004fa0:	4905      	ldr	r1, [pc, #20]	; (8004fb8 <__assert_func+0x38>)
 8004fa2:	9402      	str	r4, [sp, #8]
 8004fa4:	f000 f80a 	bl	8004fbc <fiprintf>
 8004fa8:	f000 fcc8 	bl	800593c <abort>
 8004fac:	20000014 	.word	0x20000014
 8004fb0:	08006e66 	.word	0x08006e66
 8004fb4:	08006ea1 	.word	0x08006ea1
 8004fb8:	08006e73 	.word	0x08006e73

08004fbc <fiprintf>:
 8004fbc:	b40e      	push	{r1, r2, r3}
 8004fbe:	b503      	push	{r0, r1, lr}
 8004fc0:	0001      	movs	r1, r0
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <fiprintf+0x1c>)
 8004fc6:	cb04      	ldmia	r3!, {r2}
 8004fc8:	6800      	ldr	r0, [r0, #0]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	f000 f91a 	bl	8005204 <_vfiprintf_r>
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	b003      	add	sp, #12
 8004fd6:	4718      	bx	r3
 8004fd8:	20000014 	.word	0x20000014

08004fdc <malloc>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4b03      	ldr	r3, [pc, #12]	; (8004fec <malloc+0x10>)
 8004fe0:	0001      	movs	r1, r0
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f000 f870 	bl	80050c8 <_malloc_r>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	20000014 	.word	0x20000014

08004ff0 <_free_r>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	0005      	movs	r5, r0
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	d010      	beq.n	800501a <_free_r+0x2a>
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da00      	bge.n	8005002 <_free_r+0x12>
 8005000:	18e4      	adds	r4, r4, r3
 8005002:	0028      	movs	r0, r5
 8005004:	f000 feec 	bl	8005de0 <__malloc_lock>
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <_free_r+0x90>)
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <_free_r+0x2c>
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6014      	str	r4, [r2, #0]
 8005014:	0028      	movs	r0, r5
 8005016:	f000 feeb 	bl	8005df0 <__malloc_unlock>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	42a3      	cmp	r3, r4
 800501e:	d908      	bls.n	8005032 <_free_r+0x42>
 8005020:	6821      	ldr	r1, [r4, #0]
 8005022:	1860      	adds	r0, r4, r1
 8005024:	4283      	cmp	r3, r0
 8005026:	d1f3      	bne.n	8005010 <_free_r+0x20>
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	1841      	adds	r1, r0, r1
 800502e:	6021      	str	r1, [r4, #0]
 8005030:	e7ee      	b.n	8005010 <_free_r+0x20>
 8005032:	001a      	movs	r2, r3
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <_free_r+0x4e>
 800503a:	42a3      	cmp	r3, r4
 800503c:	d9f9      	bls.n	8005032 <_free_r+0x42>
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	1850      	adds	r0, r2, r1
 8005042:	42a0      	cmp	r0, r4
 8005044:	d10b      	bne.n	800505e <_free_r+0x6e>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1809      	adds	r1, r1, r0
 800504a:	1850      	adds	r0, r2, r1
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	4283      	cmp	r3, r0
 8005050:	d1e0      	bne.n	8005014 <_free_r+0x24>
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	1841      	adds	r1, r0, r1
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7da      	b.n	8005014 <_free_r+0x24>
 800505e:	42a0      	cmp	r0, r4
 8005060:	d902      	bls.n	8005068 <_free_r+0x78>
 8005062:	230c      	movs	r3, #12
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	e7d5      	b.n	8005014 <_free_r+0x24>
 8005068:	6821      	ldr	r1, [r4, #0]
 800506a:	1860      	adds	r0, r4, r1
 800506c:	4283      	cmp	r3, r0
 800506e:	d103      	bne.n	8005078 <_free_r+0x88>
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	1841      	adds	r1, r0, r1
 8005076:	6021      	str	r1, [r4, #0]
 8005078:	6063      	str	r3, [r4, #4]
 800507a:	6054      	str	r4, [r2, #4]
 800507c:	e7ca      	b.n	8005014 <_free_r+0x24>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	200007fc 	.word	0x200007fc

08005084 <sbrk_aligned>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4e0f      	ldr	r6, [pc, #60]	; (80050c4 <sbrk_aligned+0x40>)
 8005088:	000d      	movs	r5, r1
 800508a:	6831      	ldr	r1, [r6, #0]
 800508c:	0004      	movs	r4, r0
 800508e:	2900      	cmp	r1, #0
 8005090:	d102      	bne.n	8005098 <sbrk_aligned+0x14>
 8005092:	f000 fb73 	bl	800577c <_sbrk_r>
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	0029      	movs	r1, r5
 800509a:	0020      	movs	r0, r4
 800509c:	f000 fb6e 	bl	800577c <_sbrk_r>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d00a      	beq.n	80050ba <sbrk_aligned+0x36>
 80050a4:	2303      	movs	r3, #3
 80050a6:	1cc5      	adds	r5, r0, #3
 80050a8:	439d      	bics	r5, r3
 80050aa:	42a8      	cmp	r0, r5
 80050ac:	d007      	beq.n	80050be <sbrk_aligned+0x3a>
 80050ae:	1a29      	subs	r1, r5, r0
 80050b0:	0020      	movs	r0, r4
 80050b2:	f000 fb63 	bl	800577c <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d101      	bne.n	80050be <sbrk_aligned+0x3a>
 80050ba:	2501      	movs	r5, #1
 80050bc:	426d      	negs	r5, r5
 80050be:	0028      	movs	r0, r5
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	20000800 	.word	0x20000800

080050c8 <_malloc_r>:
 80050c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ca:	2203      	movs	r2, #3
 80050cc:	1ccb      	adds	r3, r1, #3
 80050ce:	4393      	bics	r3, r2
 80050d0:	3308      	adds	r3, #8
 80050d2:	0006      	movs	r6, r0
 80050d4:	001f      	movs	r7, r3
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d232      	bcs.n	8005140 <_malloc_r+0x78>
 80050da:	270c      	movs	r7, #12
 80050dc:	42b9      	cmp	r1, r7
 80050de:	d831      	bhi.n	8005144 <_malloc_r+0x7c>
 80050e0:	0030      	movs	r0, r6
 80050e2:	f000 fe7d 	bl	8005de0 <__malloc_lock>
 80050e6:	4d32      	ldr	r5, [pc, #200]	; (80051b0 <_malloc_r+0xe8>)
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	001c      	movs	r4, r3
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d12e      	bne.n	800514e <_malloc_r+0x86>
 80050f0:	0039      	movs	r1, r7
 80050f2:	0030      	movs	r0, r6
 80050f4:	f7ff ffc6 	bl	8005084 <sbrk_aligned>
 80050f8:	0004      	movs	r4, r0
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d11e      	bne.n	800513c <_malloc_r+0x74>
 80050fe:	682c      	ldr	r4, [r5, #0]
 8005100:	0025      	movs	r5, r4
 8005102:	2d00      	cmp	r5, #0
 8005104:	d14a      	bne.n	800519c <_malloc_r+0xd4>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	0029      	movs	r1, r5
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	0030      	movs	r0, r6
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f000 fb34 	bl	800577c <_sbrk_r>
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	4283      	cmp	r3, r0
 8005118:	d143      	bne.n	80051a2 <_malloc_r+0xda>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	3703      	adds	r7, #3
 800511e:	1aff      	subs	r7, r7, r3
 8005120:	2303      	movs	r3, #3
 8005122:	439f      	bics	r7, r3
 8005124:	3708      	adds	r7, #8
 8005126:	2f0c      	cmp	r7, #12
 8005128:	d200      	bcs.n	800512c <_malloc_r+0x64>
 800512a:	270c      	movs	r7, #12
 800512c:	0039      	movs	r1, r7
 800512e:	0030      	movs	r0, r6
 8005130:	f7ff ffa8 	bl	8005084 <sbrk_aligned>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d034      	beq.n	80051a2 <_malloc_r+0xda>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	19df      	adds	r7, r3, r7
 800513c:	6027      	str	r7, [r4, #0]
 800513e:	e013      	b.n	8005168 <_malloc_r+0xa0>
 8005140:	2b00      	cmp	r3, #0
 8005142:	dacb      	bge.n	80050dc <_malloc_r+0x14>
 8005144:	230c      	movs	r3, #12
 8005146:	2500      	movs	r5, #0
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	0028      	movs	r0, r5
 800514c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	1bd1      	subs	r1, r2, r7
 8005152:	d420      	bmi.n	8005196 <_malloc_r+0xce>
 8005154:	290b      	cmp	r1, #11
 8005156:	d917      	bls.n	8005188 <_malloc_r+0xc0>
 8005158:	19e2      	adds	r2, r4, r7
 800515a:	6027      	str	r7, [r4, #0]
 800515c:	42a3      	cmp	r3, r4
 800515e:	d111      	bne.n	8005184 <_malloc_r+0xbc>
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	6863      	ldr	r3, [r4, #4]
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	0030      	movs	r0, r6
 800516a:	0025      	movs	r5, r4
 800516c:	f000 fe40 	bl	8005df0 <__malloc_unlock>
 8005170:	2207      	movs	r2, #7
 8005172:	350b      	adds	r5, #11
 8005174:	1d23      	adds	r3, r4, #4
 8005176:	4395      	bics	r5, r2
 8005178:	1aea      	subs	r2, r5, r3
 800517a:	429d      	cmp	r5, r3
 800517c:	d0e5      	beq.n	800514a <_malloc_r+0x82>
 800517e:	1b5b      	subs	r3, r3, r5
 8005180:	50a3      	str	r3, [r4, r2]
 8005182:	e7e2      	b.n	800514a <_malloc_r+0x82>
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e7ec      	b.n	8005162 <_malloc_r+0x9a>
 8005188:	6862      	ldr	r2, [r4, #4]
 800518a:	42a3      	cmp	r3, r4
 800518c:	d101      	bne.n	8005192 <_malloc_r+0xca>
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	e7ea      	b.n	8005168 <_malloc_r+0xa0>
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	e7e8      	b.n	8005168 <_malloc_r+0xa0>
 8005196:	0023      	movs	r3, r4
 8005198:	6864      	ldr	r4, [r4, #4]
 800519a:	e7a7      	b.n	80050ec <_malloc_r+0x24>
 800519c:	002c      	movs	r4, r5
 800519e:	686d      	ldr	r5, [r5, #4]
 80051a0:	e7af      	b.n	8005102 <_malloc_r+0x3a>
 80051a2:	230c      	movs	r3, #12
 80051a4:	0030      	movs	r0, r6
 80051a6:	6033      	str	r3, [r6, #0]
 80051a8:	f000 fe22 	bl	8005df0 <__malloc_unlock>
 80051ac:	e7cd      	b.n	800514a <_malloc_r+0x82>
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	200007fc 	.word	0x200007fc

080051b4 <__sfputc_r>:
 80051b4:	6893      	ldr	r3, [r2, #8]
 80051b6:	b510      	push	{r4, lr}
 80051b8:	3b01      	subs	r3, #1
 80051ba:	6093      	str	r3, [r2, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da04      	bge.n	80051ca <__sfputc_r+0x16>
 80051c0:	6994      	ldr	r4, [r2, #24]
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	db07      	blt.n	80051d6 <__sfputc_r+0x22>
 80051c6:	290a      	cmp	r1, #10
 80051c8:	d005      	beq.n	80051d6 <__sfputc_r+0x22>
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	1c58      	adds	r0, r3, #1
 80051ce:	6010      	str	r0, [r2, #0]
 80051d0:	7019      	strb	r1, [r3, #0]
 80051d2:	0008      	movs	r0, r1
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	f000 fae3 	bl	80057a0 <__swbuf_r>
 80051da:	0001      	movs	r1, r0
 80051dc:	e7f9      	b.n	80051d2 <__sfputc_r+0x1e>

080051de <__sfputs_r>:
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e0:	0006      	movs	r6, r0
 80051e2:	000f      	movs	r7, r1
 80051e4:	0014      	movs	r4, r2
 80051e6:	18d5      	adds	r5, r2, r3
 80051e8:	42ac      	cmp	r4, r5
 80051ea:	d101      	bne.n	80051f0 <__sfputs_r+0x12>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e007      	b.n	8005200 <__sfputs_r+0x22>
 80051f0:	7821      	ldrb	r1, [r4, #0]
 80051f2:	003a      	movs	r2, r7
 80051f4:	0030      	movs	r0, r6
 80051f6:	f7ff ffdd 	bl	80051b4 <__sfputc_r>
 80051fa:	3401      	adds	r4, #1
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d1f3      	bne.n	80051e8 <__sfputs_r+0xa>
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005204 <_vfiprintf_r>:
 8005204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005206:	b0a1      	sub	sp, #132	; 0x84
 8005208:	0006      	movs	r6, r0
 800520a:	000c      	movs	r4, r1
 800520c:	001f      	movs	r7, r3
 800520e:	9203      	str	r2, [sp, #12]
 8005210:	2800      	cmp	r0, #0
 8005212:	d004      	beq.n	800521e <_vfiprintf_r+0x1a>
 8005214:	6983      	ldr	r3, [r0, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <_vfiprintf_r+0x1a>
 800521a:	f000 fcc5 	bl	8005ba8 <__sinit>
 800521e:	4b8e      	ldr	r3, [pc, #568]	; (8005458 <_vfiprintf_r+0x254>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d11c      	bne.n	800525e <_vfiprintf_r+0x5a>
 8005224:	6874      	ldr	r4, [r6, #4]
 8005226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005228:	07db      	lsls	r3, r3, #31
 800522a:	d405      	bmi.n	8005238 <_vfiprintf_r+0x34>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	059b      	lsls	r3, r3, #22
 8005230:	d402      	bmi.n	8005238 <_vfiprintf_r+0x34>
 8005232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005234:	f000 fd59 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	071b      	lsls	r3, r3, #28
 800523c:	d502      	bpl.n	8005244 <_vfiprintf_r+0x40>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11d      	bne.n	8005280 <_vfiprintf_r+0x7c>
 8005244:	0021      	movs	r1, r4
 8005246:	0030      	movs	r0, r6
 8005248:	f000 fb00 	bl	800584c <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d017      	beq.n	8005280 <_vfiprintf_r+0x7c>
 8005250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005252:	07db      	lsls	r3, r3, #31
 8005254:	d50d      	bpl.n	8005272 <_vfiprintf_r+0x6e>
 8005256:	2001      	movs	r0, #1
 8005258:	4240      	negs	r0, r0
 800525a:	b021      	add	sp, #132	; 0x84
 800525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <_vfiprintf_r+0x258>)
 8005260:	429c      	cmp	r4, r3
 8005262:	d101      	bne.n	8005268 <_vfiprintf_r+0x64>
 8005264:	68b4      	ldr	r4, [r6, #8]
 8005266:	e7de      	b.n	8005226 <_vfiprintf_r+0x22>
 8005268:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <_vfiprintf_r+0x25c>)
 800526a:	429c      	cmp	r4, r3
 800526c:	d1db      	bne.n	8005226 <_vfiprintf_r+0x22>
 800526e:	68f4      	ldr	r4, [r6, #12]
 8005270:	e7d9      	b.n	8005226 <_vfiprintf_r+0x22>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	059b      	lsls	r3, r3, #22
 8005276:	d4ee      	bmi.n	8005256 <_vfiprintf_r+0x52>
 8005278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527a:	f000 fd37 	bl	8005cec <__retarget_lock_release_recursive>
 800527e:	e7ea      	b.n	8005256 <_vfiprintf_r+0x52>
 8005280:	2300      	movs	r3, #0
 8005282:	ad08      	add	r5, sp, #32
 8005284:	616b      	str	r3, [r5, #20]
 8005286:	3320      	adds	r3, #32
 8005288:	766b      	strb	r3, [r5, #25]
 800528a:	3310      	adds	r3, #16
 800528c:	76ab      	strb	r3, [r5, #26]
 800528e:	9707      	str	r7, [sp, #28]
 8005290:	9f03      	ldr	r7, [sp, #12]
 8005292:	783b      	ldrb	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <_vfiprintf_r+0x98>
 8005298:	2b25      	cmp	r3, #37	; 0x25
 800529a:	d14e      	bne.n	800533a <_vfiprintf_r+0x136>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1afb      	subs	r3, r7, r3
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	429f      	cmp	r7, r3
 80052a6:	d00d      	beq.n	80052c4 <_vfiprintf_r+0xc0>
 80052a8:	9b05      	ldr	r3, [sp, #20]
 80052aa:	0021      	movs	r1, r4
 80052ac:	0030      	movs	r0, r6
 80052ae:	9a03      	ldr	r2, [sp, #12]
 80052b0:	f7ff ff95 	bl	80051de <__sfputs_r>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d100      	bne.n	80052ba <_vfiprintf_r+0xb6>
 80052b8:	e0b5      	b.n	8005426 <_vfiprintf_r+0x222>
 80052ba:	696a      	ldr	r2, [r5, #20]
 80052bc:	9b05      	ldr	r3, [sp, #20]
 80052be:	4694      	mov	ip, r2
 80052c0:	4463      	add	r3, ip
 80052c2:	616b      	str	r3, [r5, #20]
 80052c4:	783b      	ldrb	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d100      	bne.n	80052cc <_vfiprintf_r+0xc8>
 80052ca:	e0ac      	b.n	8005426 <_vfiprintf_r+0x222>
 80052cc:	2201      	movs	r2, #1
 80052ce:	1c7b      	adds	r3, r7, #1
 80052d0:	9303      	str	r3, [sp, #12]
 80052d2:	2300      	movs	r3, #0
 80052d4:	4252      	negs	r2, r2
 80052d6:	606a      	str	r2, [r5, #4]
 80052d8:	a904      	add	r1, sp, #16
 80052da:	3254      	adds	r2, #84	; 0x54
 80052dc:	1852      	adds	r2, r2, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	60eb      	str	r3, [r5, #12]
 80052e2:	60ab      	str	r3, [r5, #8]
 80052e4:	7013      	strb	r3, [r2, #0]
 80052e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	2205      	movs	r2, #5
 80052ec:	7819      	ldrb	r1, [r3, #0]
 80052ee:	485d      	ldr	r0, [pc, #372]	; (8005464 <_vfiprintf_r+0x260>)
 80052f0:	f000 fd6a 	bl	8005dc8 <memchr>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	1c5f      	adds	r7, r3, #1
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d120      	bne.n	800533e <_vfiprintf_r+0x13a>
 80052fc:	682a      	ldr	r2, [r5, #0]
 80052fe:	06d3      	lsls	r3, r2, #27
 8005300:	d504      	bpl.n	800530c <_vfiprintf_r+0x108>
 8005302:	2353      	movs	r3, #83	; 0x53
 8005304:	a904      	add	r1, sp, #16
 8005306:	185b      	adds	r3, r3, r1
 8005308:	2120      	movs	r1, #32
 800530a:	7019      	strb	r1, [r3, #0]
 800530c:	0713      	lsls	r3, r2, #28
 800530e:	d504      	bpl.n	800531a <_vfiprintf_r+0x116>
 8005310:	2353      	movs	r3, #83	; 0x53
 8005312:	a904      	add	r1, sp, #16
 8005314:	185b      	adds	r3, r3, r1
 8005316:	212b      	movs	r1, #43	; 0x2b
 8005318:	7019      	strb	r1, [r3, #0]
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b2a      	cmp	r3, #42	; 0x2a
 8005320:	d016      	beq.n	8005350 <_vfiprintf_r+0x14c>
 8005322:	2100      	movs	r1, #0
 8005324:	68eb      	ldr	r3, [r5, #12]
 8005326:	9f03      	ldr	r7, [sp, #12]
 8005328:	783a      	ldrb	r2, [r7, #0]
 800532a:	1c78      	adds	r0, r7, #1
 800532c:	3a30      	subs	r2, #48	; 0x30
 800532e:	4684      	mov	ip, r0
 8005330:	2a09      	cmp	r2, #9
 8005332:	d94f      	bls.n	80053d4 <_vfiprintf_r+0x1d0>
 8005334:	2900      	cmp	r1, #0
 8005336:	d111      	bne.n	800535c <_vfiprintf_r+0x158>
 8005338:	e017      	b.n	800536a <_vfiprintf_r+0x166>
 800533a:	3701      	adds	r7, #1
 800533c:	e7a9      	b.n	8005292 <_vfiprintf_r+0x8e>
 800533e:	4b49      	ldr	r3, [pc, #292]	; (8005464 <_vfiprintf_r+0x260>)
 8005340:	682a      	ldr	r2, [r5, #0]
 8005342:	1ac0      	subs	r0, r0, r3
 8005344:	2301      	movs	r3, #1
 8005346:	4083      	lsls	r3, r0
 8005348:	4313      	orrs	r3, r2
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	9703      	str	r7, [sp, #12]
 800534e:	e7cb      	b.n	80052e8 <_vfiprintf_r+0xe4>
 8005350:	9b07      	ldr	r3, [sp, #28]
 8005352:	1d19      	adds	r1, r3, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	9107      	str	r1, [sp, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	db01      	blt.n	8005360 <_vfiprintf_r+0x15c>
 800535c:	930b      	str	r3, [sp, #44]	; 0x2c
 800535e:	e004      	b.n	800536a <_vfiprintf_r+0x166>
 8005360:	425b      	negs	r3, r3
 8005362:	60eb      	str	r3, [r5, #12]
 8005364:	2302      	movs	r3, #2
 8005366:	4313      	orrs	r3, r2
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	783b      	ldrb	r3, [r7, #0]
 800536c:	2b2e      	cmp	r3, #46	; 0x2e
 800536e:	d10a      	bne.n	8005386 <_vfiprintf_r+0x182>
 8005370:	787b      	ldrb	r3, [r7, #1]
 8005372:	2b2a      	cmp	r3, #42	; 0x2a
 8005374:	d137      	bne.n	80053e6 <_vfiprintf_r+0x1e2>
 8005376:	9b07      	ldr	r3, [sp, #28]
 8005378:	3702      	adds	r7, #2
 800537a:	1d1a      	adds	r2, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	9207      	str	r2, [sp, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	db2d      	blt.n	80053e0 <_vfiprintf_r+0x1dc>
 8005384:	9309      	str	r3, [sp, #36]	; 0x24
 8005386:	2203      	movs	r2, #3
 8005388:	7839      	ldrb	r1, [r7, #0]
 800538a:	4837      	ldr	r0, [pc, #220]	; (8005468 <_vfiprintf_r+0x264>)
 800538c:	f000 fd1c 	bl	8005dc8 <memchr>
 8005390:	2800      	cmp	r0, #0
 8005392:	d007      	beq.n	80053a4 <_vfiprintf_r+0x1a0>
 8005394:	4b34      	ldr	r3, [pc, #208]	; (8005468 <_vfiprintf_r+0x264>)
 8005396:	682a      	ldr	r2, [r5, #0]
 8005398:	1ac0      	subs	r0, r0, r3
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	4083      	lsls	r3, r0
 800539e:	4313      	orrs	r3, r2
 80053a0:	3701      	adds	r7, #1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	7839      	ldrb	r1, [r7, #0]
 80053a6:	1c7b      	adds	r3, r7, #1
 80053a8:	2206      	movs	r2, #6
 80053aa:	4830      	ldr	r0, [pc, #192]	; (800546c <_vfiprintf_r+0x268>)
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	7629      	strb	r1, [r5, #24]
 80053b0:	f000 fd0a 	bl	8005dc8 <memchr>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d045      	beq.n	8005444 <_vfiprintf_r+0x240>
 80053b8:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <_vfiprintf_r+0x26c>)
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d127      	bne.n	800540e <_vfiprintf_r+0x20a>
 80053be:	2207      	movs	r2, #7
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	3307      	adds	r3, #7
 80053c4:	4393      	bics	r3, r2
 80053c6:	3308      	adds	r3, #8
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	696b      	ldr	r3, [r5, #20]
 80053cc:	9a04      	ldr	r2, [sp, #16]
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	616b      	str	r3, [r5, #20]
 80053d2:	e75d      	b.n	8005290 <_vfiprintf_r+0x8c>
 80053d4:	210a      	movs	r1, #10
 80053d6:	434b      	muls	r3, r1
 80053d8:	4667      	mov	r7, ip
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	3909      	subs	r1, #9
 80053de:	e7a3      	b.n	8005328 <_vfiprintf_r+0x124>
 80053e0:	2301      	movs	r3, #1
 80053e2:	425b      	negs	r3, r3
 80053e4:	e7ce      	b.n	8005384 <_vfiprintf_r+0x180>
 80053e6:	2300      	movs	r3, #0
 80053e8:	001a      	movs	r2, r3
 80053ea:	3701      	adds	r7, #1
 80053ec:	606b      	str	r3, [r5, #4]
 80053ee:	7839      	ldrb	r1, [r7, #0]
 80053f0:	1c78      	adds	r0, r7, #1
 80053f2:	3930      	subs	r1, #48	; 0x30
 80053f4:	4684      	mov	ip, r0
 80053f6:	2909      	cmp	r1, #9
 80053f8:	d903      	bls.n	8005402 <_vfiprintf_r+0x1fe>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c3      	beq.n	8005386 <_vfiprintf_r+0x182>
 80053fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005400:	e7c1      	b.n	8005386 <_vfiprintf_r+0x182>
 8005402:	230a      	movs	r3, #10
 8005404:	435a      	muls	r2, r3
 8005406:	4667      	mov	r7, ip
 8005408:	1852      	adds	r2, r2, r1
 800540a:	3b09      	subs	r3, #9
 800540c:	e7ef      	b.n	80053ee <_vfiprintf_r+0x1ea>
 800540e:	ab07      	add	r3, sp, #28
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	0022      	movs	r2, r4
 8005414:	0029      	movs	r1, r5
 8005416:	0030      	movs	r0, r6
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <_vfiprintf_r+0x270>)
 800541a:	e000      	b.n	800541e <_vfiprintf_r+0x21a>
 800541c:	bf00      	nop
 800541e:	9004      	str	r0, [sp, #16]
 8005420:	9b04      	ldr	r3, [sp, #16]
 8005422:	3301      	adds	r3, #1
 8005424:	d1d1      	bne.n	80053ca <_vfiprintf_r+0x1c6>
 8005426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005428:	07db      	lsls	r3, r3, #31
 800542a:	d405      	bmi.n	8005438 <_vfiprintf_r+0x234>
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	059b      	lsls	r3, r3, #22
 8005430:	d402      	bmi.n	8005438 <_vfiprintf_r+0x234>
 8005432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005434:	f000 fc5a 	bl	8005cec <__retarget_lock_release_recursive>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	065b      	lsls	r3, r3, #25
 800543c:	d500      	bpl.n	8005440 <_vfiprintf_r+0x23c>
 800543e:	e70a      	b.n	8005256 <_vfiprintf_r+0x52>
 8005440:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005442:	e70a      	b.n	800525a <_vfiprintf_r+0x56>
 8005444:	ab07      	add	r3, sp, #28
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	0022      	movs	r2, r4
 800544a:	0029      	movs	r1, r5
 800544c:	0030      	movs	r0, r6
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <_vfiprintf_r+0x270>)
 8005450:	f000 f882 	bl	8005558 <_printf_i>
 8005454:	e7e3      	b.n	800541e <_vfiprintf_r+0x21a>
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	08006ef8 	.word	0x08006ef8
 800545c:	08006f18 	.word	0x08006f18
 8005460:	08006ed8 	.word	0x08006ed8
 8005464:	08006ea2 	.word	0x08006ea2
 8005468:	08006ea8 	.word	0x08006ea8
 800546c:	08006eac 	.word	0x08006eac
 8005470:	00000000 	.word	0x00000000
 8005474:	080051df 	.word	0x080051df

08005478 <_printf_common>:
 8005478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800547a:	0015      	movs	r5, r2
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	688a      	ldr	r2, [r1, #8]
 8005480:	690b      	ldr	r3, [r1, #16]
 8005482:	000c      	movs	r4, r1
 8005484:	9000      	str	r0, [sp, #0]
 8005486:	4293      	cmp	r3, r2
 8005488:	da00      	bge.n	800548c <_printf_common+0x14>
 800548a:	0013      	movs	r3, r2
 800548c:	0022      	movs	r2, r4
 800548e:	602b      	str	r3, [r5, #0]
 8005490:	3243      	adds	r2, #67	; 0x43
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	2a00      	cmp	r2, #0
 8005496:	d001      	beq.n	800549c <_printf_common+0x24>
 8005498:	3301      	adds	r3, #1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	069b      	lsls	r3, r3, #26
 80054a0:	d502      	bpl.n	80054a8 <_printf_common+0x30>
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	3302      	adds	r3, #2
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	2306      	movs	r3, #6
 80054ac:	0017      	movs	r7, r2
 80054ae:	401f      	ands	r7, r3
 80054b0:	421a      	tst	r2, r3
 80054b2:	d027      	beq.n	8005504 <_printf_common+0x8c>
 80054b4:	0023      	movs	r3, r4
 80054b6:	3343      	adds	r3, #67	; 0x43
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	4193      	sbcs	r3, r2
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	0692      	lsls	r2, r2, #26
 80054c2:	d430      	bmi.n	8005526 <_printf_common+0xae>
 80054c4:	0022      	movs	r2, r4
 80054c6:	9901      	ldr	r1, [sp, #4]
 80054c8:	9800      	ldr	r0, [sp, #0]
 80054ca:	9e08      	ldr	r6, [sp, #32]
 80054cc:	3243      	adds	r2, #67	; 0x43
 80054ce:	47b0      	blx	r6
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d025      	beq.n	8005520 <_printf_common+0xa8>
 80054d4:	2306      	movs	r3, #6
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	682a      	ldr	r2, [r5, #0]
 80054da:	68e1      	ldr	r1, [r4, #12]
 80054dc:	2500      	movs	r5, #0
 80054de:	4003      	ands	r3, r0
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d103      	bne.n	80054ec <_printf_common+0x74>
 80054e4:	1a8d      	subs	r5, r1, r2
 80054e6:	43eb      	mvns	r3, r5
 80054e8:	17db      	asrs	r3, r3, #31
 80054ea:	401d      	ands	r5, r3
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	6922      	ldr	r2, [r4, #16]
 80054f0:	4293      	cmp	r3, r2
 80054f2:	dd01      	ble.n	80054f8 <_printf_common+0x80>
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	18ed      	adds	r5, r5, r3
 80054f8:	2700      	movs	r7, #0
 80054fa:	42bd      	cmp	r5, r7
 80054fc:	d120      	bne.n	8005540 <_printf_common+0xc8>
 80054fe:	2000      	movs	r0, #0
 8005500:	e010      	b.n	8005524 <_printf_common+0xac>
 8005502:	3701      	adds	r7, #1
 8005504:	68e3      	ldr	r3, [r4, #12]
 8005506:	682a      	ldr	r2, [r5, #0]
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	42bb      	cmp	r3, r7
 800550c:	ddd2      	ble.n	80054b4 <_printf_common+0x3c>
 800550e:	0022      	movs	r2, r4
 8005510:	2301      	movs	r3, #1
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	9800      	ldr	r0, [sp, #0]
 8005516:	9e08      	ldr	r6, [sp, #32]
 8005518:	3219      	adds	r2, #25
 800551a:	47b0      	blx	r6
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d1f0      	bne.n	8005502 <_printf_common+0x8a>
 8005520:	2001      	movs	r0, #1
 8005522:	4240      	negs	r0, r0
 8005524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005526:	2030      	movs	r0, #48	; 0x30
 8005528:	18e1      	adds	r1, r4, r3
 800552a:	3143      	adds	r1, #67	; 0x43
 800552c:	7008      	strb	r0, [r1, #0]
 800552e:	0021      	movs	r1, r4
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	3145      	adds	r1, #69	; 0x45
 8005534:	7809      	ldrb	r1, [r1, #0]
 8005536:	18a2      	adds	r2, r4, r2
 8005538:	3243      	adds	r2, #67	; 0x43
 800553a:	3302      	adds	r3, #2
 800553c:	7011      	strb	r1, [r2, #0]
 800553e:	e7c1      	b.n	80054c4 <_printf_common+0x4c>
 8005540:	0022      	movs	r2, r4
 8005542:	2301      	movs	r3, #1
 8005544:	9901      	ldr	r1, [sp, #4]
 8005546:	9800      	ldr	r0, [sp, #0]
 8005548:	9e08      	ldr	r6, [sp, #32]
 800554a:	321a      	adds	r2, #26
 800554c:	47b0      	blx	r6
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d0e6      	beq.n	8005520 <_printf_common+0xa8>
 8005552:	3701      	adds	r7, #1
 8005554:	e7d1      	b.n	80054fa <_printf_common+0x82>
	...

08005558 <_printf_i>:
 8005558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555a:	b08b      	sub	sp, #44	; 0x2c
 800555c:	9206      	str	r2, [sp, #24]
 800555e:	000a      	movs	r2, r1
 8005560:	3243      	adds	r2, #67	; 0x43
 8005562:	9307      	str	r3, [sp, #28]
 8005564:	9005      	str	r0, [sp, #20]
 8005566:	9204      	str	r2, [sp, #16]
 8005568:	7e0a      	ldrb	r2, [r1, #24]
 800556a:	000c      	movs	r4, r1
 800556c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800556e:	2a78      	cmp	r2, #120	; 0x78
 8005570:	d807      	bhi.n	8005582 <_printf_i+0x2a>
 8005572:	2a62      	cmp	r2, #98	; 0x62
 8005574:	d809      	bhi.n	800558a <_printf_i+0x32>
 8005576:	2a00      	cmp	r2, #0
 8005578:	d100      	bne.n	800557c <_printf_i+0x24>
 800557a:	e0c1      	b.n	8005700 <_printf_i+0x1a8>
 800557c:	2a58      	cmp	r2, #88	; 0x58
 800557e:	d100      	bne.n	8005582 <_printf_i+0x2a>
 8005580:	e08c      	b.n	800569c <_printf_i+0x144>
 8005582:	0026      	movs	r6, r4
 8005584:	3642      	adds	r6, #66	; 0x42
 8005586:	7032      	strb	r2, [r6, #0]
 8005588:	e022      	b.n	80055d0 <_printf_i+0x78>
 800558a:	0010      	movs	r0, r2
 800558c:	3863      	subs	r0, #99	; 0x63
 800558e:	2815      	cmp	r0, #21
 8005590:	d8f7      	bhi.n	8005582 <_printf_i+0x2a>
 8005592:	f7fa fdb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8005596:	0016      	.short	0x0016
 8005598:	fff6001f 	.word	0xfff6001f
 800559c:	fff6fff6 	.word	0xfff6fff6
 80055a0:	001ffff6 	.word	0x001ffff6
 80055a4:	fff6fff6 	.word	0xfff6fff6
 80055a8:	fff6fff6 	.word	0xfff6fff6
 80055ac:	003600a8 	.word	0x003600a8
 80055b0:	fff6009a 	.word	0xfff6009a
 80055b4:	00b9fff6 	.word	0x00b9fff6
 80055b8:	0036fff6 	.word	0x0036fff6
 80055bc:	fff6fff6 	.word	0xfff6fff6
 80055c0:	009e      	.short	0x009e
 80055c2:	0026      	movs	r6, r4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	3642      	adds	r6, #66	; 0x42
 80055c8:	1d11      	adds	r1, r2, #4
 80055ca:	6019      	str	r1, [r3, #0]
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	7033      	strb	r3, [r6, #0]
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0a7      	b.n	8005724 <_printf_i+0x1cc>
 80055d4:	6808      	ldr	r0, [r1, #0]
 80055d6:	6819      	ldr	r1, [r3, #0]
 80055d8:	1d0a      	adds	r2, r1, #4
 80055da:	0605      	lsls	r5, r0, #24
 80055dc:	d50b      	bpl.n	80055f6 <_printf_i+0x9e>
 80055de:	680d      	ldr	r5, [r1, #0]
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	da03      	bge.n	80055ee <_printf_i+0x96>
 80055e6:	232d      	movs	r3, #45	; 0x2d
 80055e8:	9a04      	ldr	r2, [sp, #16]
 80055ea:	426d      	negs	r5, r5
 80055ec:	7013      	strb	r3, [r2, #0]
 80055ee:	4b61      	ldr	r3, [pc, #388]	; (8005774 <_printf_i+0x21c>)
 80055f0:	270a      	movs	r7, #10
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	e01b      	b.n	800562e <_printf_i+0xd6>
 80055f6:	680d      	ldr	r5, [r1, #0]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	0641      	lsls	r1, r0, #25
 80055fc:	d5f1      	bpl.n	80055e2 <_printf_i+0x8a>
 80055fe:	b22d      	sxth	r5, r5
 8005600:	e7ef      	b.n	80055e2 <_printf_i+0x8a>
 8005602:	680d      	ldr	r5, [r1, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	1d08      	adds	r0, r1, #4
 8005608:	6018      	str	r0, [r3, #0]
 800560a:	062e      	lsls	r6, r5, #24
 800560c:	d501      	bpl.n	8005612 <_printf_i+0xba>
 800560e:	680d      	ldr	r5, [r1, #0]
 8005610:	e003      	b.n	800561a <_printf_i+0xc2>
 8005612:	066d      	lsls	r5, r5, #25
 8005614:	d5fb      	bpl.n	800560e <_printf_i+0xb6>
 8005616:	680d      	ldr	r5, [r1, #0]
 8005618:	b2ad      	uxth	r5, r5
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <_printf_i+0x21c>)
 800561c:	2708      	movs	r7, #8
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	2a6f      	cmp	r2, #111	; 0x6f
 8005622:	d000      	beq.n	8005626 <_printf_i+0xce>
 8005624:	3702      	adds	r7, #2
 8005626:	0023      	movs	r3, r4
 8005628:	2200      	movs	r2, #0
 800562a:	3343      	adds	r3, #67	; 0x43
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	60a3      	str	r3, [r4, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	db03      	blt.n	800563e <_printf_i+0xe6>
 8005636:	2204      	movs	r2, #4
 8005638:	6821      	ldr	r1, [r4, #0]
 800563a:	4391      	bics	r1, r2
 800563c:	6021      	str	r1, [r4, #0]
 800563e:	2d00      	cmp	r5, #0
 8005640:	d102      	bne.n	8005648 <_printf_i+0xf0>
 8005642:	9e04      	ldr	r6, [sp, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <_printf_i+0x10a>
 8005648:	9e04      	ldr	r6, [sp, #16]
 800564a:	0028      	movs	r0, r5
 800564c:	0039      	movs	r1, r7
 800564e:	f7fa fdeb 	bl	8000228 <__aeabi_uidivmod>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	3e01      	subs	r6, #1
 8005656:	5c5b      	ldrb	r3, [r3, r1]
 8005658:	7033      	strb	r3, [r6, #0]
 800565a:	002b      	movs	r3, r5
 800565c:	0005      	movs	r5, r0
 800565e:	429f      	cmp	r7, r3
 8005660:	d9f3      	bls.n	800564a <_printf_i+0xf2>
 8005662:	2f08      	cmp	r7, #8
 8005664:	d109      	bne.n	800567a <_printf_i+0x122>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	07db      	lsls	r3, r3, #31
 800566a:	d506      	bpl.n	800567a <_printf_i+0x122>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	6922      	ldr	r2, [r4, #16]
 8005670:	4293      	cmp	r3, r2
 8005672:	dc02      	bgt.n	800567a <_printf_i+0x122>
 8005674:	2330      	movs	r3, #48	; 0x30
 8005676:	3e01      	subs	r6, #1
 8005678:	7033      	strb	r3, [r6, #0]
 800567a:	9b04      	ldr	r3, [sp, #16]
 800567c:	1b9b      	subs	r3, r3, r6
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	9b07      	ldr	r3, [sp, #28]
 8005682:	0021      	movs	r1, r4
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	9805      	ldr	r0, [sp, #20]
 8005688:	9b06      	ldr	r3, [sp, #24]
 800568a:	aa09      	add	r2, sp, #36	; 0x24
 800568c:	f7ff fef4 	bl	8005478 <_printf_common>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d14c      	bne.n	800572e <_printf_i+0x1d6>
 8005694:	2001      	movs	r0, #1
 8005696:	4240      	negs	r0, r0
 8005698:	b00b      	add	sp, #44	; 0x2c
 800569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569c:	3145      	adds	r1, #69	; 0x45
 800569e:	700a      	strb	r2, [r1, #0]
 80056a0:	4a34      	ldr	r2, [pc, #208]	; (8005774 <_printf_i+0x21c>)
 80056a2:	9203      	str	r2, [sp, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	ca20      	ldmia	r2!, {r5}
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	0608      	lsls	r0, r1, #24
 80056ae:	d516      	bpl.n	80056de <_printf_i+0x186>
 80056b0:	07cb      	lsls	r3, r1, #31
 80056b2:	d502      	bpl.n	80056ba <_printf_i+0x162>
 80056b4:	2320      	movs	r3, #32
 80056b6:	4319      	orrs	r1, r3
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	2710      	movs	r7, #16
 80056bc:	2d00      	cmp	r5, #0
 80056be:	d1b2      	bne.n	8005626 <_printf_i+0xce>
 80056c0:	2320      	movs	r3, #32
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	439a      	bics	r2, r3
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	e7ad      	b.n	8005626 <_printf_i+0xce>
 80056ca:	2220      	movs	r2, #32
 80056cc:	6809      	ldr	r1, [r1, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	0022      	movs	r2, r4
 80056d4:	2178      	movs	r1, #120	; 0x78
 80056d6:	3245      	adds	r2, #69	; 0x45
 80056d8:	7011      	strb	r1, [r2, #0]
 80056da:	4a27      	ldr	r2, [pc, #156]	; (8005778 <_printf_i+0x220>)
 80056dc:	e7e1      	b.n	80056a2 <_printf_i+0x14a>
 80056de:	0648      	lsls	r0, r1, #25
 80056e0:	d5e6      	bpl.n	80056b0 <_printf_i+0x158>
 80056e2:	b2ad      	uxth	r5, r5
 80056e4:	e7e4      	b.n	80056b0 <_printf_i+0x158>
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	680d      	ldr	r5, [r1, #0]
 80056ea:	1d10      	adds	r0, r2, #4
 80056ec:	6949      	ldr	r1, [r1, #20]
 80056ee:	6018      	str	r0, [r3, #0]
 80056f0:	6813      	ldr	r3, [r2, #0]
 80056f2:	062e      	lsls	r6, r5, #24
 80056f4:	d501      	bpl.n	80056fa <_printf_i+0x1a2>
 80056f6:	6019      	str	r1, [r3, #0]
 80056f8:	e002      	b.n	8005700 <_printf_i+0x1a8>
 80056fa:	066d      	lsls	r5, r5, #25
 80056fc:	d5fb      	bpl.n	80056f6 <_printf_i+0x19e>
 80056fe:	8019      	strh	r1, [r3, #0]
 8005700:	2300      	movs	r3, #0
 8005702:	9e04      	ldr	r6, [sp, #16]
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	e7bb      	b.n	8005680 <_printf_i+0x128>
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	1d11      	adds	r1, r2, #4
 800570c:	6019      	str	r1, [r3, #0]
 800570e:	6816      	ldr	r6, [r2, #0]
 8005710:	2100      	movs	r1, #0
 8005712:	0030      	movs	r0, r6
 8005714:	6862      	ldr	r2, [r4, #4]
 8005716:	f000 fb57 	bl	8005dc8 <memchr>
 800571a:	2800      	cmp	r0, #0
 800571c:	d001      	beq.n	8005722 <_printf_i+0x1ca>
 800571e:	1b80      	subs	r0, r0, r6
 8005720:	6060      	str	r0, [r4, #4]
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	2300      	movs	r3, #0
 8005728:	9a04      	ldr	r2, [sp, #16]
 800572a:	7013      	strb	r3, [r2, #0]
 800572c:	e7a8      	b.n	8005680 <_printf_i+0x128>
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	0032      	movs	r2, r6
 8005732:	9906      	ldr	r1, [sp, #24]
 8005734:	9805      	ldr	r0, [sp, #20]
 8005736:	9d07      	ldr	r5, [sp, #28]
 8005738:	47a8      	blx	r5
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	d0aa      	beq.n	8005694 <_printf_i+0x13c>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	079b      	lsls	r3, r3, #30
 8005742:	d415      	bmi.n	8005770 <_printf_i+0x218>
 8005744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	4298      	cmp	r0, r3
 800574a:	daa5      	bge.n	8005698 <_printf_i+0x140>
 800574c:	0018      	movs	r0, r3
 800574e:	e7a3      	b.n	8005698 <_printf_i+0x140>
 8005750:	0022      	movs	r2, r4
 8005752:	2301      	movs	r3, #1
 8005754:	9906      	ldr	r1, [sp, #24]
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	9e07      	ldr	r6, [sp, #28]
 800575a:	3219      	adds	r2, #25
 800575c:	47b0      	blx	r6
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d098      	beq.n	8005694 <_printf_i+0x13c>
 8005762:	3501      	adds	r5, #1
 8005764:	68e3      	ldr	r3, [r4, #12]
 8005766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	42ab      	cmp	r3, r5
 800576c:	dcf0      	bgt.n	8005750 <_printf_i+0x1f8>
 800576e:	e7e9      	b.n	8005744 <_printf_i+0x1ec>
 8005770:	2500      	movs	r5, #0
 8005772:	e7f7      	b.n	8005764 <_printf_i+0x20c>
 8005774:	08006eb3 	.word	0x08006eb3
 8005778:	08006ec4 	.word	0x08006ec4

0800577c <_sbrk_r>:
 800577c:	2300      	movs	r3, #0
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	4d06      	ldr	r5, [pc, #24]	; (800579c <_sbrk_r+0x20>)
 8005782:	0004      	movs	r4, r0
 8005784:	0008      	movs	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fb fb68 	bl	8000e5c <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d103      	bne.n	8005798 <_sbrk_r+0x1c>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d000      	beq.n	8005798 <_sbrk_r+0x1c>
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	bd70      	pop	{r4, r5, r6, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	20000808 	.word	0x20000808

080057a0 <__swbuf_r>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	0005      	movs	r5, r0
 80057a4:	000e      	movs	r6, r1
 80057a6:	0014      	movs	r4, r2
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d004      	beq.n	80057b6 <__swbuf_r+0x16>
 80057ac:	6983      	ldr	r3, [r0, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <__swbuf_r+0x16>
 80057b2:	f000 f9f9 	bl	8005ba8 <__sinit>
 80057b6:	4b22      	ldr	r3, [pc, #136]	; (8005840 <__swbuf_r+0xa0>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	d12e      	bne.n	800581a <__swbuf_r+0x7a>
 80057bc:	686c      	ldr	r4, [r5, #4]
 80057be:	69a3      	ldr	r3, [r4, #24]
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	071b      	lsls	r3, r3, #28
 80057c6:	d532      	bpl.n	800582e <__swbuf_r+0x8e>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02f      	beq.n	800582e <__swbuf_r+0x8e>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	b2f7      	uxtb	r7, r6
 80057d4:	1a98      	subs	r0, r3, r2
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	b2f6      	uxtb	r6, r6
 80057da:	4283      	cmp	r3, r0
 80057dc:	dc05      	bgt.n	80057ea <__swbuf_r+0x4a>
 80057de:	0021      	movs	r1, r4
 80057e0:	0028      	movs	r0, r5
 80057e2:	f000 f93f 	bl	8005a64 <_fflush_r>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d127      	bne.n	800583a <__swbuf_r+0x9a>
 80057ea:	68a3      	ldr	r3, [r4, #8]
 80057ec:	3001      	adds	r0, #1
 80057ee:	3b01      	subs	r3, #1
 80057f0:	60a3      	str	r3, [r4, #8]
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	701f      	strb	r7, [r3, #0]
 80057fa:	6963      	ldr	r3, [r4, #20]
 80057fc:	4283      	cmp	r3, r0
 80057fe:	d004      	beq.n	800580a <__swbuf_r+0x6a>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d507      	bpl.n	8005816 <__swbuf_r+0x76>
 8005806:	2e0a      	cmp	r6, #10
 8005808:	d105      	bne.n	8005816 <__swbuf_r+0x76>
 800580a:	0021      	movs	r1, r4
 800580c:	0028      	movs	r0, r5
 800580e:	f000 f929 	bl	8005a64 <_fflush_r>
 8005812:	2800      	cmp	r0, #0
 8005814:	d111      	bne.n	800583a <__swbuf_r+0x9a>
 8005816:	0030      	movs	r0, r6
 8005818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <__swbuf_r+0xa4>)
 800581c:	429c      	cmp	r4, r3
 800581e:	d101      	bne.n	8005824 <__swbuf_r+0x84>
 8005820:	68ac      	ldr	r4, [r5, #8]
 8005822:	e7cc      	b.n	80057be <__swbuf_r+0x1e>
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <__swbuf_r+0xa8>)
 8005826:	429c      	cmp	r4, r3
 8005828:	d1c9      	bne.n	80057be <__swbuf_r+0x1e>
 800582a:	68ec      	ldr	r4, [r5, #12]
 800582c:	e7c7      	b.n	80057be <__swbuf_r+0x1e>
 800582e:	0021      	movs	r1, r4
 8005830:	0028      	movs	r0, r5
 8005832:	f000 f80b 	bl	800584c <__swsetup_r>
 8005836:	2800      	cmp	r0, #0
 8005838:	d0c9      	beq.n	80057ce <__swbuf_r+0x2e>
 800583a:	2601      	movs	r6, #1
 800583c:	4276      	negs	r6, r6
 800583e:	e7ea      	b.n	8005816 <__swbuf_r+0x76>
 8005840:	08006ef8 	.word	0x08006ef8
 8005844:	08006f18 	.word	0x08006f18
 8005848:	08006ed8 	.word	0x08006ed8

0800584c <__swsetup_r>:
 800584c:	4b37      	ldr	r3, [pc, #220]	; (800592c <__swsetup_r+0xe0>)
 800584e:	b570      	push	{r4, r5, r6, lr}
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	0006      	movs	r6, r0
 8005854:	000c      	movs	r4, r1
 8005856:	2d00      	cmp	r5, #0
 8005858:	d005      	beq.n	8005866 <__swsetup_r+0x1a>
 800585a:	69ab      	ldr	r3, [r5, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <__swsetup_r+0x1a>
 8005860:	0028      	movs	r0, r5
 8005862:	f000 f9a1 	bl	8005ba8 <__sinit>
 8005866:	4b32      	ldr	r3, [pc, #200]	; (8005930 <__swsetup_r+0xe4>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d10f      	bne.n	800588c <__swsetup_r+0x40>
 800586c:	686c      	ldr	r4, [r5, #4]
 800586e:	230c      	movs	r3, #12
 8005870:	5ee2      	ldrsh	r2, [r4, r3]
 8005872:	b293      	uxth	r3, r2
 8005874:	0711      	lsls	r1, r2, #28
 8005876:	d42d      	bmi.n	80058d4 <__swsetup_r+0x88>
 8005878:	06d9      	lsls	r1, r3, #27
 800587a:	d411      	bmi.n	80058a0 <__swsetup_r+0x54>
 800587c:	2309      	movs	r3, #9
 800587e:	2001      	movs	r0, #1
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	3337      	adds	r3, #55	; 0x37
 8005884:	4313      	orrs	r3, r2
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	4240      	negs	r0, r0
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <__swsetup_r+0xe8>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d101      	bne.n	8005896 <__swsetup_r+0x4a>
 8005892:	68ac      	ldr	r4, [r5, #8]
 8005894:	e7eb      	b.n	800586e <__swsetup_r+0x22>
 8005896:	4b28      	ldr	r3, [pc, #160]	; (8005938 <__swsetup_r+0xec>)
 8005898:	429c      	cmp	r4, r3
 800589a:	d1e8      	bne.n	800586e <__swsetup_r+0x22>
 800589c:	68ec      	ldr	r4, [r5, #12]
 800589e:	e7e6      	b.n	800586e <__swsetup_r+0x22>
 80058a0:	075b      	lsls	r3, r3, #29
 80058a2:	d513      	bpl.n	80058cc <__swsetup_r+0x80>
 80058a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d008      	beq.n	80058bc <__swsetup_r+0x70>
 80058aa:	0023      	movs	r3, r4
 80058ac:	3344      	adds	r3, #68	; 0x44
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d002      	beq.n	80058b8 <__swsetup_r+0x6c>
 80058b2:	0030      	movs	r0, r6
 80058b4:	f7ff fb9c 	bl	8004ff0 <_free_r>
 80058b8:	2300      	movs	r3, #0
 80058ba:	6363      	str	r3, [r4, #52]	; 0x34
 80058bc:	2224      	movs	r2, #36	; 0x24
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	4393      	bics	r3, r2
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	2300      	movs	r3, #0
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	2308      	movs	r3, #8
 80058ce:	89a2      	ldrh	r2, [r4, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <__swsetup_r+0xa6>
 80058da:	21a0      	movs	r1, #160	; 0xa0
 80058dc:	2280      	movs	r2, #128	; 0x80
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	0089      	lsls	r1, r1, #2
 80058e2:	0092      	lsls	r2, r2, #2
 80058e4:	400b      	ands	r3, r1
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <__swsetup_r+0xa6>
 80058ea:	0021      	movs	r1, r4
 80058ec:	0030      	movs	r0, r6
 80058ee:	f000 fa27 	bl	8005d40 <__smakebuf_r>
 80058f2:	220c      	movs	r2, #12
 80058f4:	5ea3      	ldrsh	r3, [r4, r2]
 80058f6:	2001      	movs	r0, #1
 80058f8:	001a      	movs	r2, r3
 80058fa:	b299      	uxth	r1, r3
 80058fc:	4002      	ands	r2, r0
 80058fe:	4203      	tst	r3, r0
 8005900:	d00f      	beq.n	8005922 <__swsetup_r+0xd6>
 8005902:	2200      	movs	r2, #0
 8005904:	60a2      	str	r2, [r4, #8]
 8005906:	6962      	ldr	r2, [r4, #20]
 8005908:	4252      	negs	r2, r2
 800590a:	61a2      	str	r2, [r4, #24]
 800590c:	2000      	movs	r0, #0
 800590e:	6922      	ldr	r2, [r4, #16]
 8005910:	4282      	cmp	r2, r0
 8005912:	d1ba      	bne.n	800588a <__swsetup_r+0x3e>
 8005914:	060a      	lsls	r2, r1, #24
 8005916:	d5b8      	bpl.n	800588a <__swsetup_r+0x3e>
 8005918:	2240      	movs	r2, #64	; 0x40
 800591a:	4313      	orrs	r3, r2
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	3801      	subs	r0, #1
 8005920:	e7b3      	b.n	800588a <__swsetup_r+0x3e>
 8005922:	0788      	lsls	r0, r1, #30
 8005924:	d400      	bmi.n	8005928 <__swsetup_r+0xdc>
 8005926:	6962      	ldr	r2, [r4, #20]
 8005928:	60a2      	str	r2, [r4, #8]
 800592a:	e7ef      	b.n	800590c <__swsetup_r+0xc0>
 800592c:	20000014 	.word	0x20000014
 8005930:	08006ef8 	.word	0x08006ef8
 8005934:	08006f18 	.word	0x08006f18
 8005938:	08006ed8 	.word	0x08006ed8

0800593c <abort>:
 800593c:	2006      	movs	r0, #6
 800593e:	b510      	push	{r4, lr}
 8005940:	f000 fa88 	bl	8005e54 <raise>
 8005944:	2001      	movs	r0, #1
 8005946:	f7fb fa17 	bl	8000d78 <_exit>
	...

0800594c <__sflush_r>:
 800594c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800594e:	898b      	ldrh	r3, [r1, #12]
 8005950:	0005      	movs	r5, r0
 8005952:	000c      	movs	r4, r1
 8005954:	071a      	lsls	r2, r3, #28
 8005956:	d45f      	bmi.n	8005a18 <__sflush_r+0xcc>
 8005958:	684a      	ldr	r2, [r1, #4]
 800595a:	2a00      	cmp	r2, #0
 800595c:	dc04      	bgt.n	8005968 <__sflush_r+0x1c>
 800595e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005960:	2a00      	cmp	r2, #0
 8005962:	dc01      	bgt.n	8005968 <__sflush_r+0x1c>
 8005964:	2000      	movs	r0, #0
 8005966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005968:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800596a:	2f00      	cmp	r7, #0
 800596c:	d0fa      	beq.n	8005964 <__sflush_r+0x18>
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	682e      	ldr	r6, [r5, #0]
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	001a      	movs	r2, r3
 8005978:	0149      	lsls	r1, r1, #5
 800597a:	400a      	ands	r2, r1
 800597c:	420b      	tst	r3, r1
 800597e:	d034      	beq.n	80059ea <__sflush_r+0x9e>
 8005980:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	075b      	lsls	r3, r3, #29
 8005986:	d506      	bpl.n	8005996 <__sflush_r+0x4a>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	1ac0      	subs	r0, r0, r3
 800598c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <__sflush_r+0x4a>
 8005992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005994:	1ac0      	subs	r0, r0, r3
 8005996:	0002      	movs	r2, r0
 8005998:	6a21      	ldr	r1, [r4, #32]
 800599a:	2300      	movs	r3, #0
 800599c:	0028      	movs	r0, r5
 800599e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80059a0:	47b8      	blx	r7
 80059a2:	89a1      	ldrh	r1, [r4, #12]
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d106      	bne.n	80059b6 <__sflush_r+0x6a>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	2b1d      	cmp	r3, #29
 80059ac:	d831      	bhi.n	8005a12 <__sflush_r+0xc6>
 80059ae:	4a2c      	ldr	r2, [pc, #176]	; (8005a60 <__sflush_r+0x114>)
 80059b0:	40da      	lsrs	r2, r3
 80059b2:	07d3      	lsls	r3, r2, #31
 80059b4:	d52d      	bpl.n	8005a12 <__sflush_r+0xc6>
 80059b6:	2300      	movs	r3, #0
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	04cb      	lsls	r3, r1, #19
 80059c0:	d505      	bpl.n	80059ce <__sflush_r+0x82>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	d102      	bne.n	80059cc <__sflush_r+0x80>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <__sflush_r+0x82>
 80059cc:	6560      	str	r0, [r4, #84]	; 0x54
 80059ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d0:	602e      	str	r6, [r5, #0]
 80059d2:	2900      	cmp	r1, #0
 80059d4:	d0c6      	beq.n	8005964 <__sflush_r+0x18>
 80059d6:	0023      	movs	r3, r4
 80059d8:	3344      	adds	r3, #68	; 0x44
 80059da:	4299      	cmp	r1, r3
 80059dc:	d002      	beq.n	80059e4 <__sflush_r+0x98>
 80059de:	0028      	movs	r0, r5
 80059e0:	f7ff fb06 	bl	8004ff0 <_free_r>
 80059e4:	2000      	movs	r0, #0
 80059e6:	6360      	str	r0, [r4, #52]	; 0x34
 80059e8:	e7bd      	b.n	8005966 <__sflush_r+0x1a>
 80059ea:	2301      	movs	r3, #1
 80059ec:	0028      	movs	r0, r5
 80059ee:	6a21      	ldr	r1, [r4, #32]
 80059f0:	47b8      	blx	r7
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d1c5      	bne.n	8005982 <__sflush_r+0x36>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0c2      	beq.n	8005982 <__sflush_r+0x36>
 80059fc:	2b1d      	cmp	r3, #29
 80059fe:	d001      	beq.n	8005a04 <__sflush_r+0xb8>
 8005a00:	2b16      	cmp	r3, #22
 8005a02:	d101      	bne.n	8005a08 <__sflush_r+0xbc>
 8005a04:	602e      	str	r6, [r5, #0]
 8005a06:	e7ad      	b.n	8005964 <__sflush_r+0x18>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	89a2      	ldrh	r2, [r4, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	e7a9      	b.n	8005966 <__sflush_r+0x1a>
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	430b      	orrs	r3, r1
 8005a16:	e7fa      	b.n	8005a0e <__sflush_r+0xc2>
 8005a18:	690f      	ldr	r7, [r1, #16]
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0a2      	beq.n	8005964 <__sflush_r+0x18>
 8005a1e:	680a      	ldr	r2, [r1, #0]
 8005a20:	600f      	str	r7, [r1, #0]
 8005a22:	1bd2      	subs	r2, r2, r7
 8005a24:	9201      	str	r2, [sp, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	079b      	lsls	r3, r3, #30
 8005a2a:	d100      	bne.n	8005a2e <__sflush_r+0xe2>
 8005a2c:	694a      	ldr	r2, [r1, #20]
 8005a2e:	60a2      	str	r2, [r4, #8]
 8005a30:	9b01      	ldr	r3, [sp, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dc00      	bgt.n	8005a38 <__sflush_r+0xec>
 8005a36:	e795      	b.n	8005964 <__sflush_r+0x18>
 8005a38:	003a      	movs	r2, r7
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	6a21      	ldr	r1, [r4, #32]
 8005a40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a42:	47b0      	blx	r6
 8005a44:	2800      	cmp	r0, #0
 8005a46:	dc06      	bgt.n	8005a56 <__sflush_r+0x10a>
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	89a2      	ldrh	r2, [r4, #12]
 8005a4e:	4240      	negs	r0, r0
 8005a50:	4313      	orrs	r3, r2
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	e787      	b.n	8005966 <__sflush_r+0x1a>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	183f      	adds	r7, r7, r0
 8005a5a:	1a1b      	subs	r3, r3, r0
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	e7e7      	b.n	8005a30 <__sflush_r+0xe4>
 8005a60:	20400001 	.word	0x20400001

08005a64 <_fflush_r>:
 8005a64:	690b      	ldr	r3, [r1, #16]
 8005a66:	b570      	push	{r4, r5, r6, lr}
 8005a68:	0005      	movs	r5, r0
 8005a6a:	000c      	movs	r4, r1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <_fflush_r+0x12>
 8005a70:	2500      	movs	r5, #0
 8005a72:	0028      	movs	r0, r5
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d004      	beq.n	8005a84 <_fflush_r+0x20>
 8005a7a:	6983      	ldr	r3, [r0, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <_fflush_r+0x20>
 8005a80:	f000 f892 	bl	8005ba8 <__sinit>
 8005a84:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <_fflush_r+0x74>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d11b      	bne.n	8005ac2 <_fflush_r+0x5e>
 8005a8a:	686c      	ldr	r4, [r5, #4]
 8005a8c:	220c      	movs	r2, #12
 8005a8e:	5ea3      	ldrsh	r3, [r4, r2]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ed      	beq.n	8005a70 <_fflush_r+0xc>
 8005a94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a96:	07d2      	lsls	r2, r2, #31
 8005a98:	d404      	bmi.n	8005aa4 <_fflush_r+0x40>
 8005a9a:	059b      	lsls	r3, r3, #22
 8005a9c:	d402      	bmi.n	8005aa4 <_fflush_r+0x40>
 8005a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa0:	f000 f923 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	0021      	movs	r1, r4
 8005aa8:	f7ff ff50 	bl	800594c <__sflush_r>
 8005aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aae:	0005      	movs	r5, r0
 8005ab0:	07db      	lsls	r3, r3, #31
 8005ab2:	d4de      	bmi.n	8005a72 <_fflush_r+0xe>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	059b      	lsls	r3, r3, #22
 8005ab8:	d4db      	bmi.n	8005a72 <_fflush_r+0xe>
 8005aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005abc:	f000 f916 	bl	8005cec <__retarget_lock_release_recursive>
 8005ac0:	e7d7      	b.n	8005a72 <_fflush_r+0xe>
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <_fflush_r+0x78>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d101      	bne.n	8005acc <_fflush_r+0x68>
 8005ac8:	68ac      	ldr	r4, [r5, #8]
 8005aca:	e7df      	b.n	8005a8c <_fflush_r+0x28>
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <_fflush_r+0x7c>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d1dc      	bne.n	8005a8c <_fflush_r+0x28>
 8005ad2:	68ec      	ldr	r4, [r5, #12]
 8005ad4:	e7da      	b.n	8005a8c <_fflush_r+0x28>
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	08006ef8 	.word	0x08006ef8
 8005adc:	08006f18 	.word	0x08006f18
 8005ae0:	08006ed8 	.word	0x08006ed8

08005ae4 <std>:
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	0004      	movs	r4, r0
 8005aea:	6003      	str	r3, [r0, #0]
 8005aec:	6043      	str	r3, [r0, #4]
 8005aee:	6083      	str	r3, [r0, #8]
 8005af0:	8181      	strh	r1, [r0, #12]
 8005af2:	6643      	str	r3, [r0, #100]	; 0x64
 8005af4:	0019      	movs	r1, r3
 8005af6:	81c2      	strh	r2, [r0, #14]
 8005af8:	6103      	str	r3, [r0, #16]
 8005afa:	6143      	str	r3, [r0, #20]
 8005afc:	6183      	str	r3, [r0, #24]
 8005afe:	2208      	movs	r2, #8
 8005b00:	305c      	adds	r0, #92	; 0x5c
 8005b02:	f7ff f9f7 	bl	8004ef4 <memset>
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <std+0x38>)
 8005b08:	6224      	str	r4, [r4, #32]
 8005b0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <std+0x3c>)
 8005b0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <std+0x40>)
 8005b12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <std+0x44>)
 8005b16:	6323      	str	r3, [r4, #48]	; 0x30
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	08005e95 	.word	0x08005e95
 8005b20:	08005ebd 	.word	0x08005ebd
 8005b24:	08005ef5 	.word	0x08005ef5
 8005b28:	08005f21 	.word	0x08005f21

08005b2c <_cleanup_r>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	4902      	ldr	r1, [pc, #8]	; (8005b38 <_cleanup_r+0xc>)
 8005b30:	f000 f8ba 	bl	8005ca8 <_fwalk_reent>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	08005a65 	.word	0x08005a65

08005b3c <__sfmoreglue>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	2568      	movs	r5, #104	; 0x68
 8005b40:	1e4a      	subs	r2, r1, #1
 8005b42:	4355      	muls	r5, r2
 8005b44:	000e      	movs	r6, r1
 8005b46:	0029      	movs	r1, r5
 8005b48:	3174      	adds	r1, #116	; 0x74
 8005b4a:	f7ff fabd 	bl	80050c8 <_malloc_r>
 8005b4e:	1e04      	subs	r4, r0, #0
 8005b50:	d008      	beq.n	8005b64 <__sfmoreglue+0x28>
 8005b52:	2100      	movs	r1, #0
 8005b54:	002a      	movs	r2, r5
 8005b56:	6001      	str	r1, [r0, #0]
 8005b58:	6046      	str	r6, [r0, #4]
 8005b5a:	300c      	adds	r0, #12
 8005b5c:	60a0      	str	r0, [r4, #8]
 8005b5e:	3268      	adds	r2, #104	; 0x68
 8005b60:	f7ff f9c8 	bl	8004ef4 <memset>
 8005b64:	0020      	movs	r0, r4
 8005b66:	bd70      	pop	{r4, r5, r6, pc}

08005b68 <__sfp_lock_acquire>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4802      	ldr	r0, [pc, #8]	; (8005b74 <__sfp_lock_acquire+0xc>)
 8005b6c:	f000 f8bd 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000805 	.word	0x20000805

08005b78 <__sfp_lock_release>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4802      	ldr	r0, [pc, #8]	; (8005b84 <__sfp_lock_release+0xc>)
 8005b7c:	f000 f8b6 	bl	8005cec <__retarget_lock_release_recursive>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	20000805 	.word	0x20000805

08005b88 <__sinit_lock_acquire>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <__sinit_lock_acquire+0xc>)
 8005b8c:	f000 f8ad 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000806 	.word	0x20000806

08005b98 <__sinit_lock_release>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <__sinit_lock_release+0xc>)
 8005b9c:	f000 f8a6 	bl	8005cec <__retarget_lock_release_recursive>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	20000806 	.word	0x20000806

08005ba8 <__sinit>:
 8005ba8:	b513      	push	{r0, r1, r4, lr}
 8005baa:	0004      	movs	r4, r0
 8005bac:	f7ff ffec 	bl	8005b88 <__sinit_lock_acquire>
 8005bb0:	69a3      	ldr	r3, [r4, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <__sinit+0x14>
 8005bb6:	f7ff ffef 	bl	8005b98 <__sinit_lock_release>
 8005bba:	bd13      	pop	{r0, r1, r4, pc}
 8005bbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <__sinit+0x68>)
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <__sinit+0x6c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d101      	bne.n	8005bd4 <__sinit+0x2c>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61a3      	str	r3, [r4, #24]
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	f000 f81f 	bl	8005c18 <__sfp>
 8005bda:	6060      	str	r0, [r4, #4]
 8005bdc:	0020      	movs	r0, r4
 8005bde:	f000 f81b 	bl	8005c18 <__sfp>
 8005be2:	60a0      	str	r0, [r4, #8]
 8005be4:	0020      	movs	r0, r4
 8005be6:	f000 f817 	bl	8005c18 <__sfp>
 8005bea:	2200      	movs	r2, #0
 8005bec:	2104      	movs	r1, #4
 8005bee:	60e0      	str	r0, [r4, #12]
 8005bf0:	6860      	ldr	r0, [r4, #4]
 8005bf2:	f7ff ff77 	bl	8005ae4 <std>
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	2109      	movs	r1, #9
 8005bfa:	68a0      	ldr	r0, [r4, #8]
 8005bfc:	f7ff ff72 	bl	8005ae4 <std>
 8005c00:	2202      	movs	r2, #2
 8005c02:	2112      	movs	r1, #18
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	f7ff ff6d 	bl	8005ae4 <std>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61a3      	str	r3, [r4, #24]
 8005c0e:	e7d2      	b.n	8005bb6 <__sinit+0xe>
 8005c10:	08006df0 	.word	0x08006df0
 8005c14:	08005b2d 	.word	0x08005b2d

08005c18 <__sfp>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	0007      	movs	r7, r0
 8005c1c:	f7ff ffa4 	bl	8005b68 <__sfp_lock_acquire>
 8005c20:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <__sfp+0x88>)
 8005c22:	681e      	ldr	r6, [r3, #0]
 8005c24:	69b3      	ldr	r3, [r6, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <__sfp+0x18>
 8005c2a:	0030      	movs	r0, r6
 8005c2c:	f7ff ffbc 	bl	8005ba8 <__sinit>
 8005c30:	3648      	adds	r6, #72	; 0x48
 8005c32:	68b4      	ldr	r4, [r6, #8]
 8005c34:	6873      	ldr	r3, [r6, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	d504      	bpl.n	8005c44 <__sfp+0x2c>
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d022      	beq.n	8005c86 <__sfp+0x6e>
 8005c40:	6836      	ldr	r6, [r6, #0]
 8005c42:	e7f6      	b.n	8005c32 <__sfp+0x1a>
 8005c44:	220c      	movs	r2, #12
 8005c46:	5ea5      	ldrsh	r5, [r4, r2]
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d11a      	bne.n	8005c82 <__sfp+0x6a>
 8005c4c:	0020      	movs	r0, r4
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <__sfp+0x8c>)
 8005c50:	3058      	adds	r0, #88	; 0x58
 8005c52:	60e3      	str	r3, [r4, #12]
 8005c54:	6665      	str	r5, [r4, #100]	; 0x64
 8005c56:	f000 f847 	bl	8005ce8 <__retarget_lock_init_recursive>
 8005c5a:	f7ff ff8d 	bl	8005b78 <__sfp_lock_release>
 8005c5e:	0020      	movs	r0, r4
 8005c60:	2208      	movs	r2, #8
 8005c62:	0029      	movs	r1, r5
 8005c64:	6025      	str	r5, [r4, #0]
 8005c66:	60a5      	str	r5, [r4, #8]
 8005c68:	6065      	str	r5, [r4, #4]
 8005c6a:	6125      	str	r5, [r4, #16]
 8005c6c:	6165      	str	r5, [r4, #20]
 8005c6e:	61a5      	str	r5, [r4, #24]
 8005c70:	305c      	adds	r0, #92	; 0x5c
 8005c72:	f7ff f93f 	bl	8004ef4 <memset>
 8005c76:	6365      	str	r5, [r4, #52]	; 0x34
 8005c78:	63a5      	str	r5, [r4, #56]	; 0x38
 8005c7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005c7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c7e:	0020      	movs	r0, r4
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c82:	3468      	adds	r4, #104	; 0x68
 8005c84:	e7d7      	b.n	8005c36 <__sfp+0x1e>
 8005c86:	2104      	movs	r1, #4
 8005c88:	0038      	movs	r0, r7
 8005c8a:	f7ff ff57 	bl	8005b3c <__sfmoreglue>
 8005c8e:	1e04      	subs	r4, r0, #0
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	d1d5      	bne.n	8005c40 <__sfp+0x28>
 8005c94:	f7ff ff70 	bl	8005b78 <__sfp_lock_release>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	e7ef      	b.n	8005c7e <__sfp+0x66>
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	08006df0 	.word	0x08006df0
 8005ca4:	ffff0001 	.word	0xffff0001

08005ca8 <_fwalk_reent>:
 8005ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005caa:	0004      	movs	r4, r0
 8005cac:	0006      	movs	r6, r0
 8005cae:	2700      	movs	r7, #0
 8005cb0:	9101      	str	r1, [sp, #4]
 8005cb2:	3448      	adds	r4, #72	; 0x48
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	68a5      	ldr	r5, [r4, #8]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	d504      	bpl.n	8005ccc <_fwalk_reent+0x24>
 8005cc2:	6824      	ldr	r4, [r4, #0]
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d1f5      	bne.n	8005cb4 <_fwalk_reent+0xc>
 8005cc8:	0038      	movs	r0, r7
 8005cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ccc:	89ab      	ldrh	r3, [r5, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d908      	bls.n	8005ce4 <_fwalk_reent+0x3c>
 8005cd2:	220e      	movs	r2, #14
 8005cd4:	5eab      	ldrsh	r3, [r5, r2]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	d004      	beq.n	8005ce4 <_fwalk_reent+0x3c>
 8005cda:	0029      	movs	r1, r5
 8005cdc:	0030      	movs	r0, r6
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	4307      	orrs	r7, r0
 8005ce4:	3568      	adds	r5, #104	; 0x68
 8005ce6:	e7e8      	b.n	8005cba <_fwalk_reent+0x12>

08005ce8 <__retarget_lock_init_recursive>:
 8005ce8:	4770      	bx	lr

08005cea <__retarget_lock_acquire_recursive>:
 8005cea:	4770      	bx	lr

08005cec <__retarget_lock_release_recursive>:
 8005cec:	4770      	bx	lr
	...

08005cf0 <__swhatbuf_r>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	000e      	movs	r6, r1
 8005cf4:	001d      	movs	r5, r3
 8005cf6:	230e      	movs	r3, #14
 8005cf8:	5ec9      	ldrsh	r1, [r1, r3]
 8005cfa:	0014      	movs	r4, r2
 8005cfc:	b096      	sub	sp, #88	; 0x58
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	da08      	bge.n	8005d14 <__swhatbuf_r+0x24>
 8005d02:	220c      	movs	r2, #12
 8005d04:	5eb3      	ldrsh	r3, [r6, r2]
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	d411      	bmi.n	8005d32 <__swhatbuf_r+0x42>
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	e00f      	b.n	8005d34 <__swhatbuf_r+0x44>
 8005d14:	466a      	mov	r2, sp
 8005d16:	f000 f92f 	bl	8005f78 <_fstat_r>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	dbf1      	blt.n	8005d02 <__swhatbuf_r+0x12>
 8005d1e:	23f0      	movs	r3, #240	; 0xf0
 8005d20:	9901      	ldr	r1, [sp, #4]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4019      	ands	r1, r3
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <__swhatbuf_r+0x4c>)
 8005d28:	18c9      	adds	r1, r1, r3
 8005d2a:	424b      	negs	r3, r1
 8005d2c:	4159      	adcs	r1, r3
 8005d2e:	6029      	str	r1, [r5, #0]
 8005d30:	e7ed      	b.n	8005d0e <__swhatbuf_r+0x1e>
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	2000      	movs	r0, #0
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	b016      	add	sp, #88	; 0x58
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	ffffe000 	.word	0xffffe000

08005d40 <__smakebuf_r>:
 8005d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d42:	2602      	movs	r6, #2
 8005d44:	898b      	ldrh	r3, [r1, #12]
 8005d46:	0005      	movs	r5, r0
 8005d48:	000c      	movs	r4, r1
 8005d4a:	4233      	tst	r3, r6
 8005d4c:	d006      	beq.n	8005d5c <__smakebuf_r+0x1c>
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3347      	adds	r3, #71	; 0x47
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2301      	movs	r3, #1
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	ab01      	add	r3, sp, #4
 8005d60:	f7ff ffc6 	bl	8005cf0 <__swhatbuf_r>
 8005d64:	9900      	ldr	r1, [sp, #0]
 8005d66:	0007      	movs	r7, r0
 8005d68:	0028      	movs	r0, r5
 8005d6a:	f7ff f9ad 	bl	80050c8 <_malloc_r>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d108      	bne.n	8005d84 <__smakebuf_r+0x44>
 8005d72:	220c      	movs	r2, #12
 8005d74:	5ea3      	ldrsh	r3, [r4, r2]
 8005d76:	059a      	lsls	r2, r3, #22
 8005d78:	d4ef      	bmi.n	8005d5a <__smakebuf_r+0x1a>
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	431e      	orrs	r6, r3
 8005d80:	81a6      	strh	r6, [r4, #12]
 8005d82:	e7e4      	b.n	8005d4e <__smakebuf_r+0xe>
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <__smakebuf_r+0x84>)
 8005d86:	62ab      	str	r3, [r5, #40]	; 0x28
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	89a2      	ldrh	r2, [r4, #12]
 8005d8c:	6020      	str	r0, [r4, #0]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	6120      	str	r0, [r4, #16]
 8005d96:	6163      	str	r3, [r4, #20]
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <__smakebuf_r+0x7a>
 8005d9e:	0028      	movs	r0, r5
 8005da0:	230e      	movs	r3, #14
 8005da2:	5ee1      	ldrsh	r1, [r4, r3]
 8005da4:	f000 f8fa 	bl	8005f9c <_isatty_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d006      	beq.n	8005dba <__smakebuf_r+0x7a>
 8005dac:	2203      	movs	r2, #3
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	4393      	bics	r3, r2
 8005db2:	001a      	movs	r2, r3
 8005db4:	2301      	movs	r3, #1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	89a0      	ldrh	r0, [r4, #12]
 8005dbc:	4307      	orrs	r7, r0
 8005dbe:	81a7      	strh	r7, [r4, #12]
 8005dc0:	e7cb      	b.n	8005d5a <__smakebuf_r+0x1a>
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	08005b2d 	.word	0x08005b2d

08005dc8 <memchr>:
 8005dc8:	b2c9      	uxtb	r1, r1
 8005dca:	1882      	adds	r2, r0, r2
 8005dcc:	4290      	cmp	r0, r2
 8005dce:	d101      	bne.n	8005dd4 <memchr+0xc>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4770      	bx	lr
 8005dd4:	7803      	ldrb	r3, [r0, #0]
 8005dd6:	428b      	cmp	r3, r1
 8005dd8:	d0fb      	beq.n	8005dd2 <memchr+0xa>
 8005dda:	3001      	adds	r0, #1
 8005ddc:	e7f6      	b.n	8005dcc <memchr+0x4>
	...

08005de0 <__malloc_lock>:
 8005de0:	b510      	push	{r4, lr}
 8005de2:	4802      	ldr	r0, [pc, #8]	; (8005dec <__malloc_lock+0xc>)
 8005de4:	f7ff ff81 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	20000804 	.word	0x20000804

08005df0 <__malloc_unlock>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4802      	ldr	r0, [pc, #8]	; (8005dfc <__malloc_unlock+0xc>)
 8005df4:	f7ff ff7a 	bl	8005cec <__retarget_lock_release_recursive>
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	20000804 	.word	0x20000804

08005e00 <_raise_r>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	0004      	movs	r4, r0
 8005e04:	000d      	movs	r5, r1
 8005e06:	291f      	cmp	r1, #31
 8005e08:	d904      	bls.n	8005e14 <_raise_r+0x14>
 8005e0a:	2316      	movs	r3, #22
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	2001      	movs	r0, #1
 8005e10:	4240      	negs	r0, r0
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <_raise_r+0x24>
 8005e1a:	008a      	lsls	r2, r1, #2
 8005e1c:	189b      	adds	r3, r3, r2
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d108      	bne.n	8005e36 <_raise_r+0x36>
 8005e24:	0020      	movs	r0, r4
 8005e26:	f000 f831 	bl	8005e8c <_getpid_r>
 8005e2a:	002a      	movs	r2, r5
 8005e2c:	0001      	movs	r1, r0
 8005e2e:	0020      	movs	r0, r4
 8005e30:	f000 f81a 	bl	8005e68 <_kill_r>
 8005e34:	e7ed      	b.n	8005e12 <_raise_r+0x12>
 8005e36:	2000      	movs	r0, #0
 8005e38:	2a01      	cmp	r2, #1
 8005e3a:	d0ea      	beq.n	8005e12 <_raise_r+0x12>
 8005e3c:	1c51      	adds	r1, r2, #1
 8005e3e:	d103      	bne.n	8005e48 <_raise_r+0x48>
 8005e40:	2316      	movs	r3, #22
 8005e42:	3001      	adds	r0, #1
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	e7e4      	b.n	8005e12 <_raise_r+0x12>
 8005e48:	2400      	movs	r4, #0
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	601c      	str	r4, [r3, #0]
 8005e4e:	4790      	blx	r2
 8005e50:	0020      	movs	r0, r4
 8005e52:	e7de      	b.n	8005e12 <_raise_r+0x12>

08005e54 <raise>:
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <raise+0x10>)
 8005e58:	0001      	movs	r1, r0
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	f7ff ffd0 	bl	8005e00 <_raise_r>
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	20000014 	.word	0x20000014

08005e68 <_kill_r>:
 8005e68:	2300      	movs	r3, #0
 8005e6a:	b570      	push	{r4, r5, r6, lr}
 8005e6c:	4d06      	ldr	r5, [pc, #24]	; (8005e88 <_kill_r+0x20>)
 8005e6e:	0004      	movs	r4, r0
 8005e70:	0008      	movs	r0, r1
 8005e72:	0011      	movs	r1, r2
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	f7fa ff6f 	bl	8000d58 <_kill>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d103      	bne.n	8005e86 <_kill_r+0x1e>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d000      	beq.n	8005e86 <_kill_r+0x1e>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	20000808 	.word	0x20000808

08005e8c <_getpid_r>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	f7fa ff5d 	bl	8000d4c <_getpid>
 8005e92:	bd10      	pop	{r4, pc}

08005e94 <__sread>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	000c      	movs	r4, r1
 8005e98:	250e      	movs	r5, #14
 8005e9a:	5f49      	ldrsh	r1, [r1, r5]
 8005e9c:	f000 f8a4 	bl	8005fe8 <_read_r>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	db03      	blt.n	8005eac <__sread+0x18>
 8005ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ea6:	181b      	adds	r3, r3, r0
 8005ea8:	6563      	str	r3, [r4, #84]	; 0x54
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	4a02      	ldr	r2, [pc, #8]	; (8005eb8 <__sread+0x24>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	e7f9      	b.n	8005eaa <__sread+0x16>
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	ffffefff 	.word	0xffffefff

08005ebc <__swrite>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	001f      	movs	r7, r3
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	0005      	movs	r5, r0
 8005ec4:	000c      	movs	r4, r1
 8005ec6:	0016      	movs	r6, r2
 8005ec8:	05db      	lsls	r3, r3, #23
 8005eca:	d505      	bpl.n	8005ed8 <__swrite+0x1c>
 8005ecc:	230e      	movs	r3, #14
 8005ece:	5ec9      	ldrsh	r1, [r1, r3]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	f000 f874 	bl	8005fc0 <_lseek_r>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <__swrite+0x34>)
 8005edc:	0028      	movs	r0, r5
 8005ede:	4013      	ands	r3, r2
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	0032      	movs	r2, r6
 8005ee4:	230e      	movs	r3, #14
 8005ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8005ee8:	003b      	movs	r3, r7
 8005eea:	f000 f81f 	bl	8005f2c <_write_r>
 8005eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef0:	ffffefff 	.word	0xffffefff

08005ef4 <__sseek>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	000c      	movs	r4, r1
 8005ef8:	250e      	movs	r5, #14
 8005efa:	5f49      	ldrsh	r1, [r1, r5]
 8005efc:	f000 f860 	bl	8005fc0 <_lseek_r>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	1c42      	adds	r2, r0, #1
 8005f04:	d103      	bne.n	8005f0e <__sseek+0x1a>
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <__sseek+0x28>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	0152      	lsls	r2, r2, #5
 8005f12:	4313      	orrs	r3, r2
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	6560      	str	r0, [r4, #84]	; 0x54
 8005f18:	e7f8      	b.n	8005f0c <__sseek+0x18>
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	ffffefff 	.word	0xffffefff

08005f20 <__sclose>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	230e      	movs	r3, #14
 8005f24:	5ec9      	ldrsh	r1, [r1, r3]
 8005f26:	f000 f815 	bl	8005f54 <_close_r>
 8005f2a:	bd10      	pop	{r4, pc}

08005f2c <_write_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	0004      	movs	r4, r0
 8005f30:	0008      	movs	r0, r1
 8005f32:	0011      	movs	r1, r2
 8005f34:	001a      	movs	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	4d05      	ldr	r5, [pc, #20]	; (8005f50 <_write_r+0x24>)
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fa ff45 	bl	8000dca <_write>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d103      	bne.n	8005f4c <_write_r+0x20>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d000      	beq.n	8005f4c <_write_r+0x20>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	20000808 	.word	0x20000808

08005f54 <_close_r>:
 8005f54:	2300      	movs	r3, #0
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	4d06      	ldr	r5, [pc, #24]	; (8005f74 <_close_r+0x20>)
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	0008      	movs	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fa ff4f 	bl	8000e02 <_close>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d103      	bne.n	8005f70 <_close_r+0x1c>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d000      	beq.n	8005f70 <_close_r+0x1c>
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	20000808 	.word	0x20000808

08005f78 <_fstat_r>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_fstat_r+0x20>)
 8005f7e:	0004      	movs	r4, r0
 8005f80:	0008      	movs	r0, r1
 8005f82:	0011      	movs	r1, r2
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f7fa ff46 	bl	8000e16 <_fstat>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d103      	bne.n	8005f96 <_fstat_r+0x1e>
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d000      	beq.n	8005f96 <_fstat_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	20000808 	.word	0x20000808

08005f9c <_isatty_r>:
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	b570      	push	{r4, r5, r6, lr}
 8005fa0:	4d06      	ldr	r5, [pc, #24]	; (8005fbc <_isatty_r+0x20>)
 8005fa2:	0004      	movs	r4, r0
 8005fa4:	0008      	movs	r0, r1
 8005fa6:	602b      	str	r3, [r5, #0]
 8005fa8:	f7fa ff43 	bl	8000e32 <_isatty>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d103      	bne.n	8005fb8 <_isatty_r+0x1c>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d000      	beq.n	8005fb8 <_isatty_r+0x1c>
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	20000808 	.word	0x20000808

08005fc0 <_lseek_r>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	0004      	movs	r4, r0
 8005fc4:	0008      	movs	r0, r1
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	001a      	movs	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4d05      	ldr	r5, [pc, #20]	; (8005fe4 <_lseek_r+0x24>)
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fa ff38 	bl	8000e44 <_lseek>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d103      	bne.n	8005fe0 <_lseek_r+0x20>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d000      	beq.n	8005fe0 <_lseek_r+0x20>
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	20000808 	.word	0x20000808

08005fe8 <_read_r>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	0004      	movs	r4, r0
 8005fec:	0008      	movs	r0, r1
 8005fee:	0011      	movs	r1, r2
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4d05      	ldr	r5, [pc, #20]	; (800600c <_read_r+0x24>)
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fa feca 	bl	8000d90 <_read>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d103      	bne.n	8006008 <_read_r+0x20>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d000      	beq.n	8006008 <_read_r+0x20>
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000808 	.word	0x20000808

08006010 <_init>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr

0800601c <_fini>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr
